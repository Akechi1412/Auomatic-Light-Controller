CCS PCM C Compiler, Version 5.109, 5967               21-Nov-22 00:15

               Filename:   D:\221\Embedded System Design\Project\Automatic Light Controller\CCS\main.lst

               ROM used:   3249 words (40%)
                           Largest free fragment is 2048
               RAM used:   45 (12%) at main() level
                           63 (17%) worst case
               Stack used: 6 locations (4 in main + 2 for interrupts)
               Stack size: 8

*
0000:  MOVLW  0B
0001:  MOVWF  0A
0002:  GOTO   34E
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  MOVLW  8C
0028:  MOVWF  04
0029:  BTFSS  00.0
002A:  GOTO   02D
002B:  BTFSC  0C.0
002C:  GOTO   04E
002D:  MOVF   22,W
002E:  MOVWF  04
002F:  MOVF   23,W
0030:  MOVWF  77
0031:  MOVF   24,W
0032:  MOVWF  78
0033:  MOVF   25,W
0034:  MOVWF  79
0035:  MOVF   26,W
0036:  MOVWF  7A
0037:  MOVF   27,W
0038:  BSF    03.6
0039:  MOVWF  0D
003A:  BCF    03.6
003B:  MOVF   28,W
003C:  BSF    03.6
003D:  MOVWF  0F
003E:  BCF    03.6
003F:  MOVF   29,W
0040:  BSF    03.6
0041:  MOVWF  0C
0042:  BCF    03.6
0043:  MOVF   2A,W
0044:  BSF    03.6
0045:  MOVWF  0E
0046:  BCF    03.6
0047:  MOVF   20,W
0048:  MOVWF  0A
0049:  SWAPF  21,W
004A:  MOVWF  03
004B:  SWAPF  7F,F
004C:  SWAPF  7F,W
004D:  RETFIE
004E:  BCF    0A.3
004F:  BCF    0A.4
0050:  GOTO   116
.................... /*
....................  * File:   main.c
....................  * Author: Akechi
....................  *
....................  * Created on November 11, 2022, 9:44 PM
....................  */
.................... 
.................... #include "main.h"
.................... /* 
....................  * File:   main.h
....................  * Author: Akechi
....................  *
....................  * Created on November 11, 2022, 9:52 PM
....................  */
.................... 
.................... #ifndef MAIN_H
.................... #define   MAIN_H
.................... 
.................... #include <16f877a.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
0051:  BCF    0A.0
0052:  BCF    0A.1
0053:  BCF    0A.2
0054:  ADDWF  02,F
0055:  RETLW  28
0056:  RETLW  0C
0057:  RETLW  01
0058:  RETLW  06
*
00AB:  BCF    0A.0
00AC:  BCF    0A.1
00AD:  BCF    0A.2
00AE:  ADDWF  02,F
00AF:  GOTO   066
00B0:  GOTO   06E
00B1:  GOTO   076
00B2:  GOTO   07E
00B3:  GOTO   086
00B4:  MOVF   58,W
00B5:  CLRF   78
00B6:  SUBWF  57,W
00B7:  BTFSC  03.0
00B8:  GOTO   0BC
00B9:  MOVF   57,W
00BA:  MOVWF  77
00BB:  GOTO   0C8
00BC:  CLRF   77
00BD:  MOVLW  08
00BE:  MOVWF  59
00BF:  RLF    57,F
00C0:  RLF    77,F
00C1:  MOVF   58,W
00C2:  SUBWF  77,W
00C3:  BTFSC  03.0
00C4:  MOVWF  77
00C5:  RLF    78,F
00C6:  DECFSZ 59,F
00C7:  GOTO   0BF
00C8:  RETURN
*
010D:  BSF    0A.0
010E:  BCF    0A.1
010F:  BCF    0A.2
0110:  ADDWF  02,F
0111:  GOTO   0D6
0112:  GOTO   0DC
0113:  GOTO   0E2
0114:  GOTO   0E8
0115:  GOTO   0EE
*
01E5:  DATA CD,20
01E6:  DATA CE,2A
01E7:  DATA 41,26
01E8:  DATA A0,26
01E9:  DATA 4F,22
01EA:  DATA 45,00
01EB:  DATA CC,24
01EC:  DATA 47,24
01ED:  DATA 54,1D
01EE:  DATA 4F,27
01EF:  DATA 20,00
01F0:  DATA CC,24
01F1:  DATA 47,24
01F2:  DATA 54,1D
01F3:  DATA 4F,23
01F4:  DATA 46,00
01F5:  DATA D4,24
01F6:  DATA CD,22
01F7:  DATA 52,1D
01F8:  DATA 4F,27
01F9:  DATA 20,00
01FA:  DATA D4,24
01FB:  DATA CD,22
01FC:  DATA 52,1D
01FD:  DATA 4F,23
01FE:  DATA 46,00
01FF:  DATA D0,22
0200:  DATA D2,29
0201:  DATA 4F,27
0202:  DATA BA,12
0203:  DATA 64,00
0204:  DATA C1,2A
0205:  DATA D4,27
0206:  DATA CD,20
0207:  DATA D4,24
0208:  DATA 43,10
0209:  DATA CD,27
020A:  DATA C4,22
020B:  DATA 00,01
020C:  DATA CC,24
020D:  DATA 47,24
020E:  DATA 54,1D
020F:  DATA 4F,27
0210:  DATA 20,00
0211:  DATA CC,24
0212:  DATA 47,24
0213:  DATA 54,1D
0214:  DATA 4F,23
0215:  DATA 46,00
0216:  DATA D4,24
0217:  DATA CD,22
0218:  DATA 52,1D
0219:  DATA 4F,27
021A:  DATA 20,00
021B:  DATA D4,24
021C:  DATA CD,22
021D:  DATA 52,1D
021E:  DATA 4F,23
021F:  DATA 46,00
0220:  DATA D0,22
0221:  DATA D2,29
0222:  DATA 4F,27
0223:  DATA BA,12
0224:  DATA 64,00
0225:  DATA CE,24
0226:  DATA 47,24
0227:  DATA 54,10
0228:  DATA CD,27
0229:  DATA C4,22
022A:  DATA 00,01
022B:  DATA CC,24
022C:  DATA 47,24
022D:  DATA 54,1D
022E:  DATA 4F,27
022F:  DATA 20,00
0230:  DATA CC,24
0231:  DATA 47,24
0232:  DATA 54,1D
0233:  DATA 4F,23
0234:  DATA 46,00
0235:  DATA D4,24
0236:  DATA CD,22
0237:  DATA 52,1D
0238:  DATA 4F,27
0239:  DATA 20,00
023A:  DATA D4,24
023B:  DATA CD,22
023C:  DATA 52,1D
023D:  DATA 4F,23
023E:  DATA 46,00
023F:  DATA D0,22
0240:  DATA D2,29
0241:  DATA 4F,27
0242:  DATA BA,12
0243:  DATA 64,00
0244:  DATA D3,22
0245:  DATA 54,10
0246:  DATA D4,24
0247:  DATA CD,22
0248:  DATA A0,26
0249:  DATA 4F,22
024A:  DATA 45,00
024B:  DATA CE,24
024C:  DATA 47,24
024D:  DATA 54,10
024E:  DATA CD,27
024F:  DATA C4,22
0250:  DATA 20,2A
0251:  DATA C9,26
0252:  DATA 45,00
0253:  DATA C3,2A
0254:  DATA 52,29
0255:  DATA 45,27
0256:  DATA 54,10
0257:  DATA D4,24
0258:  DATA CD,22
0259:  DATA 00,01
025A:  DATA 20,10
025B:  DATA 20,10
025C:  DATA 20,10
025D:  DATA 20,10
025E:  DATA 20,10
025F:  DATA 20,10
0260:  DATA 20,10
0261:  DATA 20,00
0262:  DATA 20,10
0263:  DATA 20,10
0264:  DATA 20,10
0265:  DATA 20,10
0266:  DATA 20,10
0267:  DATA 20,10
0268:  DATA 00,00
0269:  DATA D3,22
026A:  DATA 54,10
026B:  DATA C3,2A
026C:  DATA 52,29
026D:  DATA 45,27
026E:  DATA 54,10
026F:  DATA D4,24
0270:  DATA CD,22
0271:  DATA 00,01
0272:  DATA C8,27
0273:  DATA 55,29
0274:  DATA 00,01
0275:  DATA CD,24
0276:  DATA CE,2A
0277:  DATA D4,22
0278:  DATA 00,01
0279:  DATA D3,22
027A:  DATA C3,27
027B:  DATA 4E,22
027C:  DATA 00,01
027D:  DATA D3,22
027E:  DATA 54,10
027F:  DATA CE,24
0280:  DATA 47,24
0281:  DATA 54,10
0282:  DATA CD,27
0283:  DATA C4,22
0284:  DATA 20,2A
0285:  DATA C9,26
0286:  DATA 45,00
0287:  DATA 53,2A
0288:  DATA 41,29
0289:  DATA 54,00
028A:  DATA 4F,27
028B:  DATA AF,27
028C:  DATA 46,23
028D:  DATA 00,01
028E:  DATA 20,10
028F:  DATA AF,27
0290:  DATA 46,23
0291:  DATA 00,01
0292:  DATA 4F,27
0293:  DATA 2F,10
0294:  DATA 20,10
0295:  DATA 00,01
*
060E:  MOVF   0B,W
060F:  MOVWF  47
0610:  BCF    0B.7
0611:  BSF    03.5
0612:  BSF    03.6
0613:  BSF    0C.7
0614:  BSF    0C.0
0615:  NOP
0616:  NOP
0617:  BCF    03.5
0618:  BCF    03.6
0619:  BTFSC  47.7
061A:  BSF    0B.7
061B:  BSF    03.6
061C:  MOVF   0C,W
061D:  ANDLW  7F
061E:  BTFSC  03.2
061F:  GOTO   662
0620:  BCF    03.6
0621:  MOVWF  47
0622:  BSF    03.6
0623:  MOVF   0D,W
0624:  BCF    03.6
0625:  MOVWF  48
0626:  BSF    03.6
0627:  MOVF   0F,W
0628:  BCF    03.6
0629:  MOVWF  49
062A:  MOVF   47,W
062B:  MOVWF  4D
062C:  CALL   437
062D:  MOVF   48,W
062E:  BSF    03.6
062F:  MOVWF  0D
0630:  BCF    03.6
0631:  MOVF   49,W
0632:  BSF    03.6
0633:  MOVWF  0F
0634:  BCF    03.6
0635:  MOVF   0B,W
0636:  MOVWF  4A
0637:  BCF    0B.7
0638:  BSF    03.5
0639:  BSF    03.6
063A:  BSF    0C.7
063B:  BSF    0C.0
063C:  NOP
063D:  NOP
063E:  BCF    03.5
063F:  BCF    03.6
0640:  BTFSC  4A.7
0641:  BSF    0B.7
0642:  BSF    03.6
0643:  RLF    0C,W
0644:  RLF    0E,W
0645:  ANDLW  7F
0646:  BTFSC  03.2
0647:  GOTO   662
0648:  BCF    03.6
0649:  MOVWF  47
064A:  BSF    03.6
064B:  MOVF   0D,W
064C:  BCF    03.6
064D:  MOVWF  48
064E:  BSF    03.6
064F:  MOVF   0F,W
0650:  BCF    03.6
0651:  MOVWF  49
0652:  MOVF   47,W
0653:  MOVWF  4D
0654:  CALL   437
0655:  MOVF   48,W
0656:  BSF    03.6
0657:  MOVWF  0D
0658:  BCF    03.6
0659:  MOVF   49,W
065A:  BSF    03.6
065B:  MOVWF  0F
065C:  INCF   0D,F
065D:  BTFSC  03.2
065E:  INCF   0F,F
065F:  BCF    03.6
0660:  GOTO   60E
0661:  BSF    03.6
0662:  BCF    03.6
0663:  RETURN
0664:  MOVF   0B,W
0665:  MOVWF  48
0666:  BCF    0B.7
0667:  BSF    03.5
0668:  BSF    03.6
0669:  BSF    0C.7
066A:  BSF    0C.0
066B:  NOP
066C:  NOP
066D:  BCF    03.5
066E:  BCF    03.6
066F:  BTFSC  48.7
0670:  BSF    0B.7
0671:  BTFSC  03.0
0672:  GOTO   69B
0673:  BSF    03.6
0674:  MOVF   0C,W
0675:  ANDLW  7F
0676:  BCF    03.6
0677:  MOVWF  48
0678:  BSF    03.6
0679:  MOVF   0D,W
067A:  BCF    03.6
067B:  MOVWF  49
067C:  BSF    03.6
067D:  MOVF   0F,W
067E:  BCF    03.6
067F:  MOVWF  4A
0680:  MOVF   48,W
0681:  MOVWF  4D
0682:  CALL   437
0683:  MOVF   49,W
0684:  BSF    03.6
0685:  MOVWF  0D
0686:  BCF    03.6
0687:  MOVF   4A,W
0688:  BSF    03.6
0689:  MOVWF  0F
068A:  BCF    03.6
068B:  MOVF   0B,W
068C:  MOVWF  4B
068D:  BCF    0B.7
068E:  BSF    03.5
068F:  BSF    03.6
0690:  BSF    0C.7
0691:  BSF    0C.0
0692:  NOP
0693:  NOP
0694:  BCF    03.5
0695:  BCF    03.6
0696:  BTFSC  4B.7
0697:  BSF    0B.7
0698:  DECFSZ 47,F
0699:  GOTO   69B
069A:  GOTO   6BA
069B:  BSF    03.6
069C:  RLF    0C,W
069D:  RLF    0E,W
069E:  ANDLW  7F
069F:  BCF    03.6
06A0:  MOVWF  48
06A1:  BSF    03.6
06A2:  MOVF   0D,W
06A3:  BCF    03.6
06A4:  MOVWF  49
06A5:  BSF    03.6
06A6:  MOVF   0F,W
06A7:  BCF    03.6
06A8:  MOVWF  4A
06A9:  MOVF   48,W
06AA:  MOVWF  4D
06AB:  CALL   437
06AC:  MOVF   49,W
06AD:  BSF    03.6
06AE:  MOVWF  0D
06AF:  BCF    03.6
06B0:  MOVF   4A,W
06B1:  BSF    03.6
06B2:  MOVWF  0F
06B3:  INCF   0D,F
06B4:  BTFSC  03.2
06B5:  INCF   0F,F
06B6:  BCF    03.0
06B7:  BCF    03.6
06B8:  DECFSZ 47,F
06B9:  GOTO   664
06BA:  RETURN
06BB:  MOVLW  20
06BC:  BTFSS  48.4
06BD:  MOVLW  30
06BE:  MOVWF  49
06BF:  MOVF   47,W
06C0:  MOVWF  77
06C1:  BTFSS  47.7
06C2:  GOTO   6CB
06C3:  COMF   77,F
06C4:  INCF   77,F
06C5:  MOVF   77,W
06C6:  MOVWF  47
06C7:  MOVLW  2D
06C8:  MOVWF  49
06C9:  BSF    48.7
06CA:  BSF    48.0
06CB:  MOVF   78,W
06CC:  CLRF   2B
06CD:  BTFSC  0B.7
06CE:  BSF    2B.7
06CF:  BCF    0B.7
06D0:  MOVF   47,W
06D1:  MOVWF  57
06D2:  MOVLW  64
06D3:  MOVWF  58
06D4:  CALL   0B4
06D5:  BTFSC  2B.7
06D6:  BSF    0B.7
06D7:  MOVF   77,W
06D8:  MOVWF  47
06D9:  MOVLW  30
06DA:  ADDWF  78,W
06DB:  MOVWF  4A
06DC:  CLRF   2B
06DD:  BTFSC  0B.7
06DE:  BSF    2B.7
06DF:  BCF    0B.7
06E0:  MOVF   47,W
06E1:  MOVWF  57
06E2:  MOVLW  0A
06E3:  MOVWF  58
06E4:  CALL   0B4
06E5:  BTFSC  2B.7
06E6:  BSF    0B.7
06E7:  MOVLW  30
06E8:  ADDWF  77,W
06E9:  MOVWF  4C
06EA:  MOVLW  30
06EB:  ADDWF  78,W
06EC:  MOVWF  4B
06ED:  MOVF   49,W
06EE:  MOVWF  77
06EF:  MOVLW  30
06F0:  SUBWF  4A,W
06F1:  BTFSC  03.2
06F2:  GOTO   6F7
06F3:  BSF    48.1
06F4:  BTFSC  48.7
06F5:  BSF    48.2
06F6:  GOTO   70B
06F7:  MOVF   49,W
06F8:  MOVWF  4A
06F9:  MOVLW  20
06FA:  MOVWF  49
06FB:  MOVLW  30
06FC:  SUBWF  4B,W
06FD:  BTFSC  03.2
06FE:  GOTO   703
06FF:  BSF    48.0
0700:  BTFSC  48.7
0701:  BSF    48.1
0702:  GOTO   70B
0703:  BTFSS  03.2
0704:  BSF    48.0
0705:  BTFSS  03.2
0706:  GOTO   70B
0707:  MOVF   4A,W
0708:  MOVWF  4B
0709:  MOVLW  20
070A:  MOVWF  4A
070B:  BTFSC  48.2
070C:  GOTO   712
070D:  BTFSC  48.1
070E:  GOTO   715
070F:  BTFSC  48.0
0710:  GOTO   718
0711:  GOTO   71B
0712:  MOVF   49,W
0713:  MOVWF  4D
0714:  CALL   437
0715:  MOVF   4A,W
0716:  MOVWF  4D
0717:  CALL   437
0718:  MOVF   4B,W
0719:  MOVWF  4D
071A:  CALL   437
071B:  MOVF   4C,W
071C:  MOVWF  4D
071D:  CALL   437
071E:  RETURN
071F:  MOVLW  20
0720:  BTFSS  48.4
0721:  MOVLW  30
0722:  MOVWF  49
0723:  MOVF   47,W
0724:  MOVWF  77
0725:  BTFSS  47.7
0726:  GOTO   72F
0727:  COMF   77,F
0728:  INCF   77,F
0729:  MOVF   77,W
072A:  MOVWF  47
072B:  MOVLW  2D
072C:  MOVWF  49
072D:  BSF    48.7
072E:  BSF    48.0
072F:  MOVF   78,W
0730:  CLRF   2B
0731:  BTFSC  0B.7
0732:  BSF    2B.7
0733:  BCF    0B.7
0734:  MOVF   47,W
0735:  MOVWF  57
0736:  MOVLW  64
0737:  MOVWF  58
0738:  CALL   0B4
0739:  BTFSC  2B.7
073A:  BSF    0B.7
073B:  MOVF   77,W
073C:  MOVWF  47
073D:  MOVLW  30
073E:  ADDWF  78,W
073F:  MOVWF  4A
0740:  CLRF   2B
0741:  BTFSC  0B.7
0742:  BSF    2B.7
0743:  BCF    0B.7
0744:  MOVF   47,W
0745:  MOVWF  57
0746:  MOVLW  0A
0747:  MOVWF  58
0748:  CALL   0B4
0749:  BTFSC  2B.7
074A:  BSF    0B.7
074B:  MOVLW  30
074C:  ADDWF  77,W
074D:  MOVWF  4C
074E:  MOVLW  30
074F:  ADDWF  78,W
0750:  MOVWF  4B
0751:  MOVF   49,W
0752:  MOVWF  77
0753:  MOVLW  30
0754:  SUBWF  4A,W
0755:  BTFSC  03.2
0756:  GOTO   75B
0757:  BSF    48.1
0758:  BTFSC  48.7
0759:  BSF    48.2
075A:  GOTO   76F
075B:  BTFSC  48.2
075C:  GOTO   76F
075D:  MOVF   49,W
075E:  MOVWF  4A
075F:  BTFSC  48.1
0760:  GOTO   766
0761:  MOVLW  30
0762:  SUBWF  4B,W
0763:  BTFSC  03.2
0764:  GOTO   769
0765:  BSF    48.0
0766:  BTFSC  48.7
0767:  BSF    48.1
0768:  GOTO   76F
0769:  BTFSS  03.2
076A:  BSF    48.0
076B:  BTFSS  03.2
076C:  GOTO   76F
076D:  MOVF   4A,W
076E:  MOVWF  4B
076F:  BTFSC  48.2
0770:  GOTO   776
0771:  BTFSC  48.1
0772:  GOTO   779
0773:  BTFSC  48.0
0774:  GOTO   77C
0775:  GOTO   77F
0776:  MOVF   49,W
0777:  MOVWF  4D
0778:  CALL   437
0779:  MOVF   4A,W
077A:  MOVWF  4D
077B:  CALL   437
077C:  MOVF   4B,W
077D:  MOVWF  4D
077E:  CALL   437
077F:  MOVF   4C,W
0780:  MOVWF  4D
0781:  CALL   437
0782:  RETURN
*
0921:  BSF    0A.0
0922:  BCF    0A.1
0923:  BCF    0A.2
0924:  ADDWF  02,F
0925:  GOTO   084
0926:  GOTO   0A2
0927:  GOTO   0C0
0928:  GOTO   0DE
0929:  GOTO   0FC
*
0CC5:  BCF    0A.0
0CC6:  BCF    0A.1
0CC7:  BSF    0A.2
0CC8:  ADDWF  02,F
0CC9:  GOTO   4BA
0CCA:  GOTO   4BE
0CCB:  GOTO   4C0
0CCC:  GOTO   4C2
.................... 
.................... #list
.................... 
.................... #include <def_877a.h>
.................... /* 
....................  * File:   def_877a.h
....................  * Author: Akechi
....................  *
....................  * Created on November 12, 2022, 3:11 AM
....................  */
.................... 
.................... #ifndef DEF_877A_H
.................... #define	DEF_877A_H
.................... 
.................... // register definitions
.................... #define W 0
.................... #define F 1
.................... 
.................... // register files
.................... #byte INDF =0x00
.................... #byte TMR0 =0x01
.................... #byte PCL =0x02
.................... #byte STATUS =0x03
.................... #byte FSR =0x04
.................... #byte PORTA =0x05
.................... #byte PORTB =0x06
.................... #byte PORTC =0x07
.................... #byte PORTD =0x08
.................... #byte PORTE =0x09
.................... 
.................... #byte EEDATA =0x10C
.................... #byte EEADR =0x10D
.................... #byte EEDATH =0x10E
.................... #byte EEADRH =0x10F
.................... #byte ADCON0 =0x1F
.................... #byte ADCON1 =0x9F
.................... #byte ADRESH =0x9F
.................... #byte ADSESL =0x9F
.................... 
.................... #byte PCLATH =0x0a
.................... #byte INTCON =0x0b
.................... #byte PIR1 =0x0c
.................... #byte PIR2 =0x0d
.................... #byte PIE1 =0x8c
.................... #byte PIE2 =0x8d
.................... 
.................... #byte OPTION_REG =0x81
.................... #byte TRISA =0x85
.................... #byte TRISB =0x86
.................... #byte TRISC =0x87
.................... #byte TRISD =0x88
.................... #byte TRISE =0x89
.................... #byte EECON1 =0x18C
.................... #byte EECON2 =0x18D
.................... 
.................... //bit definitions
.................... #bit RA5 =0x05.5
.................... #bit RA4 =0x05.4
.................... #bit RA3 =0x05.3
.................... #bit RA2 =0x05.2
.................... #bit RA1 =0x05.1
.................... #bit RA0 =0x05.0
.................... 
.................... #bit RB7 =0x06.7
.................... #bit RB6 =0x06.6
.................... #bit RB5 =0x06.5
.................... #bit RB4 =0x06.4
.................... #bit RB3 =0x06.3
.................... #bit RB2 =0x06.2
.................... #bit RB1 =0x06.1
.................... #bit RB0 =0x06.0
.................... 
.................... #bit RC7 =0x07.7
.................... #bit RC6 =0x07.6
.................... #bit RC5 =0x07.5
.................... #bit RC4 =0x07.4
.................... #bit RC3 =0x07.3
.................... #bit RC2 =0x07.2
.................... #bit RC1 =0x07.1
.................... #bit RC0 =0x07.0
.................... 
.................... #bit RD7 =0x08.7
.................... #bit RD6 =0x08.6
.................... #bit RD5 =0x08.5
.................... #bit RD4 =0x08.4
.................... #bit RD3 =0x08.3
.................... #bit RD2 =0x08.2
.................... #bit RD1 =0x08.1
.................... #bit RD0 =0x08.0
.................... 
.................... #bit RE2 =0x09.2
.................... #bit RE1 =0x09.1
.................... #bit RE0 =0x09.0
.................... 
.................... #bit TRISA5 =0x85.5
.................... #bit TRISA4 =0x85.4
.................... #bit TRISA3 =0x85.3
.................... #bit TRISA2 =0x85.2
.................... #bit TRISA1 =0x85.1
.................... #bit TRISA0 =0x85.0
.................... 
.................... #bit TRISB7 =0x86.7
.................... #bit TRISB6 =0x86.6
.................... #bit TRISB5 =0x86.5
.................... #bit TRISB4 =0x86.4
.................... #bit TRISB3 =0x86.3
.................... #bit TRISB2 =0x86.2
.................... #bit TRISB1 =0x86.1
.................... #bit TRISB0 =0x86.0
.................... 
.................... #bit TRISC7 =0x87.7
.................... #bit TRISC6 =0x87.6
.................... #bit TRISC5 =0x87.5
.................... #bit TRISC4 =0x87.4
.................... #bit TRISC3 =0x87.3
.................... #bit TRISC2 =0x87.2
.................... #bit TRISC1 =0x87.1
.................... #bit TRISC0 =0x87.0
.................... 
.................... #bit TRISD7 =0x88.7
.................... #bit TRISD6 =0x88.6
.................... #bit TRISD5 =0x88.5
.................... #bit TRISD4 =0x88.4
.................... #bit TRISD3 =0x88.3
.................... #bit TRISD2 =0x88.2
.................... #bit TRISD1 =0x88.1
.................... #bit TRISD0 =0x88.0
.................... 
.................... #bit TRISE2 =0x89.2
.................... #bit TRISE1 =0x89.1
.................... #bit TRISE0 =0x89.0
.................... 
.................... // INTCON Bits for C
.................... #bit gie = 0x0b.7
.................... #bit peie = 0x0b.6
.................... #bit tmr0ie = 0x0b.5
.................... #bit int0ie = 0x0b.4
.................... #bit rbie = 0x0b.3
.................... #bit tmr0if = 0x0b.2
.................... #bit int0if = 0x0b.1
.................... #bit rbif = 0x0b.0
.................... 
.................... // PIR1 for C
.................... #bit pspif = 0x0c.7
.................... #bit adif = 0x0c.6
.................... #bit rcif = 0x0c.5
.................... #bit txif = 0x0c.4
.................... #bit sspif = 0x0c.3
.................... #bit ccp1if = 0x0c.2
.................... #bit tmr2if = 0x0c.1
.................... #bit tmr1if = 0x0c.0
.................... 
.................... //PIR2 for C
.................... #bit cmif = 0x0d.6
.................... #bit eeif = 0x0d.4
.................... #bit bclif = 0x0d.3
.................... #bit ccp2if = 0x0d.0
.................... 
.................... // PIE1 for C
.................... #bit adie = 0x8c.6
.................... #bit rcie = 0x8c.5
.................... #bit txie = 0x8c.4
.................... #bit sspie = 0x8c.3
.................... #bit ccp1ie = 0x8c.2
.................... #bit tmr2ie = 0x8c.1
.................... #bit tmr1ie = 0x8c.0
.................... 
.................... //PIE2 for C
.................... #bit osfie = 0x8d.7
.................... #bit cmie = 0x8d.6
.................... #bit eeie = 0x8d.4
.................... 
.................... // OPTION Bits
.................... #bit not_rbpu = 0x81.7
.................... #bit intedg = 0x81.6
.................... #bit t0cs = 0x81.5
.................... #bit t0se = 0x81.4
.................... #bit psa = 0x81.3
.................... #bit ps2 = 0x81.2
.................... #bit ps1 = 0x81.1
.................... #bit ps0 = 0x81.0
.................... 
.................... // EECON1 Bits
.................... #bit eepgd = 0x18c.7
.................... 
.................... #endif	/* DEF_877A_H */
.................... 
.................... 
.................... #include <stdint.h>
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                           stdint.h                                ////
.................... ////                                                                   ////
.................... //// Standard integer definitions.                                     ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _STDINT
.................... 
.................... #define _STDINT
.................... 
.................... //////////// exact width
.................... 
.................... typedef signed int8 int8_t;
.................... typedef unsigned int8 uint8_t;
.................... typedef signed int16 int16_t;
.................... typedef unsigned int16 uint16_t;
.................... typedef signed int32 int32_t;
.................... typedef unsigned int32 uint32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int24_t;
.................... //typedef unsigned int24 uint24_t;
.................... typedef signed int64 int64_t;
.................... typedef unsigned int64 uint64_t;
.................... #endif
.................... 
.................... #define INT8_MAX  (127)
.................... #define INT8_MIN  (-128)
.................... #define UINT8_MAX (255)
.................... 
.................... #define INT16_MAX  (32767)
.................... #define INT16_MIN  (-32768)
.................... #define UINT16_MAX (65535)
.................... 
.................... #define INT32_MAX  (2147483647)
.................... #define INT32_MIN  (-2147483648)
.................... #define UINT32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT24_MAX  (8388607)
.................... //#define INT24_MIN  (-8388608)
.................... //#define UINT24_MAX (16777215)
.................... 
.................... #define INT64_MAX  (9223372036854775807)
.................... #define INT64_MIN  (-9223372036854775808)
.................... #define UINT64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// minimum width
.................... 
.................... typedef signed int8 int_least8_t;
.................... typedef unsigned int8 uint_least8_t;
.................... typedef signed int16 int_least16_t;
.................... typedef unsigned int16 uint_least16_t;
.................... typedef signed int32 int_least32_t;
.................... typedef unsigned int32 uint_least32_t;
.................... 
.................... #if defined(__PCD__)
.................... //typedef signed int24 int_least24_t;
.................... //typedef unsigned int24 uint_least24_t;
.................... typedef signed int64 int_least64_t;
.................... typedef unsigned int64 uint_least64_t;
.................... #endif
.................... 
.................... #define INT_LEAST8_MAX  (127)
.................... #define INT_LEAST8_MIN  (-128)
.................... #define UINT_LEAST8_MAX (255)
.................... 
.................... #define INT_LEAST16_MAX  (32767)
.................... #define INT_LEAST16_MIN  (-32768)
.................... #define UINT_LEAST16_MAX (65535)
.................... 
.................... #define INT_LEAST32_MAX  (2147483647)
.................... #define INT_LEAST32_MIN  (-2147483648)
.................... #define UINT_LEAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_LEAST24_MAX  (8388607)
.................... //#define INT_LEAST24_MIN  (-8388608)
.................... //#define UINT_LEAST24_MAX (16777215)
.................... 
.................... #define INT_LEAST64_MAX  (9223372036854775807)
.................... #define INT_LEAST64_MIN  (-9223372036854775808)
.................... #define UINT_LEAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... ///////// fastest width
.................... 
.................... #if defined(__PCD__)
.................... typedef signed int16 int_fast8_t;
.................... typedef unsigned int16 uint_fast8_t;
.................... #define INT_FAST8_MAX  (32767)
.................... #define INT_FAST8_MIN  (-32768)
.................... #define UINT_FAST8_MAX (65535)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... //typedef signed int24 int_fast24_t;
.................... //typedef unsigned int24 uint_fast24_t;
.................... typedef signed int64 int_fast64_t;
.................... typedef unsigned int64 uint_fast64_t;
.................... #else
.................... typedef signed int8 int_fast8_t;
.................... typedef unsigned int8 uint_fast8_t;
.................... #define INT_FAST8_MAX  (127)
.................... #define INT_FAST8_MIN  (-128)
.................... #define UINT_FAST8_MAX (255)
.................... typedef signed int16 int_fast16_t;
.................... typedef unsigned int16 uint_fast16_t;
.................... #endif
.................... 
.................... typedef signed int32 int_fast32_t;
.................... typedef unsigned int32 uint_fast32_t;
.................... 
.................... #define INT_FAST16_MAX  (32767)
.................... #define INT_FAST16_MIN  (-32768)
.................... #define UINT_FAST16_MAX (65535)
.................... 
.................... #define INT_FAST32_MAX  (2147483647)
.................... #define INT_FAST32_MIN  (-2147483648)
.................... #define UINT_FAST32_MAX (4294967295)
.................... 
.................... #if defined(__PCD__)
.................... //#define INT_FAST24_MAX  (8388607)
.................... //#define INT_FAST24_MIN  (-8388608)
.................... //#define UINT_FAST24_MAX (16777215)
.................... 
.................... #define INT_FAST64_MAX  (9223372036854775807)
.................... #define INT_FAST64_MIN  (-9223372036854775808)
.................... #define UINT_FAST64_MAX (18446744073709551615)
.................... #endif
.................... 
.................... //////////// big enough to hold pointers (OPTIONAL)
.................... 
.................... #if defined(__PCD__)
....................    typedef unsigned int32 uintptr_t;
....................    typedef signed int32 intptr_t;
.................... #else
....................    typedef unsigned int16 uintptr_t;
....................    typedef signed int16 intptr_t;
.................... #endif
.................... 
.................... #define INT8_C(val) ((int8_t)val)
.................... #define UINT8_C(val) ((uint8_t)val)
.................... #define INT16_C(val) ((int16_t)val)
.................... #define UINT16_C(val) ((uint16_t)val)
.................... #define INT32_C(val) ((int32_t)val)
.................... #define UINT32_C(val) ((uint32_t)val)
.................... 
.................... #if defined(__PCD__)
.................... #define INT64_C(val) ((int64_t)val)
.................... #define UINT64_C(val) ((uint64_t)val)
.................... #endif
.................... 
.................... /// TODO:
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX
.................... 
.................... 
.................... /////////// greatest width (OPTIONAL)
.................... 
.................... #ifdef __PCD__
....................    typedef signed int64 intmax_t;
....................    typedef unsigned int64 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (9223372036854775807)
....................    #define INTMAXN_MIN  (-9223372036854775808)
....................    #define UINTMAXN_MAX (18446744073709551615)
....................    
....................    #define INTMAX_C(value) ((signed int64)val)
....................    #define UINTMAX_C(value) ((unsigned int64)val)
.................... #else
....................    typedef signed int32 intmax_t;
....................    typedef unsigned int32 uintmax_t;
....................    
....................    #define INTMAXN_MAX  (2147483647)
....................    #define INTMAXN_MIN  (-2147483648)
....................    #define UINTMAXN_MAX (4294967295)
....................    
....................    #define INTMAX_C(value) ((signed int32)val)
....................    #define UINTMAX_C(value) ((unsigned int32)val)
.................... #endif
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... // configurations
.................... #device *=16 ADC=10
.................... #fuses NOWDT, HS, NOPUT, NOPROTECT, NODEBUG, NOBROWNOUT, NOLVP, NOCPD, NOWRT
.................... #use delay(crystal = 20M)
*
0296:  MOVLW  4E
0297:  MOVWF  04
0298:  BCF    03.7
0299:  MOVF   00,W
029A:  BTFSC  03.2
029B:  GOTO   2A9
029C:  MOVLW  06
029D:  MOVWF  78
029E:  CLRF   77
029F:  DECFSZ 77,F
02A0:  GOTO   29F
02A1:  DECFSZ 78,F
02A2:  GOTO   29E
02A3:  MOVLW  7B
02A4:  MOVWF  77
02A5:  DECFSZ 77,F
02A6:  GOTO   2A5
02A7:  DECFSZ 00,F
02A8:  GOTO   29C
02A9:  RETURN
.................... #use i2c(master, fast, sda = PIN_C4, scl = PIN_C3)
*
045E:  BCF    14.7
045F:  BCF    0C.3
0460:  MOVF   4F,W
0461:  MOVWF  13
0462:  MOVLW  02
0463:  BTFSC  14.7
0464:  GOTO   46C
0465:  BSF    03.5
0466:  BTFSC  14.2
0467:  GOTO   466
0468:  MOVLW  00
0469:  BTFSC  11.6
046A:  MOVLW  01
046B:  BCF    03.5
046C:  MOVWF  78
046D:  RETURN
046E:  BCF    14.6
046F:  BSF    03.5
0470:  BSF    11.3
0471:  BTFSC  11.3
0472:  GOTO   471
0473:  BTFSC  77.0
0474:  BCF    11.5
0475:  BTFSS  77.0
0476:  BSF    11.5
0477:  BSF    11.4
0478:  BTFSC  11.4
0479:  GOTO   478
047A:  BCF    03.5
047B:  MOVF   13,W
047C:  MOVWF  78
047D:  RETURN
.................... 
.................... //!#define LCD_HIGH_TIME 300
.................... //!#define LCD_LOW_TIME 100
.................... //!#define TIMER1_PREVALUE 3036    //10ms for prescale 4
.................... 
.................... // Only simulate on Proteus
.................... #define LCD_HIGH_TIME 60
.................... #define LCD_LOW_TIME 20
.................... #define TIMER1_PREVALUE 53036   // 50ms for prescale 4
.................... 
.................... #define PIR RB1
.................... #define IR1 RB2
.................... #define IR2 RB3
.................... #define LIGHT_PIN PIN_C0
.................... #define LED_IN_PIN PIN_C1
.................... #define LED_OUT_PIN PIN_C2
.................... #define LIGHT_CONTROL RC0
.................... #define LED_IN RC1
.................... #define LED_OUT RC2
.................... #define LIGHT RB0
.................... #define MENU RB4
.................... #define UP RB5
.................... #define DOWN RB6
.................... #define ENTER RB7
.................... 
.................... typedef enum {manual, set_time, automatic, night} mode_enum;
.................... 
.................... typedef enum {
....................    set_night_mode_time, 
....................    set_current_time
.................... } set_time_type_enum;
.................... 
.................... typedef enum {
....................    choose_type_st,
....................    set_time_st
.................... } set_time_stage_enum;
.................... 
.................... typedef enum {
....................    set_hour, 
....................    set_minute, 
....................    set_second
.................... } set_current_time_stage_enum;
.................... 
.................... typedef enum {
....................    set_start_hour, 
....................    set_start_minute, 
....................    set_end_hour, 
....................    set_end_minute, 
....................    set_state
.................... } set_nm_time_stage_enum;
.................... 
.................... typedef struct {
....................     int8_t hour;
....................     int8_t minute;
....................     int8_t second;
.................... } time;
.................... 
.................... typedef struct {
....................    int8_t start_hour;
....................    int8_t start_minute;
....................    int8_t end_hour;
....................    int8_t end_minute;
....................    BOOLEAN state;
.................... } timer;
.................... 
.................... // Prototype
.................... void check_in_out();
.................... void up_handler();
.................... void down_handler();
.................... void enter_handler();
.................... void display_manual_mode();
.................... void display_automatic_mode();
.................... void display_night_mode();
.................... void display_set_time_mode();
.................... void display_set_current_time();
.................... void display_set_night_mode_time();
.................... void read_night_timer_data();
.................... void write_night_timer_data();
.................... 
.................... #endif   /* MAIN_H */
.................... 
.................... 
.................... 
.................... #include "lcd2004.c"
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////                             lcd2004.c                             ////
.................... ////            Driver for common 4x20 LCD modules (Custom)             ////
.................... ////                                                                    ////
.................... ////  lcd_init()   Must be called before any other function.            ////
.................... ////                                                                    ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      ////
.................... ////                     The following have special meaning:            ////
.................... ////                      \f  Clear display                             ////
.................... ////                      \n  Go to start of second line                ////
.................... ////                      \b  Move back one position                    ////      
.................... ////                                                                    ////
.................... ////  lcd_prints(str)  Display str on the next position of the LCD      ////
.................... ////                                                                    ////
.................... ////  lcd_print_delay(str, ms) Display each character of str in turn    ////
.................... ////                             on the next position                   ////
.................... ////                                                                    ////
.................... ////  lcd_print_center(str, y)  Display str in the center               ////
.................... ////                                                                    ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     ////
.................... ////                                                                    ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          ////
.................... ////                                                                    ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #define MAX_X 20
.................... #define MAX_Y 4
.................... 
.................... #define LCD_DB4   PIN_D4
.................... #define LCD_DB5   PIN_D5
.................... #define LCD_DB6   PIN_D6
.................... #define LCD_DB7   PIN_D7
.................... 
.................... #define LCD_RS    PIN_E0
.................... #define LCD_RW    PIN_E1
.................... #define LCD_E     PIN_E2
.................... 
.................... /*
.................... // To prove that the driver can be used with random
.................... // pins, I also tested it with these pins:
.................... #define LCD_DB4   PIN_D4
.................... #define LCD_DB5   PIN_B1
.................... #define LCD_DB6   PIN_C5
.................... #define LCD_DB7   PIN_B5
.................... 
.................... #define LCD_RS    PIN_E2
.................... #define LCD_RW    PIN_B2
.................... #define LCD_E     PIN_D6
.................... */
.................... 
.................... // If you want only a 6-pin interface to your LCD, then
.................... // connect the R/W pin on the LCD to ground, and comment
.................... // out the following line.  Doing so will save one PIC
.................... // pin, but at the cost of losing the ability to read from
.................... // the LCD.  It also makes the write time a little longer
.................... // because a static delay must be used, instead of polling
.................... // the LCD's busy bit.  Normally a 6-pin interface is only
.................... // used if you are running out of PIC pins, and you need
.................... // to use as few as possible for the LCD.
.................... #define USE_RW_PIN   1
.................... 
.................... 
.................... // These are the line addresses for most 4x20 LCDs.
.................... #define LCD_LINE_1_ADDRESS 0x00
.................... #define LCD_LINE_2_ADDRESS 0x40
.................... #define LCD_LINE_3_ADDRESS 0x14
.................... #define LCD_LINE_4_ADDRESS 0x54
.................... 
.................... // These are the line addresses for LCD's which use
.................... // the Hitachi HD66712U controller chip.
.................... /*
.................... #define LCD_LINE_1_ADDRESS 0x00
.................... #define LCD_LINE_2_ADDRESS 0x20
.................... #define LCD_LINE_3_ADDRESS 0x40
.................... #define LCD_LINE_4_ADDRESS 0x60
.................... */
.................... 
.................... 
.................... //========================================
.................... 
.................... #define lcd_type 2   // 0=5x7, 1=5x10, 2=2 lines(or more)
.................... 
.................... 
.................... int8 lcd_line;
.................... 
.................... int8 const LCD_INIT_STRING[4] =
.................... {
....................  0x20 | (lcd_type << 2),  // Set mode: 4-bit, 2+ lines, 5x8 dots
....................  0xc,                     // Display on
....................  1,                       // Clear display
....................  6                        // Increment cursor
....................  };
.................... 
.................... 
.................... //-------------------------------------
.................... void lcd_send_nibble(int8 nibble)
.................... {
.................... // Note:  !! converts an integer expression
.................... // to a boolean (1 or 0).
....................  output_bit(LCD_DB4, !!(nibble & 1));
*
0330:  BTFSC  55.0
0331:  GOTO   334
0332:  BCF    08.4
0333:  GOTO   335
0334:  BSF    08.4
0335:  BSF    03.5
0336:  BCF    08.4
*
0360:  BTFSC  55.0
0361:  GOTO   364
0362:  BCF    08.4
0363:  GOTO   365
0364:  BSF    08.4
0365:  BSF    03.5
0366:  BCF    08.4
*
03A4:  BTFSC  55.0
03A5:  GOTO   3A8
03A6:  BCF    08.4
03A7:  GOTO   3A9
03A8:  BSF    08.4
03A9:  BSF    03.5
03AA:  BCF    08.4
*
03D6:  BTFSC  55.0
03D7:  GOTO   3DA
03D8:  BCF    08.4
03D9:  GOTO   3DB
03DA:  BSF    08.4
03DB:  BSF    03.5
03DC:  BCF    08.4
....................  output_bit(LCD_DB5, !!(nibble & 2));
*
0337:  BCF    03.5
0338:  BTFSC  55.1
0339:  GOTO   33C
033A:  BCF    08.5
033B:  GOTO   33D
033C:  BSF    08.5
033D:  BSF    03.5
033E:  BCF    08.5
*
0367:  BCF    03.5
0368:  BTFSC  55.1
0369:  GOTO   36C
036A:  BCF    08.5
036B:  GOTO   36D
036C:  BSF    08.5
036D:  BSF    03.5
036E:  BCF    08.5
*
03AB:  BCF    03.5
03AC:  BTFSC  55.1
03AD:  GOTO   3B0
03AE:  BCF    08.5
03AF:  GOTO   3B1
03B0:  BSF    08.5
03B1:  BSF    03.5
03B2:  BCF    08.5
*
03DD:  BCF    03.5
03DE:  BTFSC  55.1
03DF:  GOTO   3E2
03E0:  BCF    08.5
03E1:  GOTO   3E3
03E2:  BSF    08.5
03E3:  BSF    03.5
03E4:  BCF    08.5
....................  output_bit(LCD_DB6, !!(nibble & 4));
*
033F:  BCF    03.5
0340:  BTFSC  55.2
0341:  GOTO   344
0342:  BCF    08.6
0343:  GOTO   345
0344:  BSF    08.6
0345:  BSF    03.5
0346:  BCF    08.6
*
036F:  BCF    03.5
0370:  BTFSC  55.2
0371:  GOTO   374
0372:  BCF    08.6
0373:  GOTO   375
0374:  BSF    08.6
0375:  BSF    03.5
0376:  BCF    08.6
*
03B3:  BCF    03.5
03B4:  BTFSC  55.2
03B5:  GOTO   3B8
03B6:  BCF    08.6
03B7:  GOTO   3B9
03B8:  BSF    08.6
03B9:  BSF    03.5
03BA:  BCF    08.6
*
03E5:  BCF    03.5
03E6:  BTFSC  55.2
03E7:  GOTO   3EA
03E8:  BCF    08.6
03E9:  GOTO   3EB
03EA:  BSF    08.6
03EB:  BSF    03.5
03EC:  BCF    08.6
....................  output_bit(LCD_DB7, !!(nibble & 8));
*
0347:  BCF    03.5
0348:  BTFSC  55.3
0349:  GOTO   34C
034A:  BCF    08.7
034B:  GOTO   34D
034C:  BSF    08.7
034D:  BSF    03.5
034E:  BCF    08.7
*
0377:  BCF    03.5
0378:  BTFSC  55.3
0379:  GOTO   37C
037A:  BCF    08.7
037B:  GOTO   37D
037C:  BSF    08.7
037D:  BSF    03.5
037E:  BCF    08.7
*
03BB:  BCF    03.5
03BC:  BTFSC  55.3
03BD:  GOTO   3C0
03BE:  BCF    08.7
03BF:  GOTO   3C1
03C0:  BSF    08.7
03C1:  BSF    03.5
03C2:  BCF    08.7
*
03ED:  BCF    03.5
03EE:  BTFSC  55.3
03EF:  GOTO   3F2
03F0:  BCF    08.7
03F1:  GOTO   3F3
03F2:  BSF    08.7
03F3:  BSF    03.5
03F4:  BCF    08.7
.................... 
....................  delay_cycles(1);
*
034F:  NOP
*
037F:  NOP
*
03C3:  NOP
*
03F5:  NOP
....................  output_high(LCD_E);
*
0350:  BCF    09.2
0351:  BCF    03.5
0352:  BSF    09.2
*
0380:  BCF    09.2
0381:  BCF    03.5
0382:  BSF    09.2
*
03C4:  BCF    09.2
03C5:  BCF    03.5
03C6:  BSF    09.2
*
03F6:  BCF    09.2
03F7:  BCF    03.5
03F8:  BSF    09.2
....................  delay_us(2);
*
0353:  MOVLW  03
0354:  MOVWF  77
0355:  DECFSZ 77,F
0356:  GOTO   355
*
0383:  MOVLW  03
0384:  MOVWF  77
0385:  DECFSZ 77,F
0386:  GOTO   385
*
03C7:  MOVLW  03
03C8:  MOVWF  77
03C9:  DECFSZ 77,F
03CA:  GOTO   3C9
*
03F9:  MOVLW  03
03FA:  MOVWF  77
03FB:  DECFSZ 77,F
03FC:  GOTO   3FB
....................  output_low(LCD_E);
*
0357:  BSF    03.5
0358:  BCF    09.2
0359:  BCF    03.5
035A:  BCF    09.2
*
0387:  BSF    03.5
0388:  BCF    09.2
0389:  BCF    03.5
038A:  BCF    09.2
*
03CB:  BSF    03.5
03CC:  BCF    09.2
03CD:  BCF    03.5
03CE:  BCF    09.2
*
03FD:  BSF    03.5
03FE:  BCF    09.2
03FF:  BCF    03.5
0400:  BCF    09.2
.................... }
.................... 
.................... //-----------------------------------
.................... // This sub-routine is only called by lcd_read_byte().
.................... // It's not a stand-alone routine.  For example, the
.................... // R/W signal is set high by lcd_read_byte() before
.................... // this routine is called.
.................... 
.................... #ifdef USE_RW_PIN
.................... int8 lcd_read_nibble(void)
.................... {
.................... int8 retval;
.................... // Create bit variables so that we can easily set
.................... // individual bits in the retval variable.
.................... #bit retval_0 = retval.0
.................... #bit retval_1 = retval.1
.................... #bit retval_2 = retval.2
.................... #bit retval_3 = retval.3
.................... 
.................... retval = 0;
*
02B3:  CLRF   56
*
02DE:  CLRF   56
.................... 
.................... output_high(LCD_E);
*
02B4:  BSF    03.5
02B5:  BCF    09.2
02B6:  BCF    03.5
02B7:  BSF    09.2
*
02DF:  BSF    03.5
02E0:  BCF    09.2
02E1:  BCF    03.5
02E2:  BSF    09.2
.................... delay_us(1);
*
02B8:  GOTO   2B9
02B9:  GOTO   2BA
02BA:  NOP
*
02E3:  GOTO   2E4
02E4:  GOTO   2E5
02E5:  NOP
.................... 
.................... retval_0 = input(LCD_DB4);
*
02BB:  BSF    03.5
02BC:  BSF    08.4
02BD:  BCF    03.5
02BE:  BCF    56.0
02BF:  BTFSC  08.4
02C0:  BSF    56.0
*
02E6:  BSF    03.5
02E7:  BSF    08.4
02E8:  BCF    03.5
02E9:  BCF    56.0
02EA:  BTFSC  08.4
02EB:  BSF    56.0
.................... retval_1 = input(LCD_DB5);
*
02C1:  BSF    03.5
02C2:  BSF    08.5
02C3:  BCF    03.5
02C4:  BCF    56.1
02C5:  BTFSC  08.5
02C6:  BSF    56.1
*
02EC:  BSF    03.5
02ED:  BSF    08.5
02EE:  BCF    03.5
02EF:  BCF    56.1
02F0:  BTFSC  08.5
02F1:  BSF    56.1
.................... retval_2 = input(LCD_DB6);
*
02C7:  BSF    03.5
02C8:  BSF    08.6
02C9:  BCF    03.5
02CA:  BCF    56.2
02CB:  BTFSC  08.6
02CC:  BSF    56.2
*
02F2:  BSF    03.5
02F3:  BSF    08.6
02F4:  BCF    03.5
02F5:  BCF    56.2
02F6:  BTFSC  08.6
02F7:  BSF    56.2
.................... retval_3 = input(LCD_DB7);
*
02CD:  BSF    03.5
02CE:  BSF    08.7
02CF:  BCF    03.5
02D0:  BCF    56.3
02D1:  BTFSC  08.7
02D2:  BSF    56.3
*
02F8:  BSF    03.5
02F9:  BSF    08.7
02FA:  BCF    03.5
02FB:  BCF    56.3
02FC:  BTFSC  08.7
02FD:  BSF    56.3
.................... 
.................... output_low(LCD_E);
*
02D3:  BSF    03.5
02D4:  BCF    09.2
02D5:  BCF    03.5
02D6:  BCF    09.2
*
02FE:  BSF    03.5
02FF:  BCF    09.2
0300:  BCF    03.5
0301:  BCF    09.2
.................... delay_us(1);
*
02D7:  GOTO   2D8
02D8:  GOTO   2D9
02D9:  NOP
*
0302:  GOTO   303
0303:  GOTO   304
0304:  NOP
.................... 
.................... return(retval);
*
02DA:  MOVF   56,W
02DB:  MOVWF  78
*
0305:  MOVF   56,W
0306:  MOVWF  78
.................... }
.................... #endif
.................... 
.................... //---------------------------------------
.................... // Read a byte from the LCD and return it.
.................... 
.................... #ifdef USE_RW_PIN
.................... int8 lcd_read_byte(void)
.................... {
.................... int8 low;
.................... int8 high;
.................... 
.................... output_high(LCD_RW);
*
02AE:  BSF    03.5
02AF:  BCF    09.1
02B0:  BCF    03.5
02B1:  BSF    09.1
.................... delay_cycles(1);
02B2:  NOP
.................... 
.................... high = lcd_read_nibble();
*
02DC:  MOVF   78,W
02DD:  MOVWF  55
.................... 
.................... low = lcd_read_nibble();
*
0307:  MOVF   78,W
0308:  MOVWF  54
.................... 
.................... return( (high<<4) | low);
0309:  SWAPF  55,W
030A:  MOVWF  77
030B:  MOVLW  F0
030C:  ANDWF  77,F
030D:  MOVF   77,W
030E:  IORWF  54,W
030F:  MOVWF  78
.................... }
.................... #endif
.................... 
.................... //----------------------------------------
.................... // Send a byte to the LCD.
.................... void lcd_send_byte(int8 address, int8 n)
.................... {
.................... output_low(LCD_RS);
*
02AA:  BSF    03.5
02AB:  BCF    09.0
02AC:  BCF    03.5
02AD:  BCF    09.0
.................... 
.................... #ifdef USE_RW_PIN
.................... while(bit_test(lcd_read_byte(),7)) ;
*
0310:  MOVF   78,W
0311:  MOVWF  54
0312:  BTFSC  54.7
0313:  GOTO   2AE
.................... #else
.................... delay_us(60);
.................... #endif
.................... 
.................... if(address)
0314:  MOVF   52,F
0315:  BTFSC  03.2
0316:  GOTO   31C
....................    output_high(LCD_RS);
0317:  BSF    03.5
0318:  BCF    09.0
0319:  BCF    03.5
031A:  BSF    09.0
031B:  GOTO   320
.................... else
....................    output_low(LCD_RS);
031C:  BSF    03.5
031D:  BCF    09.0
031E:  BCF    03.5
031F:  BCF    09.0
.................... 
....................  delay_cycles(1);
0320:  NOP
.................... 
.................... #ifdef USE_RW_PIN
.................... output_low(LCD_RW);
0321:  BSF    03.5
0322:  BCF    09.1
0323:  BCF    03.5
0324:  BCF    09.1
.................... delay_cycles(1);
0325:  NOP
.................... #endif
.................... 
.................... output_low(LCD_E);
0326:  BSF    03.5
0327:  BCF    09.2
0328:  BCF    03.5
0329:  BCF    09.2
.................... 
.................... lcd_send_nibble(n >> 4);
032A:  SWAPF  53,W
032B:  MOVWF  54
032C:  MOVLW  0F
032D:  ANDWF  54,F
032E:  MOVF   54,W
032F:  MOVWF  55
.................... lcd_send_nibble(n & 0xf);
*
035B:  MOVF   53,W
035C:  ANDLW  0F
035D:  MOVWF  54
035E:  MOVF   54,W
035F:  MOVWF  55
*
038B:  RETURN
.................... }
.................... //----------------------------
.................... 
.................... void lcd_init(void)
.................... {
.................... int8 i;
.................... 
.................... lcd_line = 1;
038C:  MOVLW  01
038D:  MOVWF  2D
.................... 
.................... output_low(LCD_RS);
038E:  BSF    03.5
038F:  BCF    09.0
0390:  BCF    03.5
0391:  BCF    09.0
.................... 
.................... #ifdef USE_RW_PIN
.................... output_low(LCD_RW);
0392:  BSF    03.5
0393:  BCF    09.1
0394:  BCF    03.5
0395:  BCF    09.1
.................... #endif
.................... 
.................... output_low(LCD_E);
0396:  BSF    03.5
0397:  BCF    09.2
0398:  BCF    03.5
0399:  BCF    09.2
.................... 
.................... // Some LCDs require 15 ms minimum delay after
.................... // power-up.  Others require 30 ms.  I'm going
.................... // to set it to 35 ms, so it should work with
.................... // all of them.
.................... delay_ms(35);
039A:  MOVLW  23
039B:  MOVWF  4E
039C:  CALL   296
.................... 
.................... for(i=0 ;i < 3; i++)
039D:  CLRF   47
039E:  MOVF   47,W
039F:  SUBLW  02
03A0:  BTFSS  03.0
03A1:  GOTO   3D4
....................    {
....................     lcd_send_nibble(0x03);
03A2:  MOVLW  03
03A3:  MOVWF  55
....................     delay_ms(5);
*
03CF:  MOVLW  05
03D0:  MOVWF  4E
03D1:  CALL   296
03D2:  INCF   47,F
03D3:  GOTO   39E
....................    }
.................... 
.................... lcd_send_nibble(0x02);
03D4:  MOVLW  02
03D5:  MOVWF  55
.................... 
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++)
*
0401:  CLRF   47
0402:  MOVF   47,W
0403:  SUBLW  03
0404:  BTFSS  03.0
0405:  GOTO   40F
....................    {
....................     lcd_send_byte(0, LCD_INIT_STRING[i]);
0406:  MOVF   47,W
0407:  CALL   051
0408:  MOVWF  48
0409:  CLRF   52
040A:  MOVF   48,W
040B:  MOVWF  53
040C:  CALL   2AA
.................... 
....................     // If the R/W signal is not used, then
....................     // the busy bit can't be polled.  One of
....................     // the init commands takes longer than
....................     // the hard-coded delay of 50 us, so in
....................     // that case, lets just do a 5 ms delay
....................     // after all four of them.
....................     #ifndef USE_RW_PIN
040D:  INCF   47,F
040E:  GOTO   402
....................     delay_ms(5);
....................     #endif
....................    }
040F:  BSF    0A.3
0410:  BCF    0A.4
0411:  GOTO   387 (RETURN)
.................... 
.................... }
.................... 
.................... //----------------------------
.................... 
.................... void lcd_gotoxy(int8 x, int8 y)
.................... {
.................... int8 address;
.................... 
.................... 
.................... switch(y)
0412:  MOVF   4F,W
0413:  XORLW  01
0414:  BTFSC  03.2
0415:  GOTO   420
0416:  XORLW  03
0417:  BTFSC  03.2
0418:  GOTO   422
0419:  XORLW  01
041A:  BTFSC  03.2
041B:  GOTO   425
041C:  XORLW  07
041D:  BTFSC  03.2
041E:  GOTO   428
041F:  GOTO   42B
....................   {
....................    case 1:
....................      address = LCD_LINE_1_ADDRESS;
0420:  CLRF   50
....................      break;
0421:  GOTO   42C
.................... 
....................    case 2:
....................      address = LCD_LINE_2_ADDRESS;
0422:  MOVLW  40
0423:  MOVWF  50
....................      break;
0424:  GOTO   42C
.................... 
....................    case 3:
....................      address = LCD_LINE_3_ADDRESS;
0425:  MOVLW  14
0426:  MOVWF  50
....................      break;
0427:  GOTO   42C
.................... 
....................    case 4:
....................      address = LCD_LINE_4_ADDRESS;
0428:  MOVLW  54
0429:  MOVWF  50
....................      break;
042A:  GOTO   42C
.................... 
....................    default:
....................      address = LCD_LINE_1_ADDRESS;
042B:  CLRF   50
....................      break;
.................... 
....................   }
.................... 
.................... address += x-1;
042C:  MOVLW  01
042D:  SUBWF  4E,W
042E:  ADDWF  50,F
.................... lcd_send_byte(0, 0x80 | address);
042F:  MOVF   50,W
0430:  IORLW  80
0431:  MOVWF  51
0432:  CLRF   52
0433:  MOVF   51,W
0434:  MOVWF  53
0435:  CALL   2AA
0436:  RETURN
.................... }
.................... 
.................... //-----------------------------
.................... void lcd_putc(char c)
.................... {
....................  switch(c)
0437:  MOVF   4D,W
0438:  XORLW  0C
0439:  BTFSC  03.2
043A:  GOTO   442
043B:  XORLW  06
043C:  BTFSC  03.2
043D:  GOTO   44C
043E:  XORLW  02
043F:  BTFSC  03.2
0440:  GOTO   453
0441:  GOTO   458
....................    {
....................     case '\f':
....................       lcd_send_byte(0,1);
0442:  CLRF   52
0443:  MOVLW  01
0444:  MOVWF  53
0445:  CALL   2AA
....................       lcd_line = 1;
0446:  MOVLW  01
0447:  MOVWF  2D
....................       delay_ms(2);
0448:  MOVLW  02
0449:  MOVWF  4E
044A:  CALL   296
....................       break;
044B:  GOTO   45D
.................... 
....................     case '\n':
....................        lcd_gotoxy(1, ++lcd_line);
044C:  INCF   2D,F
044D:  MOVLW  01
044E:  MOVWF  4E
044F:  MOVF   2D,W
0450:  MOVWF  4F
0451:  CALL   412
....................        break;
0452:  GOTO   45D
.................... 
....................     case '\b':
....................        lcd_send_byte(0,0x10);
0453:  CLRF   52
0454:  MOVLW  10
0455:  MOVWF  53
0456:  CALL   2AA
....................        break;
0457:  GOTO   45D
.................... 
....................     default:
....................        lcd_send_byte(1,c);
0458:  MOVLW  01
0459:  MOVWF  52
045A:  MOVF   4D,W
045B:  MOVWF  53
045C:  CALL   2AA
....................        break;
....................    }
045D:  RETURN
.................... }
.................... 
.................... //------------------------------
.................... void lcd_prints(char* str) {
....................    printf(lcd_putc, str);
.................... }
.................... 
.................... //------------------------------
.................... void lcd_prints_delay(char* str, int16 ms) {
....................    for (char* sc = str; *sc != 0; sc++) {
....................       lcd_putc(*sc);
....................       delay_ms(ms);
....................    }
.................... }
.................... 
.................... //------------------------------
.................... void lcd_print_center(char* str, int8 y) {
....................    char *sc;
....................    for (sc = str; *sc != 0; sc++);
....................    int8 length = sc - str;
....................    lcd_gotoxy((MAX_X - length) / 2, y);
....................    printf(lcd_putc, str);
.................... }
.................... 
.................... //------------------------------
.................... #ifdef USE_RW_PIN
.................... char lcd_getc(int8 x, int8 y)
.................... {
.................... char value;
.................... 
.................... lcd_gotoxy(x,y);
.................... 
.................... // Wait until busy flag is low.
.................... while(bit_test(lcd_read_byte(),7));
.................... 
.................... output_high(LCD_RS);
.................... value = lcd_read_byte();
.................... output_low(LCD_RS);
.................... 
.................... return(value);
.................... }
.................... #endif
.................... 
.................... 
.................... 
.................... #include "ds1307.c"
.................... BYTE bin2bcd(BYTE binary_value);
.................... BYTE bcd2bin(BYTE bcd_value);
.................... 
.................... void ds1307_init(void) 
*
04A4:  CLRF   47
04A5:  CLRF   48
04A6:  CLRF   49
04A7:  CLRF   4A
04A8:  CLRF   4B
04A9:  CLRF   4C
04AA:  CLRF   4D
.................... { 
....................    BYTE initsec = 0;
....................    BYTE initmin=0;
....................    BYTE inithr=0;                  
....................    BYTE initdow=0;
....................    BYTE initday=0;                   
....................    BYTE initmth=0;
....................    BYTE inityear=0;
....................    i2c_start(); 
04AB:  BSF    03.5
04AC:  BSF    11.0
04AD:  BTFSC  11.0
04AE:  GOTO   4AD
....................    i2c_write(0xD0);      // WR to RTC 
04AF:  MOVLW  D0
04B0:  BCF    03.5
04B1:  MOVWF  4F
04B2:  CALL   45E
....................    i2c_write(0x00);      // REG 0 
04B3:  CLRF   4F
04B4:  CALL   45E
....................    i2c_start(); 
04B5:  BSF    03.5
04B6:  BSF    11.1
04B7:  BTFSC  11.1
04B8:  GOTO   4B7
....................    i2c_write(0xD1);      // RD from RTC 
04B9:  MOVLW  D1
04BA:  BCF    03.5
04BB:  MOVWF  4F
04BC:  CALL   45E
....................    initsec  = bcd2bin(i2c_read() & 0x7f); 
04BD:  MOVLW  01
04BE:  MOVWF  77
04BF:  CALL   46E
04C0:  MOVF   78,W
04C1:  ANDLW  7F
04C2:  MOVWF  4E
04C3:  MOVWF  4F
04C4:  CALL   47E
04C5:  MOVF   78,W
04C6:  MOVWF  47
....................    initmin  = bcd2bin(i2c_read() & 0x7f); 
04C7:  MOVLW  01
04C8:  MOVWF  77
04C9:  CALL   46E
04CA:  MOVF   78,W
04CB:  ANDLW  7F
04CC:  MOVWF  4E
04CD:  MOVWF  4F
04CE:  CALL   47E
04CF:  MOVF   78,W
04D0:  MOVWF  48
....................    inithr   = bcd2bin(i2c_read() & 0x3f); 
04D1:  MOVLW  01
04D2:  MOVWF  77
04D3:  CALL   46E
04D4:  MOVF   78,W
04D5:  ANDLW  3F
04D6:  MOVWF  4E
04D7:  MOVWF  4F
04D8:  CALL   47E
04D9:  MOVF   78,W
04DA:  MOVWF  49
....................    initdow  = bcd2bin(i2c_read() & 0x7f);   // REG 3 
04DB:  MOVLW  01
04DC:  MOVWF  77
04DD:  CALL   46E
04DE:  MOVF   78,W
04DF:  ANDLW  7F
04E0:  MOVWF  4E
04E1:  MOVWF  4F
04E2:  CALL   47E
04E3:  MOVF   78,W
04E4:  MOVWF  4A
....................    initday  = bcd2bin(i2c_read() & 0x3f);   // REG 4 
04E5:  MOVLW  01
04E6:  MOVWF  77
04E7:  CALL   46E
04E8:  MOVF   78,W
04E9:  ANDLW  3F
04EA:  MOVWF  4E
04EB:  MOVWF  4F
04EC:  CALL   47E
04ED:  MOVF   78,W
04EE:  MOVWF  4B
....................    initmth  = bcd2bin(i2c_read() & 0x1f);   // REG 5 
04EF:  MOVLW  01
04F0:  MOVWF  77
04F1:  CALL   46E
04F2:  MOVF   78,W
04F3:  ANDLW  1F
04F4:  MOVWF  4E
04F5:  MOVWF  4F
04F6:  CALL   47E
04F7:  MOVF   78,W
04F8:  MOVWF  4C
....................    inityear = bcd2bin(i2c_read(0));         // REG 6 
04F9:  CLRF   77
04FA:  CALL   46E
04FB:  MOVF   78,W
04FC:  MOVWF  4E
04FD:  MOVWF  4F
04FE:  CALL   47E
04FF:  MOVF   78,W
0500:  MOVWF  4D
....................    i2c_stop(); 
0501:  BSF    03.5
0502:  BSF    11.2
0503:  BTFSC  11.2
0504:  GOTO   503
....................    delay_us(3);
0505:  MOVLW  04
0506:  MOVWF  77
0507:  DECFSZ 77,F
0508:  GOTO   507
0509:  GOTO   50A
....................    
....................    i2c_start(); 
050A:  BSF    11.0
050B:  BTFSC  11.0
050C:  GOTO   50B
....................    i2c_write(0xD0);      // WR to RTC 
050D:  MOVLW  D0
050E:  BCF    03.5
050F:  MOVWF  4F
0510:  CALL   45E
....................    i2c_write(0x00);      // REG 0 
0511:  CLRF   4F
0512:  CALL   45E
....................    i2c_write(bin2bcd(initsec));      // Start oscillator with current "seconds value 
0513:  MOVF   47,W
0514:  MOVWF  4E
0515:  CALL   491
0516:  MOVF   78,W
0517:  MOVWF  4E
0518:  MOVWF  4F
0519:  CALL   45E
....................    i2c_write(bin2bcd(initmin));      // REG 1 
051A:  MOVF   48,W
051B:  MOVWF  4E
051C:  CALL   491
051D:  MOVF   78,W
051E:  MOVWF  4E
051F:  MOVWF  4F
0520:  CALL   45E
....................    i2c_write(bin2bcd(inithr));       // REG 2 
0521:  MOVF   49,W
0522:  MOVWF  4E
0523:  CALL   491
0524:  MOVF   78,W
0525:  MOVWF  4E
0526:  MOVWF  4F
0527:  CALL   45E
....................    i2c_write(bin2bcd(initdow));      // REG 3 
0528:  MOVF   4A,W
0529:  MOVWF  4E
052A:  CALL   491
052B:  MOVF   78,W
052C:  MOVWF  4E
052D:  MOVWF  4F
052E:  CALL   45E
....................    i2c_write(bin2bcd(initday));      // REG 4 
052F:  MOVF   4B,W
0530:  MOVWF  4E
0531:  CALL   491
0532:  MOVF   78,W
0533:  MOVWF  4E
0534:  MOVWF  4F
0535:  CALL   45E
....................    i2c_write(bin2bcd(initmth));      // REG 5 
0536:  MOVF   4C,W
0537:  MOVWF  4E
0538:  CALL   491
0539:  MOVF   78,W
053A:  MOVWF  4E
053B:  MOVWF  4F
053C:  CALL   45E
....................    i2c_write(bin2bcd(inityear));     // REG 6 
053D:  MOVF   4D,W
053E:  MOVWF  4E
053F:  CALL   491
0540:  MOVF   78,W
0541:  MOVWF  4E
0542:  MOVWF  4F
0543:  CALL   45E
....................    i2c_start(); 
0544:  BSF    03.5
0545:  BSF    11.1
0546:  BTFSC  11.1
0547:  GOTO   546
....................    i2c_write(0xD0);      // WR to RTC 
0548:  MOVLW  D0
0549:  BCF    03.5
054A:  MOVWF  4F
054B:  CALL   45E
....................    i2c_write(0x07);      // Control Register 
054C:  MOVLW  07
054D:  MOVWF  4F
054E:  CALL   45E
....................    i2c_stop(); 
054F:  BSF    03.5
0550:  BSF    11.2
0551:  BTFSC  11.2
0552:  GOTO   551
0553:  BCF    03.5
0554:  BSF    0A.3
0555:  BCF    0A.4
0556:  GOTO   38F (RETURN)
.................... 
.................... } 
.................... 
.................... void ds1307_set_date_time(BYTE day, BYTE mth, BYTE year, BYTE dow, BYTE hr, BYTE min, BYTE sec)
.................... {
....................    sec &= 0x7F;
....................    hr &= 0x3F;
....................    
....................    i2c_start();
....................    i2c_write(0xD0);              // I2C write address
....................    i2c_write(0x00);              // Start at REG 0 - Seconds
....................    i2c_write(bin2bcd(sec));      // REG 0
....................    i2c_write(bin2bcd(min));      // REG 1
....................    i2c_write(bin2bcd(hr));       // REG 2
....................    i2c_write(bin2bcd(dow));      // REG 3
....................    i2c_write(bin2bcd(day));      // REG 4
....................    i2c_write(bin2bcd(mth));      // REG 5
....................    i2c_write(bin2bcd(year));     // REG 6
....................    i2c_stop();
.................... }
.................... 
.................... void ds1307_set_date(BYTE day, BYTE mth, BYTE year, BYTE dow) {
....................    i2c_start();
....................    i2c_write(0xD0);              // I2C write address
....................    i2c_write(0x03);              // Start at REG 3 - Seconds
....................    i2c_write(bin2bcd(dow));      // REG 3
....................    i2c_write(bin2bcd(day));      // REG 4
....................    i2c_write(bin2bcd(mth));      // REG 5
....................    i2c_write(bin2bcd(year));     // REG 6
....................    i2c_stop();
.................... }
.................... 
.................... void ds1307_set_time(BYTE hr, BYTE min, BYTE sec) {
....................    sec &= 0x7F;
*
05E1:  BCF    49.7
....................    hr &= 0x3F;
05E2:  MOVLW  3F
05E3:  ANDWF  47,F
.................... 
....................    i2c_start();
05E4:  BSF    03.5
05E5:  BSF    11.0
05E6:  BTFSC  11.0
05E7:  GOTO   5E6
....................    i2c_write(0xD0);              // I2C write address
05E8:  MOVLW  D0
05E9:  BCF    03.5
05EA:  MOVWF  4F
05EB:  CALL   45E
....................    i2c_write(0x00);              // Start at REG 0 - Seconds
05EC:  CLRF   4F
05ED:  CALL   45E
....................    i2c_write(bin2bcd(sec));      // REG 0
05EE:  MOVF   49,W
05EF:  MOVWF  4E
05F0:  CALL   491
05F1:  MOVF   78,W
05F2:  MOVWF  4A
05F3:  MOVWF  4F
05F4:  CALL   45E
....................    i2c_write(bin2bcd(min));      // REG 1
05F5:  MOVF   48,W
05F6:  MOVWF  4E
05F7:  CALL   491
05F8:  MOVF   78,W
05F9:  MOVWF  4A
05FA:  MOVWF  4F
05FB:  CALL   45E
....................    i2c_write(bin2bcd(hr));       // REG 2
05FC:  MOVF   47,W
05FD:  MOVWF  4E
05FE:  CALL   491
05FF:  MOVF   78,W
0600:  MOVWF  4A
0601:  MOVWF  4F
0602:  CALL   45E
....................    i2c_write(0x90);              // REG 7 - 1Hz squarewave output pin
0603:  MOVLW  90
0604:  MOVWF  4F
0605:  CALL   45E
....................    i2c_stop();
0606:  BSF    03.5
0607:  BSF    11.2
0608:  BTFSC  11.2
0609:  GOTO   608
060A:  BCF    03.5
060B:  BSF    0A.3
060C:  BCF    0A.4
060D:  GOTO   419 (RETURN)
.................... }
.................... 
.................... void ds1307_get_date(BYTE &day, BYTE &mth, BYTE &year, BYTE &dow)
.................... {
....................    i2c_start();
....................    i2c_write(0xD0);
....................    i2c_write(0x03);              // Start at REG 3 - Day of week
....................    i2c_start();
....................    i2c_write(0xD1);
....................    dow  = bcd2bin(i2c_read() & 0x7f);   // REG 3
....................    day  = bcd2bin(i2c_read() & 0x3f);   // REG 4
....................    mth  = bcd2bin(i2c_read() & 0x1f);   // REG 5
....................    year = bcd2bin(i2c_read(0));         // REG 6
....................    i2c_stop();
.................... }
.................... 
.................... void ds1307_get_time(BYTE &hr, BYTE &min, BYTE &sec)
.................... {
....................    i2c_start();
*
0B90:  BSF    03.5
0B91:  BSF    11.0
0B92:  BTFSC  11.0
0B93:  GOTO   392
*
0C63:  BSF    03.5
0C64:  BSF    11.0
0C65:  BTFSC  11.0
0C66:  GOTO   465
....................    i2c_write(0xD0);
*
0B94:  MOVLW  D0
0B95:  BCF    03.5
0B96:  MOVWF  4F
0B97:  BCF    0A.3
0B98:  CALL   45E
0B99:  BSF    0A.3
*
0C67:  MOVLW  D0
0C68:  BCF    03.5
0C69:  MOVWF  4F
0C6A:  BCF    0A.3
0C6B:  CALL   45E
0C6C:  BSF    0A.3
....................    i2c_write(0x00);                     // Start at REG 0 - Seconds
*
0B9A:  CLRF   4F
0B9B:  BCF    0A.3
0B9C:  CALL   45E
0B9D:  BSF    0A.3
*
0C6D:  CLRF   4F
0C6E:  BCF    0A.3
0C6F:  CALL   45E
0C70:  BSF    0A.3
....................    i2c_start();
*
0B9E:  BSF    03.5
0B9F:  BSF    11.1
0BA0:  BTFSC  11.1
0BA1:  GOTO   3A0
*
0C71:  BSF    03.5
0C72:  BSF    11.1
0C73:  BTFSC  11.1
0C74:  GOTO   473
....................    i2c_write(0xD1);
*
0BA2:  MOVLW  D1
0BA3:  BCF    03.5
0BA4:  MOVWF  4F
0BA5:  BCF    0A.3
0BA6:  CALL   45E
0BA7:  BSF    0A.3
*
0C75:  MOVLW  D1
0C76:  BCF    03.5
0C77:  MOVWF  4F
0C78:  BCF    0A.3
0C79:  CALL   45E
0C7A:  BSF    0A.3
....................    sec = bcd2bin(i2c_read() & 0x7f);
*
0BA8:  MOVLW  01
0BA9:  MOVWF  77
0BAA:  BCF    0A.3
0BAB:  CALL   46E
0BAC:  BSF    0A.3
0BAD:  MOVF   78,W
0BAE:  ANDLW  7F
0BAF:  MOVWF  47
0BB0:  MOVWF  4F
0BB1:  BCF    0A.3
0BB2:  CALL   47E
0BB3:  BSF    0A.3
0BB4:  MOVF   78,W
0BB5:  MOVWF  38
*
0C7B:  MOVLW  01
0C7C:  MOVWF  77
0C7D:  BCF    0A.3
0C7E:  CALL   46E
0C7F:  BSF    0A.3
0C80:  MOVF   78,W
0C81:  ANDLW  7F
0C82:  MOVWF  47
0C83:  MOVWF  4F
0C84:  BCF    0A.3
0C85:  CALL   47E
0C86:  BSF    0A.3
0C87:  MOVF   78,W
0C88:  MOVWF  38
....................    min = bcd2bin(i2c_read() & 0x7f);
*
0BB6:  MOVLW  01
0BB7:  MOVWF  77
0BB8:  BCF    0A.3
0BB9:  CALL   46E
0BBA:  BSF    0A.3
0BBB:  MOVF   78,W
0BBC:  ANDLW  7F
0BBD:  MOVWF  47
0BBE:  MOVWF  4F
0BBF:  BCF    0A.3
0BC0:  CALL   47E
0BC1:  BSF    0A.3
0BC2:  MOVF   78,W
0BC3:  MOVWF  37
*
0C89:  MOVLW  01
0C8A:  MOVWF  77
0C8B:  BCF    0A.3
0C8C:  CALL   46E
0C8D:  BSF    0A.3
0C8E:  MOVF   78,W
0C8F:  ANDLW  7F
0C90:  MOVWF  47
0C91:  MOVWF  4F
0C92:  BCF    0A.3
0C93:  CALL   47E
0C94:  BSF    0A.3
0C95:  MOVF   78,W
0C96:  MOVWF  37
....................    hr  = bcd2bin(i2c_read(0) & 0x3f);
*
0BC4:  CLRF   77
0BC5:  BCF    0A.3
0BC6:  CALL   46E
0BC7:  BSF    0A.3
0BC8:  MOVF   78,W
0BC9:  ANDLW  3F
0BCA:  MOVWF  47
0BCB:  MOVWF  4F
0BCC:  BCF    0A.3
0BCD:  CALL   47E
0BCE:  BSF    0A.3
0BCF:  MOVF   78,W
0BD0:  MOVWF  36
*
0C97:  CLRF   77
0C98:  BCF    0A.3
0C99:  CALL   46E
0C9A:  BSF    0A.3
0C9B:  MOVF   78,W
0C9C:  ANDLW  3F
0C9D:  MOVWF  47
0C9E:  MOVWF  4F
0C9F:  BCF    0A.3
0CA0:  CALL   47E
0CA1:  BSF    0A.3
0CA2:  MOVF   78,W
0CA3:  MOVWF  36
....................    i2c_stop();
*
0BD1:  BSF    03.5
0BD2:  BSF    11.2
0BD3:  BTFSC  11.2
0BD4:  GOTO   3D3
*
0CA4:  BSF    03.5
0CA5:  BSF    11.2
0CA6:  BTFSC  11.2
0CA7:  GOTO   4A6
.................... 
.................... }
.................... 
.................... void ds1307_write_data(BYTE address, BYTE data) {
....................   i2c_start();
....................   i2c_write(0xD0);          
....................   i2c_write(address);              
....................   i2c_write(data);
....................   i2c_stop();
.................... }
.................... 
.................... void ds1307_read_data(BYTE address, BYTE &data) {
....................   i2c_start();
....................   i2c_write(0xD0);
....................   i2c_write(address);
....................   i2c_start();
....................   i2c_write(0xD1);
....................   data = i2c_read();
....................   i2c_stop();
.................... }
.................... 
.................... BYTE bin2bcd(BYTE binary_value)
.................... {
....................   BYTE temp;
....................   BYTE retval;
.................... 
....................   temp = binary_value;
*
0491:  MOVF   4E,W
0492:  MOVWF  4F
....................   retval = 0;
0493:  CLRF   50
.................... 
....................   while(TRUE)
....................   {
....................     // Get the tens digit by doing multiple subtraction
....................     // of 10 from the binary value.
....................     if(temp >= 10)
0494:  MOVF   4F,W
0495:  SUBLW  09
0496:  BTFSC  03.0
0497:  GOTO   49D
....................     {
....................       temp -= 10;
0498:  MOVLW  0A
0499:  SUBWF  4F,F
....................       retval += 0x10;
049A:  MOVLW  10
049B:  ADDWF  50,F
....................     }
049C:  GOTO   4A0
....................     else // Get the ones digit by adding the remainder.
....................     {
....................       retval += temp;
049D:  MOVF   4F,W
049E:  ADDWF  50,F
....................       break;
049F:  GOTO   4A1
....................     }
04A0:  GOTO   494
....................   }
.................... 
....................   return(retval);
04A1:  MOVF   50,W
04A2:  MOVWF  78
04A3:  RETURN
.................... }
.................... 
.................... 
.................... // Input range - 00 to 99.
.................... BYTE bcd2bin(BYTE bcd_value)
.................... {
....................   BYTE temp;
.................... 
....................   temp = bcd_value;
*
047E:  MOVF   4F,W
047F:  MOVWF  50
....................   // Shifting upper digit right by 1 is same as multiplying by 8.
....................   temp >>= 1;
0480:  BCF    03.0
0481:  RRF    50,F
....................   // Isolate the bits for the upper digit.
....................   temp &= 0x78;
0482:  MOVLW  78
0483:  ANDWF  50,F
.................... 
....................   // Now return: (Tens * 8) + (Tens * 2) + Ones
.................... 
....................   return(temp + (temp >> 2) + (bcd_value & 0x0f));
0484:  RRF    50,W
0485:  MOVWF  77
0486:  RRF    77,F
0487:  MOVLW  3F
0488:  ANDWF  77,F
0489:  MOVF   77,W
048A:  ADDWF  50,W
048B:  MOVWF  51
048C:  MOVF   4F,W
048D:  ANDLW  0F
048E:  ADDWF  51,W
048F:  MOVWF  78
0490:  RETURN
.................... } 
.................... 
.................... 
.................... 
.................... volatile mode_enum mode = manual;
.................... mode_enum previous_mode = manual;
.................... volatile set_time_type_enum set_time_type = set_night_mode_time;
.................... volatile set_time_stage_enum set_time_stage = choose_type_st;
.................... set_time_stage_enum set_time_previous_stage = choose_type_st;
.................... volatile set_nm_time_stage_enum set_nm_time_stage = set_start_hour;
.................... volatile set_current_time_stage_enum set_current_time_stage = set_hour;
.................... set_current_time_stage_enum set_current_time_previous_stage = set_hour;
.................... volatile time current_time;
.................... volatile timer night_timer;
.................... BOOLEAN IR1_flag = 0;
.................... BOOLEAN IR2_flag = 0;
.................... uint8_t person = 1;
.................... volatile uint8_t led_in_count = 0;
.................... volatile uint8_t led_out_count = 0;
.................... volatile uint8_t MENU_count = 0;
.................... volatile uint8_t ENTER_count = 0;
.................... volatile uint8_t UP_count = 0;
.................... volatile uint8_t DOWN_count = 0;
.................... volatile uint8_t LIGHT_count = 0;
.................... volatile BOOLEAN PIR_state = 1;
.................... volatile uint8_t PIR_count = 0;
.................... 
.................... #INT_TIMER1
.................... void timer1_isr(void) {  
....................    // Reset timer 1
....................    clear_interrupt(INT_TIMER1);
*
0116:  BCF    0C.0
....................    set_timer1(TIMER1_PREVALUE);
0117:  CLRF   0E
0118:  MOVLW  CF
0119:  MOVWF  0F
011A:  MOVLW  2C
011B:  MOVWF  0E
011C:  NOP
....................    // just for testing
....................    output_toggle(PIN_A0);
011D:  BSF    03.5
011E:  BCF    05.0
011F:  MOVLW  01
0120:  BCF    03.5
0121:  XORWF  05,F
....................    // Change mode (MENU is pushed)
....................    if (!MENU) {
0122:  BTFSC  06.4
0123:  GOTO   135
....................       MENU_count++;
0124:  INCF   41,F
....................       if (MENU_count == 2) {
0125:  MOVF   41,W
0126:  SUBLW  02
0127:  BTFSS  03.2
0128:  GOTO   134
....................          mode++;
0129:  INCF   30,F
....................          if (mode > 3) mode = 0;
012A:  MOVF   30,W
012B:  SUBLW  03
012C:  BTFSS  03.0
012D:  CLRF   30
....................          if (mode == set_time) {
012E:  DECFSZ 30,W
012F:  GOTO   134
....................             set_time_type = set_night_mode_time;
0130:  BCF    32.0
....................             set_time_stage = choose_type_st;
0131:  BCF    32.1
....................             set_nm_time_stage = set_start_hour;
0132:  CLRF   33
....................             set_current_time_stage = set_hour;
0133:  CLRF   34
....................          };
....................       }
....................    }
0134:  GOTO   136
....................    else {
....................        MENU_count = 0;
0135:  CLRF   41
....................    }
....................    
....................    // Manual mode (LIGHT is pushed)
....................    if (mode == manual) {
0136:  MOVF   30,F
0137:  BTFSS  03.2
0138:  GOTO   149
....................        if (!LIGHT)  {
0139:  BTFSC  06.0
013A:  GOTO   148
....................            LIGHT_count++;
013B:  INCF   45,F
....................            if (LIGHT_count == 2) {
013C:  MOVF   45,W
013D:  SUBLW  02
013E:  BTFSS  03.2
013F:  GOTO   147
....................                output_toggle(LIGHT_PIN);
0140:  BCF    2C.0
0141:  MOVF   2C,W
0142:  BSF    03.5
0143:  MOVWF  07
0144:  MOVLW  01
0145:  BCF    03.5
0146:  XORWF  07,F
....................            }
....................        }
0147:  GOTO   149
....................        
....................        else {
....................            LIGHT_count = 0;
0148:  CLRF   45
....................        }
....................    }
....................    
....................    // Set time mode
....................    if (mode == set_time) {
0149:  DECFSZ 30,W
014A:  GOTO   19E
....................        // UP is pushed
....................        if (!UP) {
014B:  BTFSC  06.5
014C:  GOTO   163
....................            UP_count++;
014D:  INCF   43,F
....................            if (UP_count == 2) {
014E:  MOVF   43,W
014F:  SUBLW  02
0150:  BTFSS  03.2
0151:  GOTO   154
....................                up_handler();
0152:  CALL   059
....................            }
0153:  GOTO   162
....................            else if (UP_count > 14 && UP_count % 3 == 0) {
0154:  MOVF   43,W
0155:  SUBLW  0E
0156:  BTFSC  03.0
0157:  GOTO   162
0158:  MOVF   43,W
0159:  MOVWF  57
015A:  MOVLW  03
015B:  MOVWF  58
015C:  CALL   0B4
015D:  MOVF   77,F
015E:  BTFSS  03.2
015F:  GOTO   162
....................                up_handler();
0160:  CALL   059
....................                DOWN_count--;
0161:  DECF   44,F
....................            }
....................        }
0162:  GOTO   164
....................        else {
....................            UP_count = 0;
0163:  CLRF   43
....................        }
....................        // DOWN is pushed
....................        if (!DOWN) {
0164:  BTFSC  06.6
0165:  GOTO   17C
....................            DOWN_count++;
0166:  INCF   44,F
....................            if (DOWN_count == 2) {
0167:  MOVF   44,W
0168:  SUBLW  02
0169:  BTFSS  03.2
016A:  GOTO   16D
....................                down_handler();
016B:  CALL   0C9
....................            }
016C:  GOTO   17B
....................            else if (DOWN_count > 14 && DOWN_count % 3 == 0) {
016D:  MOVF   44,W
016E:  SUBLW  0E
016F:  BTFSC  03.0
0170:  GOTO   17B
0171:  MOVF   44,W
0172:  MOVWF  57
0173:  MOVLW  03
0174:  MOVWF  58
0175:  CALL   0B4
0176:  MOVF   77,F
0177:  BTFSS  03.2
0178:  GOTO   17B
....................                down_handler();
0179:  CALL   0C9
....................                DOWN_count--;
017A:  DECF   44,F
....................            }
....................        }
017B:  GOTO   17D
....................        else {
....................            DOWN_count = 0;
017C:  CLRF   44
....................        }
....................        // ENTER is pushed
....................        if (!ENTER)  {
017D:  BTFSC  06.7
017E:  GOTO   19C
....................            ENTER_count++;
017F:  INCF   42,F
....................            if (ENTER_count == 2) {
0180:  MOVF   42,W
0181:  SUBLW  02
0182:  BTFSS  03.2
0183:  GOTO   19B
....................                enter_handler();
....................            }
....................        }
*
019B:  GOTO   19E
....................        else if (ENTER) {
019C:  BTFSC  06.7
....................            ENTER_count = 0;
019D:  CLRF   42
....................        }
....................    }
....................    
....................    // LED in-out
....................    if (!LED_IN) {
019E:  BTFSC  07.1
019F:  GOTO   1AC
....................        led_in_count++;
01A0:  INCF   3F,F
....................        if (led_in_count > 20) {
01A1:  MOVF   3F,W
01A2:  SUBLW  14
01A3:  BTFSC  03.0
01A4:  GOTO   1AC
....................            output_high(LED_IN_PIN);
01A5:  BCF    2C.1
01A6:  MOVF   2C,W
01A7:  BSF    03.5
01A8:  MOVWF  07
01A9:  BCF    03.5
01AA:  BSF    07.1
....................            led_in_count = 0;
01AB:  CLRF   3F
....................        }
....................    } 
....................    if (!LED_OUT) {
01AC:  BTFSC  07.2
01AD:  GOTO   1BA
....................        led_out_count++;
01AE:  INCF   40,F
....................        if (led_out_count > 20) {
01AF:  MOVF   40,W
01B0:  SUBLW  14
01B1:  BTFSC  03.0
01B2:  GOTO   1BA
....................            output_high(LED_OUT_PIN);
01B3:  BCF    2C.2
01B4:  MOVF   2C,W
01B5:  BSF    03.5
01B6:  MOVWF  07
01B7:  BCF    03.5
01B8:  BSF    07.2
....................            led_out_count = 0;
01B9:  CLRF   40
....................        }
....................    }
....................    // Night mode
....................    if (mode == night) {
01BA:  MOVF   30,W
01BB:  SUBLW  03
01BC:  BTFSS  03.2
01BD:  GOTO   1E1
....................       if (PIR == PIR_state) {
01BE:  CLRF   77
01BF:  BTFSC  32.5
01C0:  BSF    77.1
01C1:  MOVF   06,W
01C2:  XORWF  77,W
01C3:  ANDLW  02
01C4:  BTFSS  03.2
01C5:  GOTO   1DC
....................          PIR_count++;
01C6:  INCF   46,F
....................          if (PIR_count > 60) {
01C7:  MOVF   46,W
01C8:  SUBLW  3C
01C9:  BTFSC  03.0
01CA:  GOTO   1DB
....................             if (!PIR) {
01CB:  BTFSC  06.1
01CC:  GOTO   1D4
....................                output_high(LIGHT_PIN);
01CD:  BCF    2C.0
01CE:  MOVF   2C,W
01CF:  BSF    03.5
01D0:  MOVWF  07
01D1:  BCF    03.5
01D2:  BSF    07.0
....................             }
01D3:  GOTO   1DA
....................             else {
....................                output_low(LIGHT_PIN);
01D4:  BCF    2C.0
01D5:  MOVF   2C,W
01D6:  BSF    03.5
01D7:  MOVWF  07
01D8:  BCF    03.5
01D9:  BCF    07.0
....................             }
....................             PIR_count--;
01DA:  DECF   46,F
....................          }
....................       }
01DB:  GOTO   1DD
....................       else {
....................          PIR_count = 0;
01DC:  CLRF   46
....................       }
....................       PIR_state = PIR;
01DD:  BTFSS  06.1
01DE:  BCF    32.5
01DF:  BTFSC  06.1
01E0:  BSF    32.5
....................    }
01E1:  BCF    0C.0
01E2:  BCF    0A.3
01E3:  BCF    0A.4
01E4:  GOTO   02D
.................... }
.................... 
.................... void main() {
*
0B4E:  MOVF   03,W
0B4F:  ANDLW  1F
0B50:  MOVWF  03
0B51:  MOVLW  FF
0B52:  MOVWF  2C
0B53:  BSF    2C.3
0B54:  MOVF   2C,W
0B55:  BSF    03.5
0B56:  MOVWF  07
0B57:  BCF    03.5
0B58:  BSF    2C.4
0B59:  MOVF   2C,W
0B5A:  BSF    03.5
0B5B:  MOVWF  07
0B5C:  MOVLW  0C
0B5D:  MOVWF  13
0B5E:  MOVLW  28
0B5F:  BCF    03.5
0B60:  MOVWF  14
0B61:  BSF    03.5
0B62:  BCF    14.7
0B63:  BCF    14.6
0B64:  BCF    03.5
0B65:  CLRF   2F
0B66:  CLRF   2E
0B67:  CLRF   30
0B68:  CLRF   31
0B69:  BCF    32.0
0B6A:  BCF    32.1
0B6B:  BCF    32.2
0B6C:  CLRF   33
0B6D:  CLRF   34
0B6E:  CLRF   35
0B6F:  BCF    32.3
0B70:  BCF    32.4
0B71:  MOVLW  01
0B72:  MOVWF  3E
0B73:  CLRF   3F
0B74:  CLRF   40
0B75:  CLRF   41
0B76:  CLRF   42
0B77:  CLRF   43
0B78:  CLRF   44
0B79:  CLRF   45
0B7A:  BSF    32.5
0B7B:  CLRF   46
0B7C:  BSF    03.5
0B7D:  BSF    1F.0
0B7E:  BSF    1F.1
0B7F:  BSF    1F.2
0B80:  BCF    1F.3
0B81:  MOVLW  07
0B82:  MOVWF  1C
0B83:  BCF    03.7
....................     // LCD
....................    lcd_init();
0B84:  BCF    0A.3
0B85:  BCF    03.5
0B86:  GOTO   38C
0B87:  BSF    0A.3
....................    lcd_putc('\f');   // Clear LCD display
0B88:  MOVLW  0C
0B89:  MOVWF  4D
0B8A:  BCF    0A.3
0B8B:  CALL   437
0B8C:  BSF    0A.3
....................    // DS1307
....................    ds1307_init();
0B8D:  BCF    0A.3
0B8E:  GOTO   4A4
0B8F:  BSF    0A.3
....................    ds1307_get_time(current_time.hour, current_time.minute, current_time.second);
....................    night_timer.start_hour = 23;
*
0BD5:  MOVLW  17
0BD6:  BCF    03.5
0BD7:  MOVWF  39
....................    night_timer.start_minute = 00;
0BD8:  CLRF   3A
....................    night_timer.end_hour = 7;
0BD9:  MOVLW  07
0BDA:  MOVWF  3B
....................    night_timer.end_minute = 00;
0BDB:  CLRF   3C
....................    night_timer.state = 1;
0BDC:  BSF    3D.0
....................    write_night_timer_data();
0BDD:  BCF    0A.3
0BDE:  CALL   557
0BDF:  BSF    0A.3
....................    read_night_timer_data();
0BE0:  BCF    0A.3
0BE1:  GOTO   57A
0BE2:  BSF    0A.3
....................    // GPIO
....................    TRISB = 0xFF;
0BE3:  MOVLW  FF
0BE4:  BSF    03.5
0BE5:  MOVWF  06
....................    PORTB = 0xFF;
0BE6:  BCF    03.5
0BE7:  MOVWF  06
....................    OUTPUT_LOW(LIGHT_PIN);
0BE8:  BCF    2C.0
0BE9:  MOVF   2C,W
0BEA:  BSF    03.5
0BEB:  MOVWF  07
0BEC:  BCF    03.5
0BED:  BCF    07.0
....................    OUTPUT_HIGH(LED_IN_PIN);
0BEE:  BCF    2C.1
0BEF:  MOVF   2C,W
0BF0:  BSF    03.5
0BF1:  MOVWF  07
0BF2:  BCF    03.5
0BF3:  BSF    07.1
....................    OUTPUT_HIGH(LED_OUT_PIN);
0BF4:  BCF    2C.2
0BF5:  MOVF   2C,W
0BF6:  BSF    03.5
0BF7:  MOVWF  07
0BF8:  BCF    03.5
0BF9:  BSF    07.2
....................    // Timer 1 interrupt
....................    setup_timer_1 ( T1_INTERNAL | T1_DIV_BY_4 ); // Internal clock and prescaler 8                           
0BFA:  MOVLW  A5
0BFB:  MOVWF  10
....................    set_timer1(TIMER1_PREVALUE);                 // Preload value
0BFC:  CLRF   0E
0BFD:  MOVLW  CF
0BFE:  MOVWF  0F
0BFF:  MOVLW  2C
0C00:  MOVWF  0E
0C01:  NOP
....................    clear_interrupt(INT_TIMER1);                 // Clear Timer1 interrupt flag bit
0C02:  BCF    0C.0
....................    enable_interrupts(INT_TIMER1);               // Enable Timer1 interrupt
0C03:  BSF    03.5
0C04:  BSF    0C.0
....................    enable_interrupts(GLOBAL);                   // Enable global interrupts
0C05:  MOVLW  C0
0C06:  BCF    03.5
0C07:  IORWF  0B,F
....................    // Waiting for setup
....................    // delay_ms(3000);
....................    while(TRUE) {
....................       check_in_out();
0C08:  BCF    0A.3
0C09:  GOTO   5B8
0C0A:  BSF    0A.3
....................       if (mode == set_time) {
0C0B:  DECFSZ 30,W
0C0C:  GOTO   432
....................          if (set_current_time_previous_stage != set_current_time_previous_stage) {
0C0D:  MOVF   35,W
0C0E:  SUBWF  35,W
0C0F:  BTFSC  03.2
0C10:  GOTO   41C
....................             ds1307_set_time(current_time.hour, current_time.minute, current_time.second);
0C11:  MOVF   36,W
0C12:  MOVWF  47
0C13:  MOVF   37,W
0C14:  MOVWF  48
0C15:  MOVF   38,W
0C16:  MOVWF  49
0C17:  BCF    0A.3
0C18:  GOTO   5E1
0C19:  BSF    0A.3
....................             set_current_time_previous_stage = set_current_time_stage;
0C1A:  MOVF   34,W
0C1B:  MOVWF  35
....................          }
....................          if (set_time_stage != set_time_previous_stage) {
0C1C:  CLRF   77
0C1D:  BTFSC  32.2
0C1E:  BSF    77.1
0C1F:  MOVF   32,W
0C20:  XORWF  77,W
0C21:  ANDLW  02
0C22:  BTFSC  03.2
0C23:  GOTO   431
....................             // Clear LCD display when change set time stage
....................             lcd_putc('\f');
0C24:  MOVLW  0C
0C25:  MOVWF  4D
0C26:  BCF    0A.3
0C27:  CALL   437
0C28:  BSF    0A.3
....................             // Store night timer data
....................             if (set_time_type == set_current_time) {
0C29:  BTFSS  32.0
0C2A:  GOTO   42E
....................                write_night_timer_data();
0C2B:  BCF    0A.3
0C2C:  CALL   557
0C2D:  BSF    0A.3
....................             }
....................             set_time_previous_stage = set_time_stage;
0C2E:  BCF    32.2
0C2F:  BTFSC  32.1
0C30:  BSF    32.2
....................          }
....................       }
0C31:  GOTO   463
....................       else if (mode == automatic) {
0C32:  MOVF   30,W
0C33:  SUBLW  02
0C34:  BTFSS  03.2
0C35:  GOTO   453
....................          if (person > 0) {
0C36:  MOVF   3E,F
0C37:  BTFSC  03.2
0C38:  GOTO   440
....................             output_high(LIGHT_PIN);
0C39:  BCF    2C.0
0C3A:  MOVF   2C,W
0C3B:  BSF    03.5
0C3C:  MOVWF  07
0C3D:  BCF    03.5
0C3E:  BSF    07.0
....................          }
0C3F:  GOTO   446
....................          else {
....................             output_low(LIGHT_PIN);
0C40:  BCF    2C.0
0C41:  MOVF   2C,W
0C42:  BSF    03.5
0C43:  MOVWF  07
0C44:  BCF    03.5
0C45:  BCF    07.0
....................          }
....................          if (night_timer.state) {
0C46:  BTFSS  3D.0
0C47:  GOTO   452
....................             if (night_timer.start_hour == current_time.hour && night_timer.start_minute == current_time.minute) {
0C48:  MOVF   36,W
0C49:  SUBWF  39,W
0C4A:  BTFSS  03.2
0C4B:  GOTO   452
0C4C:  MOVF   37,W
0C4D:  SUBWF  3A,W
0C4E:  BTFSS  03.2
0C4F:  GOTO   452
....................                mode = night;
0C50:  MOVLW  03
0C51:  MOVWF  30
....................             }
....................          }
....................       }
0C52:  GOTO   463
....................       else if (mode == night) {
0C53:  MOVF   30,W
0C54:  SUBLW  03
0C55:  BTFSS  03.2
0C56:  GOTO   463
....................          if (night_timer.state) {
0C57:  BTFSS  3D.0
0C58:  GOTO   463
....................             if (night_timer.end_hour == current_time.hour && night_timer.end_minute == current_time.minute) {
0C59:  MOVF   36,W
0C5A:  SUBWF  3B,W
0C5B:  BTFSS  03.2
0C5C:  GOTO   463
0C5D:  MOVF   37,W
0C5E:  SUBWF  3C,W
0C5F:  BTFSS  03.2
0C60:  GOTO   463
....................                mode = automatic;
0C61:  MOVLW  02
0C62:  MOVWF  30
....................             }
....................          }
....................       }
....................       ds1307_get_time(current_time.hour, current_time.minute, current_time.second);
....................       // Clear LCD display when change mode
....................       if (previous_mode != mode) {
*
0CA8:  BCF    03.5
0CA9:  MOVF   30,W
0CAA:  SUBWF  31,W
0CAB:  BTFSC  03.2
0CAC:  GOTO   4B4
....................          lcd_putc('\f');
0CAD:  MOVLW  0C
0CAE:  MOVWF  4D
0CAF:  BCF    0A.3
0CB0:  CALL   437
0CB1:  BSF    0A.3
....................          previous_mode = mode;
0CB2:  MOVF   30,W
0CB3:  MOVWF  31
....................       }
....................       switch (mode) {
0CB4:  MOVF   30,W
0CB5:  ADDLW  FC
0CB6:  BTFSC  03.0
0CB7:  GOTO   4C3
0CB8:  ADDLW  04
0CB9:  GOTO   4C5
....................          case manual:
....................             display_manual_mode();
0CBA:  BCF    0A.3
0CBB:  GOTO   783
0CBC:  BSF    0A.3
....................             break;
0CBD:  GOTO   4C3
....................          case set_time:
....................             display_set_time_mode();
0CBE:  GOTO   12A
....................             break;
0CBF:  GOTO   4C3
....................          case automatic:
....................             display_automatic_mode();
0CC0:  GOTO   244
....................             break;
0CC1:  GOTO   4C3
....................          case night:
....................             display_night_mode();
0CC2:  GOTO   2CF
....................             break;
....................       }
0CC3:  GOTO   408
....................    }
.................... }
.................... 
0CC4:  SLEEP
.................... void check_in_out() {
....................     if (!IR1 && !IR1_flag) {
*
05B8:  BTFSC  06.2
05B9:  GOTO   5C6
05BA:  BTFSC  32.3
05BB:  GOTO   5C6
....................       IR1_flag = 1;
05BC:  BSF    32.3
....................       if (!IR2_flag) {
05BD:  BTFSC  32.4
05BE:  GOTO   5C6
....................          person++;
05BF:  INCF   3E,F
....................          output_low(LED_IN_PIN);
05C0:  BCF    2C.1
05C1:  MOVF   2C,W
05C2:  BSF    03.5
05C3:  MOVWF  07
05C4:  BCF    03.5
05C5:  BCF    07.1
....................       }
....................     }
....................     if (!IR2 && !IR2_flag) {
05C6:  BTFSC  06.3
05C7:  GOTO   5D4
05C8:  BTFSC  32.4
05C9:  GOTO   5D4
....................       IR2_flag = 1;
05CA:  BSF    32.4
....................       if (!IR1_flag) {
05CB:  BTFSC  32.3
05CC:  GOTO   5D4
....................          person--;
05CD:  DECF   3E,F
....................          output_low(LED_OUT_PIN);
05CE:  BCF    2C.2
05CF:  MOVF   2C,W
05D0:  BSF    03.5
05D1:  MOVWF  07
05D2:  BCF    03.5
05D3:  BCF    07.2
....................       }
....................     }
....................     if (IR1 && IR2 && IR1_flag && IR2_flag) {
05D4:  BTFSS  06.2
05D5:  GOTO   5DE
05D6:  BTFSS  06.3
05D7:  GOTO   5DE
05D8:  BTFSS  32.3
05D9:  GOTO   5DE
05DA:  BTFSS  32.4
05DB:  GOTO   5DE
....................       IR1_flag = 0;
05DC:  BCF    32.3
....................       IR2_flag = 0;
05DD:  BCF    32.4
....................     }
05DE:  BSF    0A.3
05DF:  BCF    0A.4
05E0:  GOTO   40A (RETURN)
.................... }
.................... 
.................... void display_manual_mode() {
....................    lcd_gotoxy(4, 1);
*
0783:  MOVLW  04
0784:  MOVWF  4E
0785:  MOVLW  01
0786:  MOVWF  4F
0787:  CALL   412
....................    printf(lcd_putc, "MANUAL MODE");
0788:  MOVLW  E5
0789:  BSF    03.6
078A:  MOVWF  0D
078B:  MOVLW  01
078C:  MOVWF  0F
078D:  BCF    03.6
078E:  CALL   60E
....................    lcd_gotoxy(1, 2);
078F:  MOVLW  01
0790:  MOVWF  4E
0791:  MOVLW  02
0792:  MOVWF  4F
0793:  CALL   412
....................    if (LIGHT_CONTROL) {
0794:  BTFSS  07.0
0795:  GOTO   79E
....................       printf(lcd_putc, "LIGHT:ON ",);
0796:  MOVLW  EB
0797:  BSF    03.6
0798:  MOVWF  0D
0799:  MOVLW  01
079A:  MOVWF  0F
079B:  BCF    03.6
079C:  CALL   60E
....................    }
079D:  GOTO   7A5
....................    else {
....................       printf(lcd_putc, "LIGHT:OFF",);
079E:  MOVLW  F0
079F:  BSF    03.6
07A0:  MOVWF  0D
07A1:  MOVLW  01
07A2:  MOVWF  0F
07A3:  BCF    03.6
07A4:  CALL   60E
....................    }
....................    lcd_gotoxy(12, 2);
07A5:  MOVLW  0C
07A6:  MOVWF  4E
07A7:  MOVLW  02
07A8:  MOVWF  4F
07A9:  CALL   412
....................    if (night_timer.state) {
07AA:  BTFSS  3D.0
07AB:  GOTO   7B4
....................       printf(lcd_putc, "TIMER:ON ");
07AC:  MOVLW  F5
07AD:  BSF    03.6
07AE:  MOVWF  0D
07AF:  MOVLW  01
07B0:  MOVWF  0F
07B1:  BCF    03.6
07B2:  CALL   60E
....................    }
07B3:  GOTO   7BB
....................    else {
....................       printf(lcd_putc, "TIMER:OFF");
07B4:  MOVLW  FA
07B5:  BSF    03.6
07B6:  MOVWF  0D
07B7:  MOVLW  01
07B8:  MOVWF  0F
07B9:  BCF    03.6
07BA:  CALL   60E
....................    }
....................    lcd_gotoxy(7, 3);
07BB:  MOVLW  07
07BC:  MOVWF  4E
07BD:  MOVLW  03
07BE:  MOVWF  4F
07BF:  CALL   412
....................    printf(lcd_putc, "PERSON:%d", person);
07C0:  MOVLW  FF
07C1:  BSF    03.6
07C2:  MOVWF  0D
07C3:  MOVLW  01
07C4:  MOVWF  0F
07C5:  BCF    03.0
07C6:  MOVLW  07
07C7:  BCF    03.6
07C8:  MOVWF  47
07C9:  CALL   664
07CA:  MOVF   3E,W
07CB:  MOVWF  47
07CC:  MOVLW  18
07CD:  MOVWF  48
07CE:  CALL   6BB
....................    lcd_gotoxy(15, 4);
07CF:  MOVLW  0F
07D0:  MOVWF  4E
07D1:  MOVLW  04
07D2:  MOVWF  4F
07D3:  CALL   412
....................    printf(lcd_putc, "%02d:%02d", current_time.hour, current_time.minute);
07D4:  MOVF   36,W
07D5:  MOVWF  47
07D6:  MOVLW  01
07D7:  MOVWF  48
07D8:  CALL   71F
07D9:  MOVLW  3A
07DA:  MOVWF  4D
07DB:  CALL   437
07DC:  MOVF   37,W
07DD:  MOVWF  47
07DE:  MOVLW  01
07DF:  MOVWF  48
07E0:  CALL   71F
07E1:  BSF    0A.3
07E2:  BCF    0A.4
07E3:  GOTO   4C3 (RETURN)
....................    //delay_ms(100);
.................... }
.................... 
.................... void display_automatic_mode() {
....................    lcd_gotoxy(2, 1);
*
0A44:  MOVLW  02
0A45:  MOVWF  4E
0A46:  MOVLW  01
0A47:  MOVWF  4F
0A48:  BCF    0A.3
0A49:  CALL   412
0A4A:  BSF    0A.3
....................    printf(lcd_putc, "AUTOMATIC MODE");
0A4B:  MOVLW  04
0A4C:  BSF    03.6
0A4D:  MOVWF  0D
0A4E:  MOVLW  02
0A4F:  MOVWF  0F
0A50:  BCF    0A.3
0A51:  BCF    03.6
0A52:  CALL   60E
0A53:  BSF    0A.3
....................    lcd_gotoxy(1, 2);
0A54:  MOVLW  01
0A55:  MOVWF  4E
0A56:  MOVLW  02
0A57:  MOVWF  4F
0A58:  BCF    0A.3
0A59:  CALL   412
0A5A:  BSF    0A.3
....................    if (LIGHT_CONTROL) {
0A5B:  BTFSS  07.0
0A5C:  GOTO   267
....................       printf(lcd_putc, "LIGHT:ON ",);
0A5D:  MOVLW  0C
0A5E:  BSF    03.6
0A5F:  MOVWF  0D
0A60:  MOVLW  02
0A61:  MOVWF  0F
0A62:  BCF    0A.3
0A63:  BCF    03.6
0A64:  CALL   60E
0A65:  BSF    0A.3
....................    }
0A66:  GOTO   270
....................    else {
....................       printf(lcd_putc, "LIGHT:OFF",);
0A67:  MOVLW  11
0A68:  BSF    03.6
0A69:  MOVWF  0D
0A6A:  MOVLW  02
0A6B:  MOVWF  0F
0A6C:  BCF    0A.3
0A6D:  BCF    03.6
0A6E:  CALL   60E
0A6F:  BSF    0A.3
....................    }
....................    lcd_gotoxy(12, 2);
0A70:  MOVLW  0C
0A71:  MOVWF  4E
0A72:  MOVLW  02
0A73:  MOVWF  4F
0A74:  BCF    0A.3
0A75:  CALL   412
0A76:  BSF    0A.3
....................    if (night_timer.state) {
0A77:  BTFSS  3D.0
0A78:  GOTO   283
....................       printf(lcd_putc, "TIMER:ON ");
0A79:  MOVLW  16
0A7A:  BSF    03.6
0A7B:  MOVWF  0D
0A7C:  MOVLW  02
0A7D:  MOVWF  0F
0A7E:  BCF    0A.3
0A7F:  BCF    03.6
0A80:  CALL   60E
0A81:  BSF    0A.3
....................    }
0A82:  GOTO   28C
....................    else {
....................       printf(lcd_putc, "TIMER:OFF");
0A83:  MOVLW  1B
0A84:  BSF    03.6
0A85:  MOVWF  0D
0A86:  MOVLW  02
0A87:  MOVWF  0F
0A88:  BCF    0A.3
0A89:  BCF    03.6
0A8A:  CALL   60E
0A8B:  BSF    0A.3
....................    }
....................    lcd_gotoxy(7, 3);
0A8C:  MOVLW  07
0A8D:  MOVWF  4E
0A8E:  MOVLW  03
0A8F:  MOVWF  4F
0A90:  BCF    0A.3
0A91:  CALL   412
0A92:  BSF    0A.3
....................    printf(lcd_putc, "PERSON:%d", person);
0A93:  MOVLW  20
0A94:  BSF    03.6
0A95:  MOVWF  0D
0A96:  MOVLW  02
0A97:  MOVWF  0F
0A98:  BCF    03.0
0A99:  MOVLW  07
0A9A:  BCF    03.6
0A9B:  MOVWF  47
0A9C:  BCF    0A.3
0A9D:  CALL   664
0A9E:  BSF    0A.3
0A9F:  MOVF   3E,W
0AA0:  MOVWF  47
0AA1:  MOVLW  18
0AA2:  MOVWF  48
0AA3:  BCF    0A.3
0AA4:  CALL   6BB
0AA5:  BSF    0A.3
....................    lcd_gotoxy(1, 4);
0AA6:  MOVLW  01
0AA7:  MOVWF  4E
0AA8:  MOVLW  04
0AA9:  MOVWF  4F
0AAA:  BCF    0A.3
0AAB:  CALL   412
0AAC:  BSF    0A.3
....................    printf(lcd_putc, "%02d:%02d:%02d", current_time.hour, current_time.minute, current_time.second);
0AAD:  MOVF   36,W
0AAE:  MOVWF  47
0AAF:  MOVLW  01
0AB0:  MOVWF  48
0AB1:  BCF    0A.3
0AB2:  CALL   71F
0AB3:  BSF    0A.3
0AB4:  MOVLW  3A
0AB5:  MOVWF  4D
0AB6:  BCF    0A.3
0AB7:  CALL   437
0AB8:  BSF    0A.3
0AB9:  MOVF   37,W
0ABA:  MOVWF  47
0ABB:  MOVLW  01
0ABC:  MOVWF  48
0ABD:  BCF    0A.3
0ABE:  CALL   71F
0ABF:  BSF    0A.3
0AC0:  MOVLW  3A
0AC1:  MOVWF  4D
0AC2:  BCF    0A.3
0AC3:  CALL   437
0AC4:  BSF    0A.3
0AC5:  MOVF   38,W
0AC6:  MOVWF  47
0AC7:  MOVLW  01
0AC8:  MOVWF  48
0AC9:  BCF    0A.3
0ACA:  CALL   71F
0ACB:  BSF    0A.3
0ACC:  BSF    0A.3
0ACD:  BCF    0A.4
0ACE:  GOTO   4C3 (RETURN)
....................    //delay_ms(100);
.................... }
.................... 
.................... void display_night_mode() {
....................    lcd_gotoxy(4, 1);
0ACF:  MOVLW  04
0AD0:  MOVWF  4E
0AD1:  MOVLW  01
0AD2:  MOVWF  4F
0AD3:  BCF    0A.3
0AD4:  CALL   412
0AD5:  BSF    0A.3
....................    printf(lcd_putc, "NIGHT MODE");
0AD6:  MOVLW  25
0AD7:  BSF    03.6
0AD8:  MOVWF  0D
0AD9:  MOVLW  02
0ADA:  MOVWF  0F
0ADB:  BCF    0A.3
0ADC:  BCF    03.6
0ADD:  CALL   60E
0ADE:  BSF    0A.3
....................    lcd_gotoxy(1, 2);
0ADF:  MOVLW  01
0AE0:  MOVWF  4E
0AE1:  MOVLW  02
0AE2:  MOVWF  4F
0AE3:  BCF    0A.3
0AE4:  CALL   412
0AE5:  BSF    0A.3
....................    if (LIGHT_CONTROL) {
0AE6:  BTFSS  07.0
0AE7:  GOTO   2F2
....................       printf(lcd_putc, "LIGHT:ON ",);
0AE8:  MOVLW  2B
0AE9:  BSF    03.6
0AEA:  MOVWF  0D
0AEB:  MOVLW  02
0AEC:  MOVWF  0F
0AED:  BCF    0A.3
0AEE:  BCF    03.6
0AEF:  CALL   60E
0AF0:  BSF    0A.3
....................    }
0AF1:  GOTO   2FB
....................    else {
....................       printf(lcd_putc, "LIGHT:OFF",);
0AF2:  MOVLW  30
0AF3:  BSF    03.6
0AF4:  MOVWF  0D
0AF5:  MOVLW  02
0AF6:  MOVWF  0F
0AF7:  BCF    0A.3
0AF8:  BCF    03.6
0AF9:  CALL   60E
0AFA:  BSF    0A.3
....................    }
....................    lcd_gotoxy(12, 2);
0AFB:  MOVLW  0C
0AFC:  MOVWF  4E
0AFD:  MOVLW  02
0AFE:  MOVWF  4F
0AFF:  BCF    0A.3
0B00:  CALL   412
0B01:  BSF    0A.3
....................    if (night_timer.state) {
0B02:  BTFSS  3D.0
0B03:  GOTO   30E
....................       printf(lcd_putc, "TIMER:ON ");
0B04:  MOVLW  35
0B05:  BSF    03.6
0B06:  MOVWF  0D
0B07:  MOVLW  02
0B08:  MOVWF  0F
0B09:  BCF    0A.3
0B0A:  BCF    03.6
0B0B:  CALL   60E
0B0C:  BSF    0A.3
....................    }
0B0D:  GOTO   317
....................    else {
....................       printf(lcd_putc, "TIMER:OFF");
0B0E:  MOVLW  3A
0B0F:  BSF    03.6
0B10:  MOVWF  0D
0B11:  MOVLW  02
0B12:  MOVWF  0F
0B13:  BCF    0A.3
0B14:  BCF    03.6
0B15:  CALL   60E
0B16:  BSF    0A.3
....................    }
....................    lcd_gotoxy(7, 3);
0B17:  MOVLW  07
0B18:  MOVWF  4E
0B19:  MOVLW  03
0B1A:  MOVWF  4F
0B1B:  BCF    0A.3
0B1C:  CALL   412
0B1D:  BSF    0A.3
....................    printf(lcd_putc, "PERSON:%d", person);
0B1E:  MOVLW  3F
0B1F:  BSF    03.6
0B20:  MOVWF  0D
0B21:  MOVLW  02
0B22:  MOVWF  0F
0B23:  BCF    03.0
0B24:  MOVLW  07
0B25:  BCF    03.6
0B26:  MOVWF  47
0B27:  BCF    0A.3
0B28:  CALL   664
0B29:  BSF    0A.3
0B2A:  MOVF   3E,W
0B2B:  MOVWF  47
0B2C:  MOVLW  18
0B2D:  MOVWF  48
0B2E:  BCF    0A.3
0B2F:  CALL   6BB
0B30:  BSF    0A.3
....................    lcd_gotoxy(15, 4);
0B31:  MOVLW  0F
0B32:  MOVWF  4E
0B33:  MOVLW  04
0B34:  MOVWF  4F
0B35:  BCF    0A.3
0B36:  CALL   412
0B37:  BSF    0A.3
....................    printf(lcd_putc, "%02d:%02d", current_time.hour, current_time.minute);
0B38:  MOVF   36,W
0B39:  MOVWF  47
0B3A:  MOVLW  01
0B3B:  MOVWF  48
0B3C:  BCF    0A.3
0B3D:  CALL   71F
0B3E:  BSF    0A.3
0B3F:  MOVLW  3A
0B40:  MOVWF  4D
0B41:  BCF    0A.3
0B42:  CALL   437
0B43:  BSF    0A.3
0B44:  MOVF   37,W
0B45:  MOVWF  47
0B46:  MOVLW  01
0B47:  MOVWF  48
0B48:  BCF    0A.3
0B49:  CALL   71F
0B4A:  BSF    0A.3
0B4B:  BSF    0A.3
0B4C:  BCF    0A.4
0B4D:  GOTO   4C3 (RETURN)
....................    //delay_ms(100);
.................... }
.................... 
.................... void display_set_time_mode() {
....................    if (!set_time_stage) {
*
092A:  BTFSC  32.1
092B:  GOTO   18A
....................       lcd_gotoxy(4, 1);
092C:  MOVLW  04
092D:  MOVWF  4E
092E:  MOVLW  01
092F:  MOVWF  4F
0930:  BCF    0A.3
0931:  CALL   412
0932:  BSF    0A.3
....................       printf(lcd_putc, "SET TIME MODE");
0933:  MOVLW  44
0934:  BSF    03.6
0935:  MOVWF  0D
0936:  MOVLW  02
0937:  MOVWF  0F
0938:  BCF    0A.3
0939:  BCF    03.6
093A:  CALL   60E
093B:  BSF    0A.3
....................       lcd_gotoxy(4, 3);
093C:  MOVLW  04
093D:  MOVWF  4E
093E:  MOVLW  03
093F:  MOVWF  4F
0940:  BCF    0A.3
0941:  CALL   412
0942:  BSF    0A.3
....................       printf(lcd_putc, "NIGHT MODE TIME");
0943:  MOVLW  4B
0944:  BSF    03.6
0945:  MOVWF  0D
0946:  MOVLW  02
0947:  MOVWF  0F
0948:  BCF    0A.3
0949:  BCF    03.6
094A:  CALL   60E
094B:  BSF    0A.3
....................       lcd_gotoxy(5, 4);
094C:  MOVLW  05
094D:  MOVWF  4E
094E:  MOVLW  04
094F:  MOVWF  4F
0950:  BCF    0A.3
0951:  CALL   412
0952:  BSF    0A.3
....................       printf(lcd_putc, "CURRENT TIME");
0953:  MOVLW  53
0954:  BSF    03.6
0955:  MOVWF  0D
0956:  MOVLW  02
0957:  MOVWF  0F
0958:  BCF    0A.3
0959:  BCF    03.6
095A:  CALL   60E
095B:  BSF    0A.3
....................       delay_ms(LCD_HIGH_TIME);
095C:  MOVLW  3C
095D:  MOVWF  4E
095E:  BCF    0A.3
095F:  CALL   296
0960:  BSF    0A.3
.................... 
....................       if (!set_time_type) {
0961:  BTFSC  32.0
0962:  GOTO   174
....................          lcd_gotoxy(4, 3);
0963:  MOVLW  04
0964:  MOVWF  4E
0965:  MOVLW  03
0966:  MOVWF  4F
0967:  BCF    0A.3
0968:  CALL   412
0969:  BSF    0A.3
....................          printf(lcd_putc, "               ");
096A:  MOVLW  5A
096B:  BSF    03.6
096C:  MOVWF  0D
096D:  MOVLW  02
096E:  MOVWF  0F
096F:  BCF    0A.3
0970:  BCF    03.6
0971:  CALL   60E
0972:  BSF    0A.3
....................       }
0973:  GOTO   184
....................       else {
....................          lcd_gotoxy(5, 4);
0974:  MOVLW  05
0975:  MOVWF  4E
0976:  MOVLW  04
0977:  MOVWF  4F
0978:  BCF    0A.3
0979:  CALL   412
097A:  BSF    0A.3
....................          printf(lcd_putc, "            ");
097B:  MOVLW  62
097C:  BSF    03.6
097D:  MOVWF  0D
097E:  MOVLW  02
097F:  MOVWF  0F
0980:  BCF    0A.3
0981:  BCF    03.6
0982:  CALL   60E
0983:  BSF    0A.3
....................       }
....................       delay_ms(LCD_LOW_TIME);
0984:  MOVLW  14
0985:  MOVWF  4E
0986:  BCF    0A.3
0987:  CALL   296
0988:  BSF    0A.3
....................    }
0989:  GOTO   241
....................    else {
....................       if (!set_time_type) {
098A:  BTFSC  32.0
098B:  GOTO   18E
....................          display_set_night_mode_time();
098C:  GOTO   000
....................       }
098D:  GOTO   241
....................       else {
....................          display_set_current_time();
....................       }
....................    }
*
0A41:  BSF    0A.3
0A42:  BCF    0A.4
0A43:  GOTO   4C3 (RETURN)
.................... }
.................... 
.................... void display_set_current_time() {
....................    lcd_gotoxy(3, 1);
*
098E:  MOVLW  03
098F:  MOVWF  4E
0990:  MOVLW  01
0991:  MOVWF  4F
0992:  BCF    0A.3
0993:  CALL   412
0994:  BSF    0A.3
....................    printf(lcd_putc, "SET CURRENT TIME");
0995:  MOVLW  69
0996:  BSF    03.6
0997:  MOVWF  0D
0998:  MOVLW  02
0999:  MOVWF  0F
099A:  BCF    0A.3
099B:  BCF    03.6
099C:  CALL   60E
099D:  BSF    0A.3
....................    lcd_gotoxy(1, 3);
099E:  MOVLW  01
099F:  MOVWF  4E
09A0:  MOVLW  03
09A1:  MOVWF  4F
09A2:  BCF    0A.3
09A3:  CALL   412
09A4:  BSF    0A.3
....................    printf(lcd_putc, "HOUR");
09A5:  MOVLW  72
09A6:  BSF    03.6
09A7:  MOVWF  0D
09A8:  MOVLW  02
09A9:  MOVWF  0F
09AA:  BCF    0A.3
09AB:  BCF    03.6
09AC:  CALL   60E
09AD:  BSF    0A.3
....................    lcd_gotoxy(7, 3);
09AE:  MOVLW  07
09AF:  MOVWF  4E
09B0:  MOVLW  03
09B1:  MOVWF  4F
09B2:  BCF    0A.3
09B3:  CALL   412
09B4:  BSF    0A.3
....................    printf(lcd_putc, "MINUTE");
09B5:  MOVLW  75
09B6:  BSF    03.6
09B7:  MOVWF  0D
09B8:  MOVLW  02
09B9:  MOVWF  0F
09BA:  BCF    0A.3
09BB:  BCF    03.6
09BC:  CALL   60E
09BD:  BSF    0A.3
....................    lcd_gotoxy(15, 3);
09BE:  MOVLW  0F
09BF:  MOVWF  4E
09C0:  MOVLW  03
09C1:  MOVWF  4F
09C2:  BCF    0A.3
09C3:  CALL   412
09C4:  BSF    0A.3
....................    printf(lcd_putc, "SECOND");
09C5:  MOVLW  79
09C6:  BSF    03.6
09C7:  MOVWF  0D
09C8:  MOVLW  02
09C9:  MOVWF  0F
09CA:  BCF    0A.3
09CB:  BCF    03.6
09CC:  CALL   60E
09CD:  BSF    0A.3
....................    lcd_gotoxy(2, 4);
09CE:  MOVLW  02
09CF:  MOVWF  4E
09D0:  MOVLW  04
09D1:  MOVWF  4F
09D2:  BCF    0A.3
09D3:  CALL   412
09D4:  BSF    0A.3
....................    printf(lcd_putc, "%02d", current_time.hour);
09D5:  MOVF   36,W
09D6:  MOVWF  47
09D7:  MOVLW  01
09D8:  MOVWF  48
09D9:  BCF    0A.3
09DA:  CALL   71F
09DB:  BSF    0A.3
....................    lcd_gotoxy(9, 4);
09DC:  MOVLW  09
09DD:  MOVWF  4E
09DE:  MOVLW  04
09DF:  MOVWF  4F
09E0:  BCF    0A.3
09E1:  CALL   412
09E2:  BSF    0A.3
....................    printf(lcd_putc, "%02d", current_time.minute);
09E3:  MOVF   37,W
09E4:  MOVWF  47
09E5:  MOVLW  01
09E6:  MOVWF  48
09E7:  BCF    0A.3
09E8:  CALL   71F
09E9:  BSF    0A.3
....................    lcd_gotoxy(17, 4);
09EA:  MOVLW  11
09EB:  MOVWF  4E
09EC:  MOVLW  04
09ED:  MOVWF  4F
09EE:  BCF    0A.3
09EF:  CALL   412
09F0:  BSF    0A.3
....................    printf(lcd_putc, "%02d", current_time.second);
09F1:  MOVF   38,W
09F2:  MOVWF  47
09F3:  MOVLW  01
09F4:  MOVWF  48
09F5:  BCF    0A.3
09F6:  CALL   71F
09F7:  BSF    0A.3
....................    delay_ms(LCD_HIGH_TIME);
09F8:  MOVLW  3C
09F9:  MOVWF  4E
09FA:  BCF    0A.3
09FB:  CALL   296
09FC:  BSF    0A.3
....................    switch (set_current_time_stage) {
09FD:  MOVF   34,W
09FE:  BTFSC  03.2
09FF:  GOTO   207
0A00:  XORLW  01
0A01:  BTFSC  03.2
0A02:  GOTO   219
0A03:  XORLW  03
0A04:  BTFSC  03.2
0A05:  GOTO   22B
0A06:  GOTO   23C
....................       case set_hour:
....................          lcd_gotoxy(2, 4);
0A07:  MOVLW  02
0A08:  MOVWF  4E
0A09:  MOVLW  04
0A0A:  MOVWF  4F
0A0B:  BCF    0A.3
0A0C:  CALL   412
0A0D:  BSF    0A.3
....................          printf(lcd_putc, "  ");
0A0E:  MOVLW  20
0A0F:  MOVWF  4D
0A10:  BCF    0A.3
0A11:  CALL   437
0A12:  BSF    0A.3
0A13:  MOVLW  20
0A14:  MOVWF  4D
0A15:  BCF    0A.3
0A16:  CALL   437
0A17:  BSF    0A.3
....................          break;
0A18:  GOTO   23C
....................       case set_minute:
....................          lcd_gotoxy(9, 4);
0A19:  MOVLW  09
0A1A:  MOVWF  4E
0A1B:  MOVLW  04
0A1C:  MOVWF  4F
0A1D:  BCF    0A.3
0A1E:  CALL   412
0A1F:  BSF    0A.3
....................          printf(lcd_putc, "  ");
0A20:  MOVLW  20
0A21:  MOVWF  4D
0A22:  BCF    0A.3
0A23:  CALL   437
0A24:  BSF    0A.3
0A25:  MOVLW  20
0A26:  MOVWF  4D
0A27:  BCF    0A.3
0A28:  CALL   437
0A29:  BSF    0A.3
....................          break;
0A2A:  GOTO   23C
....................       case set_second:
....................          lcd_gotoxy(17, 4);
0A2B:  MOVLW  11
0A2C:  MOVWF  4E
0A2D:  MOVLW  04
0A2E:  MOVWF  4F
0A2F:  BCF    0A.3
0A30:  CALL   412
0A31:  BSF    0A.3
....................          printf(lcd_putc, "  ");
0A32:  MOVLW  20
0A33:  MOVWF  4D
0A34:  BCF    0A.3
0A35:  CALL   437
0A36:  BSF    0A.3
0A37:  MOVLW  20
0A38:  MOVWF  4D
0A39:  BCF    0A.3
0A3A:  CALL   437
0A3B:  BSF    0A.3
....................          break;
....................    }
....................    delay_ms(LCD_LOW_TIME);
0A3C:  MOVLW  14
0A3D:  MOVWF  4E
0A3E:  BCF    0A.3
0A3F:  CALL   296
0A40:  BSF    0A.3
.................... }
.................... 
.................... void display_set_night_mode_time() {
....................    lcd_gotoxy(1, 1);
*
0800:  MOVLW  01
0801:  MOVWF  4E
0802:  MOVWF  4F
0803:  BCF    0A.3
0804:  CALL   412
0805:  BSF    0A.3
....................    printf(lcd_putc, "SET NIGHT MODE TIME");
0806:  MOVLW  7D
0807:  BSF    03.6
0808:  MOVWF  0D
0809:  MOVLW  02
080A:  MOVWF  0F
080B:  BCF    0A.3
080C:  BCF    03.6
080D:  CALL   60E
080E:  BSF    0A.3
....................    lcd_gotoxy(1, 2);
080F:  MOVLW  01
0810:  MOVWF  4E
0811:  MOVLW  02
0812:  MOVWF  4F
0813:  BCF    0A.3
0814:  CALL   412
0815:  BSF    0A.3
....................    printf(lcd_putc, "START");
0816:  MOVLW  87
0817:  BSF    03.6
0818:  MOVWF  0D
0819:  MOVLW  02
081A:  MOVWF  0F
081B:  BCF    0A.3
081C:  BCF    03.6
081D:  CALL   60E
081E:  BSF    0A.3
....................    lcd_gotoxy(15, 2);
081F:  MOVLW  0F
0820:  MOVWF  4E
0821:  MOVLW  02
0822:  MOVWF  4F
0823:  BCF    0A.3
0824:  CALL   412
0825:  BSF    0A.3
....................    printf(lcd_putc, "END");
0826:  MOVLW  45
0827:  MOVWF  4D
0828:  BCF    0A.3
0829:  CALL   437
082A:  BSF    0A.3
082B:  MOVLW  4E
082C:  MOVWF  4D
082D:  BCF    0A.3
082E:  CALL   437
082F:  BSF    0A.3
0830:  MOVLW  44
0831:  MOVWF  4D
0832:  BCF    0A.3
0833:  CALL   437
0834:  BSF    0A.3
....................    lcd_gotoxy(1, 3);
0835:  MOVLW  01
0836:  MOVWF  4E
0837:  MOVLW  03
0838:  MOVWF  4F
0839:  BCF    0A.3
083A:  CALL   412
083B:  BSF    0A.3
....................    printf(lcd_putc, "%02d:%02d", night_timer.start_hour, night_timer.start_minute);
083C:  MOVF   39,W
083D:  MOVWF  47
083E:  MOVLW  01
083F:  MOVWF  48
0840:  BCF    0A.3
0841:  CALL   71F
0842:  BSF    0A.3
0843:  MOVLW  3A
0844:  MOVWF  4D
0845:  BCF    0A.3
0846:  CALL   437
0847:  BSF    0A.3
0848:  MOVF   3A,W
0849:  MOVWF  47
084A:  MOVLW  01
084B:  MOVWF  48
084C:  BCF    0A.3
084D:  CALL   71F
084E:  BSF    0A.3
....................    lcd_gotoxy(14, 3);
084F:  MOVLW  0E
0850:  MOVWF  4E
0851:  MOVLW  03
0852:  MOVWF  4F
0853:  BCF    0A.3
0854:  CALL   412
0855:  BSF    0A.3
....................    printf(lcd_putc, "%02d:%02d", night_timer.end_hour, night_timer.end_minute);
0856:  MOVF   3B,W
0857:  MOVWF  47
0858:  MOVLW  01
0859:  MOVWF  48
085A:  BCF    0A.3
085B:  CALL   71F
085C:  BSF    0A.3
085D:  MOVLW  3A
085E:  MOVWF  4D
085F:  BCF    0A.3
0860:  CALL   437
0861:  BSF    0A.3
0862:  MOVF   3C,W
0863:  MOVWF  47
0864:  MOVLW  01
0865:  MOVWF  48
0866:  BCF    0A.3
0867:  CALL   71F
0868:  BSF    0A.3
....................    lcd_gotoxy(8, 4);
0869:  MOVLW  08
086A:  MOVWF  4E
086B:  MOVLW  04
086C:  MOVWF  4F
086D:  BCF    0A.3
086E:  CALL   412
086F:  BSF    0A.3
....................    printf(lcd_putc, "ON/OFF");
0870:  MOVLW  8A
0871:  BSF    03.6
0872:  MOVWF  0D
0873:  MOVLW  02
0874:  MOVWF  0F
0875:  BCF    0A.3
0876:  BCF    03.6
0877:  CALL   60E
0878:  BSF    0A.3
....................    delay_ms(LCD_HIGH_TIME);
0879:  MOVLW  3C
087A:  MOVWF  4E
087B:  BCF    0A.3
087C:  CALL   296
087D:  BSF    0A.3
....................    
....................    switch (set_nm_time_stage) {
087E:  MOVF   33,W
087F:  ADDLW  FB
0880:  BTFSC  03.0
0881:  GOTO   119
0882:  ADDLW  05
0883:  GOTO   121
....................       case set_start_hour:
....................          lcd_gotoxy(1, 3);
0884:  MOVLW  01
0885:  MOVWF  4E
0886:  MOVLW  03
0887:  MOVWF  4F
0888:  BCF    0A.3
0889:  CALL   412
088A:  BSF    0A.3
....................          printf(lcd_putc, "  :%02d", night_timer.start_minute);
088B:  MOVLW  20
088C:  MOVWF  4D
088D:  BCF    0A.3
088E:  CALL   437
088F:  BSF    0A.3
0890:  MOVLW  20
0891:  MOVWF  4D
0892:  BCF    0A.3
0893:  CALL   437
0894:  BSF    0A.3
0895:  MOVLW  3A
0896:  MOVWF  4D
0897:  BCF    0A.3
0898:  CALL   437
0899:  BSF    0A.3
089A:  MOVF   3A,W
089B:  MOVWF  47
089C:  MOVLW  01
089D:  MOVWF  48
089E:  BCF    0A.3
089F:  CALL   71F
08A0:  BSF    0A.3
....................          break;
08A1:  GOTO   119
....................       case set_start_minute:
....................          lcd_gotoxy(1, 3);
08A2:  MOVLW  01
08A3:  MOVWF  4E
08A4:  MOVLW  03
08A5:  MOVWF  4F
08A6:  BCF    0A.3
08A7:  CALL   412
08A8:  BSF    0A.3
....................          printf(lcd_putc, "%02d:  ", night_timer.start_hour);
08A9:  MOVF   39,W
08AA:  MOVWF  47
08AB:  MOVLW  01
08AC:  MOVWF  48
08AD:  BCF    0A.3
08AE:  CALL   71F
08AF:  BSF    0A.3
08B0:  MOVLW  3A
08B1:  MOVWF  4D
08B2:  BCF    0A.3
08B3:  CALL   437
08B4:  BSF    0A.3
08B5:  MOVLW  20
08B6:  MOVWF  4D
08B7:  BCF    0A.3
08B8:  CALL   437
08B9:  BSF    0A.3
08BA:  MOVLW  20
08BB:  MOVWF  4D
08BC:  BCF    0A.3
08BD:  CALL   437
08BE:  BSF    0A.3
....................          break;    
08BF:  GOTO   119
....................       case set_end_hour:
....................          lcd_gotoxy(14, 3);
08C0:  MOVLW  0E
08C1:  MOVWF  4E
08C2:  MOVLW  03
08C3:  MOVWF  4F
08C4:  BCF    0A.3
08C5:  CALL   412
08C6:  BSF    0A.3
....................          printf(lcd_putc, "  :%02d", night_timer.end_minute);
08C7:  MOVLW  20
08C8:  MOVWF  4D
08C9:  BCF    0A.3
08CA:  CALL   437
08CB:  BSF    0A.3
08CC:  MOVLW  20
08CD:  MOVWF  4D
08CE:  BCF    0A.3
08CF:  CALL   437
08D0:  BSF    0A.3
08D1:  MOVLW  3A
08D2:  MOVWF  4D
08D3:  BCF    0A.3
08D4:  CALL   437
08D5:  BSF    0A.3
08D6:  MOVF   3C,W
08D7:  MOVWF  47
08D8:  MOVLW  01
08D9:  MOVWF  48
08DA:  BCF    0A.3
08DB:  CALL   71F
08DC:  BSF    0A.3
....................          break;
08DD:  GOTO   119
....................       case set_end_minute:
....................          lcd_gotoxy(14, 3);
08DE:  MOVLW  0E
08DF:  MOVWF  4E
08E0:  MOVLW  03
08E1:  MOVWF  4F
08E2:  BCF    0A.3
08E3:  CALL   412
08E4:  BSF    0A.3
....................          printf(lcd_putc, "%02d:  ", night_timer.end_hour);
08E5:  MOVF   3B,W
08E6:  MOVWF  47
08E7:  MOVLW  01
08E8:  MOVWF  48
08E9:  BCF    0A.3
08EA:  CALL   71F
08EB:  BSF    0A.3
08EC:  MOVLW  3A
08ED:  MOVWF  4D
08EE:  BCF    0A.3
08EF:  CALL   437
08F0:  BSF    0A.3
08F1:  MOVLW  20
08F2:  MOVWF  4D
08F3:  BCF    0A.3
08F4:  CALL   437
08F5:  BSF    0A.3
08F6:  MOVLW  20
08F7:  MOVWF  4D
08F8:  BCF    0A.3
08F9:  CALL   437
08FA:  BSF    0A.3
....................          break;  
08FB:  GOTO   119
....................       case set_state:
....................          lcd_gotoxy(8, 4);
08FC:  MOVLW  08
08FD:  MOVWF  4E
08FE:  MOVLW  04
08FF:  MOVWF  4F
0900:  BCF    0A.3
0901:  CALL   412
0902:  BSF    0A.3
....................          if (night_timer.state) {
0903:  BTFSS  3D.0
0904:  GOTO   10F
....................             printf(lcd_putc, "  /OFF");
0905:  MOVLW  8E
0906:  BSF    03.6
0907:  MOVWF  0D
0908:  MOVLW  02
0909:  MOVWF  0F
090A:  BCF    0A.3
090B:  BCF    03.6
090C:  CALL   60E
090D:  BSF    0A.3
....................          }
090E:  GOTO   118
....................          else {
....................            printf(lcd_putc, "ON/   ");
090F:  MOVLW  92
0910:  BSF    03.6
0911:  MOVWF  0D
0912:  MOVLW  02
0913:  MOVWF  0F
0914:  BCF    0A.3
0915:  BCF    03.6
0916:  CALL   60E
0917:  BSF    0A.3
....................          }
....................          break;
0918:  GOTO   119
....................    }
....................    delay_ms(LCD_LOW_TIME);
0919:  MOVLW  14
091A:  MOVWF  4E
091B:  BCF    0A.3
091C:  CALL   296
091D:  BSF    0A.3
091E:  BSF    0A.3
091F:  BCF    0A.4
0920:  GOTO   18D (RETURN)
.................... }
.................... 
.................... void up_handler() {
....................     if (set_time_stage == choose_type_st) {
*
0059:  BTFSC  32.1
005A:  GOTO   05E
....................         set_time_type = ~set_time_type;
005B:  MOVLW  01
005C:  XORWF  32,F
....................     }
005D:  GOTO   0AA
....................     else {
....................         if (set_time_type == set_night_mode_time) {
005E:  BTFSC  32.0
005F:  GOTO   089
....................             switch (set_nm_time_stage) {
0060:  MOVF   33,W
0061:  ADDLW  FB
0062:  BTFSC  03.0
0063:  GOTO   088
0064:  ADDLW  05
0065:  GOTO   0AB
....................                case set_start_hour:
....................                   night_timer.start_hour++;
0066:  INCF   39,F
....................                   if (night_timer.start_hour > 23) night_timer.start_hour = 0;
0067:  BTFSC  39.7
0068:  GOTO   06D
0069:  MOVF   39,W
006A:  SUBLW  17
006B:  BTFSS  03.0
006C:  CLRF   39
....................                   break;
006D:  GOTO   088
....................                case set_start_minute:
....................                   night_timer.start_minute++;
006E:  INCF   3A,F
....................                   if (night_timer.start_minute > 59) night_timer.start_minute = 0;
006F:  BTFSC  3A.7
0070:  GOTO   075
0071:  MOVF   3A,W
0072:  SUBLW  3B
0073:  BTFSS  03.0
0074:  CLRF   3A
....................                   break;    
0075:  GOTO   088
....................                case set_end_hour:
....................                   night_timer.end_hour++;
0076:  INCF   3B,F
....................                   if (night_timer.end_hour > 23) night_timer.end_hour = 0;
0077:  BTFSC  3B.7
0078:  GOTO   07D
0079:  MOVF   3B,W
007A:  SUBLW  17
007B:  BTFSS  03.0
007C:  CLRF   3B
....................                   break;
007D:  GOTO   088
....................                case set_end_minute:
....................                   night_timer.end_minute++;
007E:  INCF   3C,F
....................                   if (night_timer.end_minute > 59) night_timer.end_minute = 0;
007F:  BTFSC  3C.7
0080:  GOTO   085
0081:  MOVF   3C,W
0082:  SUBLW  3B
0083:  BTFSS  03.0
0084:  CLRF   3C
....................                   break;  
0085:  GOTO   088
....................                case set_state:
....................                   night_timer.state = ~night_timer.state;
0086:  MOVLW  01
0087:  XORWF  3D,F
....................                   break;
....................              }
....................         }
0088:  GOTO   0AA
....................         else {
....................             switch (set_current_time_stage) {
0089:  MOVF   34,W
008A:  BTFSC  03.2
008B:  GOTO   093
008C:  XORLW  01
008D:  BTFSC  03.2
008E:  GOTO   09B
008F:  XORLW  03
0090:  BTFSC  03.2
0091:  GOTO   0A3
0092:  GOTO   0AA
....................                case set_hour:
....................                   current_time.hour++;
0093:  INCF   36,F
....................                   if (current_time.hour > 23) current_time.hour = 0;
0094:  BTFSC  36.7
0095:  GOTO   09A
0096:  MOVF   36,W
0097:  SUBLW  17
0098:  BTFSS  03.0
0099:  CLRF   36
....................                   break;
009A:  GOTO   0AA
....................                case set_minute:
....................                   current_time.minute++;
009B:  INCF   37,F
....................                   if (current_time.minute > 59) current_time.minute = 0;
009C:  BTFSC  37.7
009D:  GOTO   0A2
009E:  MOVF   37,W
009F:  SUBLW  3B
00A0:  BTFSS  03.0
00A1:  CLRF   37
....................                   break;
00A2:  GOTO   0AA
....................                case set_second:
....................                   current_time.second++;
00A3:  INCF   38,F
....................                   if (current_time.second > 59) current_time.second = 0;
00A4:  BTFSC  38.7
00A5:  GOTO   0AA
00A6:  MOVF   38,W
00A7:  SUBLW  3B
00A8:  BTFSS  03.0
00A9:  CLRF   38
....................                   break;
....................              }
....................         }
....................     }
00AA:  RETURN
.................... }
.................... 
.................... void down_handler() {
....................     if (set_time_stage == choose_type_st) {
*
00C9:  BTFSC  32.1
00CA:  GOTO   0CE
....................         set_time_type = ~set_time_type;
00CB:  MOVLW  01
00CC:  XORWF  32,F
....................     }
00CD:  GOTO   10C
....................     else {
....................         if (set_time_type == set_night_mode_time) {
00CE:  BTFSC  32.0
00CF:  GOTO   0F1
....................             switch (set_nm_time_stage) {
00D0:  MOVF   33,W
00D1:  ADDLW  FB
00D2:  BTFSC  03.0
00D3:  GOTO   0F0
00D4:  ADDLW  05
00D5:  GOTO   10D
....................                case set_start_hour:
....................                   night_timer.start_hour--;
00D6:  DECF   39,F
....................                   if (night_timer.start_hour < 0) night_timer.start_hour = 23;
00D7:  BTFSS  39.7
00D8:  GOTO   0DB
00D9:  MOVLW  17
00DA:  MOVWF  39
....................                   break;
00DB:  GOTO   0F0
....................                case set_start_minute:
....................                   night_timer.start_minute--;
00DC:  DECF   3A,F
....................                   if (night_timer.start_minute < 0) night_timer.start_minute = 59;
00DD:  BTFSS  3A.7
00DE:  GOTO   0E1
00DF:  MOVLW  3B
00E0:  MOVWF  3A
....................                   break;    
00E1:  GOTO   0F0
....................                case set_end_hour:
....................                   night_timer.end_hour--;
00E2:  DECF   3B,F
....................                   if (night_timer.end_hour < 0) night_timer.end_hour = 23;
00E3:  BTFSS  3B.7
00E4:  GOTO   0E7
00E5:  MOVLW  17
00E6:  MOVWF  3B
....................                   break;
00E7:  GOTO   0F0
....................                case set_end_minute:
....................                   night_timer.end_minute--;
00E8:  DECF   3C,F
....................                   if (night_timer.end_minute < 0) night_timer.end_minute = 59;
00E9:  BTFSS  3C.7
00EA:  GOTO   0ED
00EB:  MOVLW  3B
00EC:  MOVWF  3C
....................                   break;  
00ED:  GOTO   0F0
....................                case set_state:
....................                   night_timer.state = ~night_timer.state;
00EE:  MOVLW  01
00EF:  XORWF  3D,F
....................                   break;
....................               }
....................         }
00F0:  GOTO   10C
....................         else {
....................             switch (set_current_time_stage) {
00F1:  MOVF   34,W
00F2:  BTFSC  03.2
00F3:  GOTO   0FB
00F4:  XORLW  01
00F5:  BTFSC  03.2
00F6:  GOTO   101
00F7:  XORLW  03
00F8:  BTFSC  03.2
00F9:  GOTO   107
00FA:  GOTO   10C
....................                case set_hour:
....................                   current_time.hour--;
00FB:  DECF   36,F
....................                   if (current_time.hour < 0) current_time.hour = 23;
00FC:  BTFSS  36.7
00FD:  GOTO   100
00FE:  MOVLW  17
00FF:  MOVWF  36
....................                   break;
0100:  GOTO   10C
....................                case set_minute:
....................                   current_time.minute--;
0101:  DECF   37,F
....................                   if (current_time.minute < 0) current_time.minute = 59;   
0102:  BTFSS  37.7
0103:  GOTO   106
0104:  MOVLW  3B
0105:  MOVWF  37
....................                   break;
0106:  GOTO   10C
....................                case set_second:
....................                   current_time.second--;
0107:  DECF   38,F
....................                   if (current_time.second < 0) current_time.second = 59;
0108:  BTFSS  38.7
0109:  GOTO   10C
010A:  MOVLW  3B
010B:  MOVWF  38
.................... 
....................                   break;
....................             }
....................         }
....................     }
010C:  RETURN
.................... }
.................... 
.................... void enter_handler() {
....................     if (set_time_stage == choose_type_st) {
*
0184:  BTFSC  32.1
0185:  GOTO   188
....................         set_time_stage = set_time_st;
0186:  BSF    32.1
....................     }
0187:  GOTO   19B
....................     else {
....................         if (set_time_type == set_night_mode_time) {
0188:  BTFSC  32.0
0189:  GOTO   193
....................             set_nm_time_stage++;
018A:  INCF   33,F
....................             if (set_nm_time_stage > 4) {
018B:  MOVF   33,W
018C:  SUBLW  04
018D:  BTFSC  03.0
018E:  GOTO   192
....................                 set_time_stage = 0;
018F:  BCF    32.1
....................                 set_nm_time_stage = 0;
0190:  CLRF   33
....................                 set_time_type = set_current_time;
0191:  BSF    32.0
....................             }
....................         }
0192:  GOTO   19B
....................         else {
....................             set_current_time_stage++;
0193:  INCF   34,F
....................             if (set_current_time_stage > 3) {
0194:  MOVF   34,W
0195:  SUBLW  03
0196:  BTFSC  03.0
0197:  GOTO   19B
....................                 set_time_stage = 0;
0198:  BCF    32.1
....................                 set_current_time_stage = 0;
0199:  CLRF   34
....................                 set_time_type = set_night_mode_time;
019A:  BCF    32.0
....................             }
....................         }
....................     }
.................... }
.................... 
.................... void write_night_timer_data() {
....................    i2c_start();
*
0557:  BSF    03.5
0558:  BSF    11.0
0559:  BTFSC  11.0
055A:  GOTO   559
....................    i2c_write(0xD0);          
055B:  MOVLW  D0
055C:  BCF    03.5
055D:  MOVWF  4F
055E:  CALL   45E
....................    i2c_write(0x08);              
055F:  MOVLW  08
0560:  MOVWF  4F
0561:  CALL   45E
....................    i2c_write(night_timer.start_hour);      
0562:  MOVF   39,W
0563:  MOVWF  4F
0564:  CALL   45E
....................    i2c_write(night_timer.start_minute);      
0565:  MOVF   3A,W
0566:  MOVWF  4F
0567:  CALL   45E
....................    i2c_write(night_timer.end_hour);       
0568:  MOVF   3B,W
0569:  MOVWF  4F
056A:  CALL   45E
....................    i2c_write(night_timer.end_minute);      
056B:  MOVF   3C,W
056C:  MOVWF  4F
056D:  CALL   45E
....................    i2c_write(night_timer.state);     
056E:  MOVLW  00
056F:  BTFSC  3D.0
0570:  MOVLW  01
0571:  MOVWF  47
0572:  MOVWF  4F
0573:  CALL   45E
....................    i2c_stop();
0574:  BSF    03.5
0575:  BSF    11.2
0576:  BTFSC  11.2
0577:  GOTO   576
0578:  BCF    03.5
0579:  RETURN
.................... }
.................... 
.................... void read_night_timer_data() {
....................    BYTE state;
....................    i2c_start();
057A:  BSF    03.5
057B:  BSF    11.0
057C:  BTFSC  11.0
057D:  GOTO   57C
....................    i2c_write(0xD0);
057E:  MOVLW  D0
057F:  BCF    03.5
0580:  MOVWF  4F
0581:  CALL   45E
....................    i2c_write(0x08); 
0582:  MOVLW  08
0583:  MOVWF  4F
0584:  CALL   45E
....................    i2c_start();
0585:  BSF    03.5
0586:  BSF    11.1
0587:  BTFSC  11.1
0588:  GOTO   587
....................    i2c_write(0xD1);
0589:  MOVLW  D1
058A:  BCF    03.5
058B:  MOVWF  4F
058C:  CALL   45E
....................    night_timer.start_hour  = i2c_read();   
058D:  MOVLW  01
058E:  MOVWF  77
058F:  CALL   46E
0590:  MOVF   78,W
0591:  MOVWF  39
....................    night_timer.start_minute  = i2c_read();  
0592:  MOVLW  01
0593:  MOVWF  77
0594:  CALL   46E
0595:  MOVF   78,W
0596:  MOVWF  3A
....................    night_timer.end_hour  = i2c_read(); 
0597:  MOVLW  01
0598:  MOVWF  77
0599:  CALL   46E
059A:  MOVF   78,W
059B:  MOVWF  3B
....................    night_timer.end_minute = i2c_read();
059C:  MOVLW  01
059D:  MOVWF  77
059E:  CALL   46E
059F:  MOVF   78,W
05A0:  MOVWF  3C
....................    night_timer.state = i2c_read();
05A1:  MOVLW  01
05A2:  MOVWF  77
05A3:  CALL   46E
05A4:  MOVF   78,W
05A5:  BTFSS  78.0
05A6:  BCF    3D.0
05A7:  BTFSC  78.0
05A8:  BSF    3D.0
....................    i2c_stop();
05A9:  BSF    03.5
05AA:  BSF    11.2
05AB:  BTFSC  11.2
05AC:  GOTO   5AB
....................    night_timer.state = state & 1;
05AD:  BCF    03.5
05AE:  MOVF   47,W
05AF:  ANDLW  01
05B0:  MOVWF  78
05B1:  BTFSS  78.0
05B2:  BCF    3D.0
05B3:  BTFSC  78.0
05B4:  BSF    3D.0
05B5:  BSF    0A.3
05B6:  BCF    0A.4
05B7:  GOTO   3E2 (RETURN)
.................... }
.................... 

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT

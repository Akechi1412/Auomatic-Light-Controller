CCS PCM C Compiler, Version 5.109, 5967               26-Dec-22 21:13

               Filename:   D:\221\Embedded System Design\Project\Automatic Light Controller\CCS\main.lst

               ROM used:   3530 words (43%)
                           Largest free fragment is 2048
               RAM used:   47 (13%) at main() level
                           63 (17%) worst case
               Stack used: 6 locations (4 in main + 2 for interrupts)
               Stack size: 8

*
0000:  MOVLW  0B
0001:  MOVWF  0A
0002:  GOTO   396
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  MOVLW  8C
0028:  MOVWF  04
0029:  BTFSS  00.0
002A:  GOTO   02D
002B:  BTFSC  0C.0
002C:  GOTO   04E
002D:  MOVF   22,W
002E:  MOVWF  04
002F:  MOVF   23,W
0030:  MOVWF  77
0031:  MOVF   24,W
0032:  MOVWF  78
0033:  MOVF   25,W
0034:  MOVWF  79
0035:  MOVF   26,W
0036:  MOVWF  7A
0037:  MOVF   27,W
0038:  BSF    03.6
0039:  MOVWF  0D
003A:  BCF    03.6
003B:  MOVF   28,W
003C:  BSF    03.6
003D:  MOVWF  0F
003E:  BCF    03.6
003F:  MOVF   29,W
0040:  BSF    03.6
0041:  MOVWF  0C
0042:  BCF    03.6
0043:  MOVF   2A,W
0044:  BSF    03.6
0045:  MOVWF  0E
0046:  BCF    03.6
0047:  MOVF   20,W
0048:  MOVWF  0A
0049:  SWAPF  21,W
004A:  MOVWF  03
004B:  SWAPF  7F,F
004C:  SWAPF  7F,W
004D:  RETFIE
004E:  BCF    0A.3
004F:  BCF    0A.4
0050:  GOTO   107
.................... /*
....................  * File:   main.c
....................  * Author: Akechi
....................  *
....................  * Created on November 11, 2022, 9:44 PM
....................  */
.................... 
.................... #include "main.h"
.................... /* 
....................  * File:   main.h
....................  * Author: Akechi
....................  *
....................  * Created on November 11, 2022, 9:52 PM
....................  */
.................... 
.................... #ifndef MAIN_H
.................... #define  MAIN_H
.................... 
.................... #include <16f877a.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
0051:  BCF    0A.0
0052:  BCF    0A.1
0053:  BCF    0A.2
0054:  ADDWF  02,F
0055:  RETLW  28
0056:  RETLW  0C
0057:  RETLW  01
0058:  RETLW  06
*
00AC:  BCF    0A.0
00AD:  BCF    0A.1
00AE:  BCF    0A.2
00AF:  ADDWF  02,F
00B0:  GOTO   067
00B1:  GOTO   06F
00B2:  GOTO   077
00B3:  GOTO   07F
00B4:  GOTO   087
*
00FA:  NOP
00FB:  BSF    0A.0
00FC:  BCF    0A.1
00FD:  BCF    0A.2
00FE:  ADDLW  02
00FF:  BTFSC  03.0
0100:  INCF   0A,F
0101:  MOVWF  02
0102:  GOTO   0C3
0103:  GOTO   0C9
0104:  GOTO   0CF
0105:  GOTO   0D5
0106:  GOTO   0DB
*
01DD:  DATA CC,37
01DE:  DATA 61,32
01DF:  DATA 69,37
01E0:  DATA 67,17
01E1:  DATA 2E,17
01E2:  DATA 00,00
01E3:  DATA CD,20
01E4:  DATA CE,2A
01E5:  DATA 41,26
01E6:  DATA A0,26
01E7:  DATA 4F,22
01E8:  DATA 45,00
01E9:  DATA CC,24
01EA:  DATA 47,24
01EB:  DATA 54,1D
01EC:  DATA 4F,27
01ED:  DATA 20,00
01EE:  DATA CC,24
01EF:  DATA 47,24
01F0:  DATA 54,1D
01F1:  DATA 4F,23
01F2:  DATA 46,00
01F3:  DATA D4,24
01F4:  DATA CD,22
01F5:  DATA 52,1D
01F6:  DATA 4F,27
01F7:  DATA 20,00
01F8:  DATA D4,24
01F9:  DATA CD,22
01FA:  DATA 52,1D
01FB:  DATA 4F,23
01FC:  DATA 46,00
01FD:  DATA D0,22
01FE:  DATA D2,29
01FF:  DATA 4F,27
0200:  DATA BA,12
0201:  DATA 64,10
0202:  DATA 00,00
0203:  DATA C1,2A
0204:  DATA D4,27
0205:  DATA CD,20
0206:  DATA D4,24
0207:  DATA 43,10
0208:  DATA CD,27
0209:  DATA C4,22
020A:  DATA 00,01
020B:  DATA CC,24
020C:  DATA 47,24
020D:  DATA 54,1D
020E:  DATA 4F,27
020F:  DATA 20,00
0210:  DATA CC,24
0211:  DATA 47,24
0212:  DATA 54,1D
0213:  DATA 4F,23
0214:  DATA 46,00
0215:  DATA D4,24
0216:  DATA CD,22
0217:  DATA 52,1D
0218:  DATA 4F,27
0219:  DATA 20,00
021A:  DATA D4,24
021B:  DATA CD,22
021C:  DATA 52,1D
021D:  DATA 4F,23
021E:  DATA 46,00
021F:  DATA D0,22
0220:  DATA D2,29
0221:  DATA 4F,27
0222:  DATA BA,12
0223:  DATA 64,10
0224:  DATA 00,01
0225:  DATA CE,24
0226:  DATA 47,24
0227:  DATA 54,10
0228:  DATA CD,27
0229:  DATA C4,22
022A:  DATA 00,01
022B:  DATA CC,24
022C:  DATA 47,24
022D:  DATA 54,1D
022E:  DATA 4F,27
022F:  DATA 20,00
0230:  DATA CC,24
0231:  DATA 47,24
0232:  DATA 54,1D
0233:  DATA 4F,23
0234:  DATA 46,00
0235:  DATA D4,24
0236:  DATA CD,22
0237:  DATA 52,1D
0238:  DATA 4F,27
0239:  DATA 20,00
023A:  DATA D4,24
023B:  DATA CD,22
023C:  DATA 52,1D
023D:  DATA 4F,23
023E:  DATA 46,00
023F:  DATA D0,22
0240:  DATA D2,29
0241:  DATA 4F,27
0242:  DATA BA,12
0243:  DATA 64,10
0244:  DATA 00,01
0245:  DATA D3,22
0246:  DATA 54,10
0247:  DATA D4,24
0248:  DATA CD,22
0249:  DATA A0,26
024A:  DATA 4F,22
024B:  DATA 45,00
024C:  DATA CE,24
024D:  DATA 47,24
024E:  DATA 54,10
024F:  DATA D4,24
0250:  DATA CD,22
0251:  DATA 52,00
0252:  DATA C3,2A
0253:  DATA 52,29
0254:  DATA 45,27
0255:  DATA 54,10
0256:  DATA D4,24
0257:  DATA CD,22
0258:  DATA 00,01
0259:  DATA 20,10
025A:  DATA 20,10
025B:  DATA 20,10
025C:  DATA 20,10
025D:  DATA 20,10
025E:  DATA 20,00
025F:  DATA 20,10
0260:  DATA 20,10
0261:  DATA 20,10
0262:  DATA 20,10
0263:  DATA 20,10
0264:  DATA 20,10
0265:  DATA 00,00
0266:  DATA D3,22
0267:  DATA 54,10
0268:  DATA C3,2A
0269:  DATA 52,29
026A:  DATA 45,27
026B:  DATA 54,10
026C:  DATA D4,24
026D:  DATA CD,22
026E:  DATA 00,01
026F:  DATA C8,27
0270:  DATA 55,29
0271:  DATA 00,01
0272:  DATA CD,24
0273:  DATA CE,2A
0274:  DATA D4,22
0275:  DATA 00,01
0276:  DATA D3,22
0277:  DATA C3,27
0278:  DATA 4E,22
0279:  DATA 00,01
027A:  DATA D3,22
027B:  DATA 54,10
027C:  DATA CE,24
027D:  DATA 47,24
027E:  DATA 54,10
027F:  DATA D4,24
0280:  DATA CD,22
0281:  DATA 52,00
0282:  DATA 53,2A
0283:  DATA 41,29
0284:  DATA 54,00
0285:  DATA 4F,27
0286:  DATA AF,27
0287:  DATA 46,23
0288:  DATA 00,01
0289:  DATA 20,10
028A:  DATA AF,27
028B:  DATA 46,23
028C:  DATA 00,01
028D:  DATA 4F,27
028E:  DATA 2F,10
028F:  DATA 20,10
0290:  DATA 00,01
*
0483:  CLRF   77
0484:  CLRF   78
0485:  MOVF   54,W
0486:  BCF    03.0
0487:  BTFSC  55.0
0488:  ADDWF  77,F
0489:  RRF    77,F
048A:  RRF    78,F
048B:  BTFSC  55.1
048C:  ADDWF  77,F
048D:  RRF    77,F
048E:  RRF    78,F
048F:  BTFSC  55.2
0490:  ADDWF  77,F
0491:  RRF    77,F
0492:  RRF    78,F
0493:  BTFSC  55.3
0494:  ADDWF  77,F
0495:  RRF    77,F
0496:  RRF    78,F
0497:  BTFSC  55.4
0498:  ADDWF  77,F
0499:  RRF    77,F
049A:  RRF    78,F
049B:  BTFSC  55.5
049C:  ADDWF  77,F
049D:  RRF    77,F
049E:  RRF    78,F
049F:  BTFSC  55.6
04A0:  ADDWF  77,F
04A1:  RRF    77,F
04A2:  RRF    78,F
04A3:  BTFSC  55.7
04A4:  ADDWF  77,F
04A5:  RRF    77,F
04A6:  RRF    78,F
*
04AE:  MOVF   53,W
04AF:  CLRF   78
04B0:  SUBWF  52,W
04B1:  BTFSC  03.0
04B2:  GOTO   4B6
04B3:  MOVF   52,W
04B4:  MOVWF  77
04B5:  GOTO   4C2
04B6:  CLRF   77
04B7:  MOVLW  08
04B8:  MOVWF  54
04B9:  RLF    52,F
04BA:  RLF    77,F
04BB:  MOVF   53,W
04BC:  SUBWF  77,W
04BD:  BTFSC  03.0
04BE:  MOVWF  77
04BF:  RLF    78,F
04C0:  DECFSZ 54,F
04C1:  GOTO   4B9
04C2:  RETURN
*
05BF:  MOVF   0B,W
05C0:  MOVWF  49
05C1:  BCF    0B.7
05C2:  BSF    03.5
05C3:  BSF    03.6
05C4:  BSF    0C.7
05C5:  BSF    0C.0
05C6:  NOP
05C7:  NOP
05C8:  BCF    03.5
05C9:  BCF    03.6
05CA:  BTFSC  49.7
05CB:  BSF    0B.7
05CC:  BSF    03.6
05CD:  MOVF   0C,W
05CE:  ANDLW  7F
05CF:  BTFSC  03.2
05D0:  GOTO   613
05D1:  BCF    03.6
05D2:  MOVWF  49
05D3:  BSF    03.6
05D4:  MOVF   0D,W
05D5:  BCF    03.6
05D6:  MOVWF  4A
05D7:  BSF    03.6
05D8:  MOVF   0F,W
05D9:  BCF    03.6
05DA:  MOVWF  4B
05DB:  MOVF   49,W
05DC:  MOVWF  4F
05DD:  CALL   432
05DE:  MOVF   4A,W
05DF:  BSF    03.6
05E0:  MOVWF  0D
05E1:  BCF    03.6
05E2:  MOVF   4B,W
05E3:  BSF    03.6
05E4:  MOVWF  0F
05E5:  BCF    03.6
05E6:  MOVF   0B,W
05E7:  MOVWF  4C
05E8:  BCF    0B.7
05E9:  BSF    03.5
05EA:  BSF    03.6
05EB:  BSF    0C.7
05EC:  BSF    0C.0
05ED:  NOP
05EE:  NOP
05EF:  BCF    03.5
05F0:  BCF    03.6
05F1:  BTFSC  4C.7
05F2:  BSF    0B.7
05F3:  BSF    03.6
05F4:  RLF    0C,W
05F5:  RLF    0E,W
05F6:  ANDLW  7F
05F7:  BTFSC  03.2
05F8:  GOTO   613
05F9:  BCF    03.6
05FA:  MOVWF  49
05FB:  BSF    03.6
05FC:  MOVF   0D,W
05FD:  BCF    03.6
05FE:  MOVWF  4A
05FF:  BSF    03.6
0600:  MOVF   0F,W
0601:  BCF    03.6
0602:  MOVWF  4B
0603:  MOVF   49,W
0604:  MOVWF  4F
0605:  CALL   432
0606:  MOVF   4A,W
0607:  BSF    03.6
0608:  MOVWF  0D
0609:  BCF    03.6
060A:  MOVF   4B,W
060B:  BSF    03.6
060C:  MOVWF  0F
060D:  INCF   0D,F
060E:  BTFSC  03.2
060F:  INCF   0F,F
0610:  BCF    03.6
0611:  GOTO   5BF
0612:  BSF    03.6
0613:  BCF    03.6
0614:  RETURN
0615:  MOVLW  20
0616:  BTFSS  4A.4
0617:  MOVLW  30
0618:  MOVWF  4B
0619:  MOVF   49,W
061A:  MOVWF  77
061B:  BTFSS  49.7
061C:  GOTO   625
061D:  COMF   77,F
061E:  INCF   77,F
061F:  MOVF   77,W
0620:  MOVWF  49
0621:  MOVLW  2D
0622:  MOVWF  4B
0623:  BSF    4A.7
0624:  BSF    4A.0
0625:  MOVF   49,W
0626:  MOVWF  52
0627:  MOVLW  64
0628:  MOVWF  53
0629:  CALL   4AE
062A:  MOVF   77,W
062B:  MOVWF  49
062C:  MOVLW  30
062D:  ADDWF  78,W
062E:  MOVWF  4C
062F:  MOVF   49,W
0630:  MOVWF  52
0631:  MOVLW  0A
0632:  MOVWF  53
0633:  CALL   4AE
0634:  MOVLW  30
0635:  ADDWF  77,W
0636:  MOVWF  4E
0637:  MOVLW  30
0638:  ADDWF  78,W
0639:  MOVWF  4D
063A:  MOVF   4B,W
063B:  MOVWF  77
063C:  MOVLW  30
063D:  SUBWF  4C,W
063E:  BTFSC  03.2
063F:  GOTO   644
0640:  BSF    4A.1
0641:  BTFSC  4A.7
0642:  BSF    4A.2
0643:  GOTO   658
0644:  MOVF   4B,W
0645:  MOVWF  4C
0646:  MOVLW  20
0647:  MOVWF  4B
0648:  MOVLW  30
0649:  SUBWF  4D,W
064A:  BTFSC  03.2
064B:  GOTO   650
064C:  BSF    4A.0
064D:  BTFSC  4A.7
064E:  BSF    4A.1
064F:  GOTO   658
0650:  BTFSS  03.2
0651:  BSF    4A.0
0652:  BTFSS  03.2
0653:  GOTO   658
0654:  MOVF   4C,W
0655:  MOVWF  4D
0656:  MOVLW  20
0657:  MOVWF  4C
0658:  BTFSC  4A.2
0659:  GOTO   65F
065A:  BTFSC  4A.1
065B:  GOTO   662
065C:  BTFSC  4A.0
065D:  GOTO   665
065E:  GOTO   668
065F:  MOVF   4B,W
0660:  MOVWF  4F
0661:  CALL   432
0662:  MOVF   4C,W
0663:  MOVWF  4F
0664:  CALL   432
0665:  MOVF   4D,W
0666:  MOVWF  4F
0667:  CALL   432
0668:  MOVF   4E,W
0669:  MOVWF  4F
066A:  CALL   432
066B:  RETURN
*
069A:  MOVF   0B,W
069B:  MOVWF  4A
069C:  BCF    0B.7
069D:  BSF    03.5
069E:  BSF    03.6
069F:  BSF    0C.7
06A0:  BSF    0C.0
06A1:  NOP
06A2:  NOP
06A3:  BCF    03.5
06A4:  BCF    03.6
06A5:  BTFSC  4A.7
06A6:  BSF    0B.7
06A7:  BTFSC  03.0
06A8:  GOTO   6D1
06A9:  BSF    03.6
06AA:  MOVF   0C,W
06AB:  ANDLW  7F
06AC:  BCF    03.6
06AD:  MOVWF  4A
06AE:  BSF    03.6
06AF:  MOVF   0D,W
06B0:  BCF    03.6
06B1:  MOVWF  4B
06B2:  BSF    03.6
06B3:  MOVF   0F,W
06B4:  BCF    03.6
06B5:  MOVWF  4C
06B6:  MOVF   4A,W
06B7:  MOVWF  4F
06B8:  CALL   432
06B9:  MOVF   4B,W
06BA:  BSF    03.6
06BB:  MOVWF  0D
06BC:  BCF    03.6
06BD:  MOVF   4C,W
06BE:  BSF    03.6
06BF:  MOVWF  0F
06C0:  BCF    03.6
06C1:  MOVF   0B,W
06C2:  MOVWF  4D
06C3:  BCF    0B.7
06C4:  BSF    03.5
06C5:  BSF    03.6
06C6:  BSF    0C.7
06C7:  BSF    0C.0
06C8:  NOP
06C9:  NOP
06CA:  BCF    03.5
06CB:  BCF    03.6
06CC:  BTFSC  4D.7
06CD:  BSF    0B.7
06CE:  DECFSZ 49,F
06CF:  GOTO   6D1
06D0:  GOTO   6F0
06D1:  BSF    03.6
06D2:  RLF    0C,W
06D3:  RLF    0E,W
06D4:  ANDLW  7F
06D5:  BCF    03.6
06D6:  MOVWF  4A
06D7:  BSF    03.6
06D8:  MOVF   0D,W
06D9:  BCF    03.6
06DA:  MOVWF  4B
06DB:  BSF    03.6
06DC:  MOVF   0F,W
06DD:  BCF    03.6
06DE:  MOVWF  4C
06DF:  MOVF   4A,W
06E0:  MOVWF  4F
06E1:  CALL   432
06E2:  MOVF   4B,W
06E3:  BSF    03.6
06E4:  MOVWF  0D
06E5:  BCF    03.6
06E6:  MOVF   4C,W
06E7:  BSF    03.6
06E8:  MOVWF  0F
06E9:  INCF   0D,F
06EA:  BTFSC  03.2
06EB:  INCF   0F,F
06EC:  BCF    03.0
06ED:  BCF    03.6
06EE:  DECFSZ 49,F
06EF:  GOTO   69A
06F0:  RETURN
06F1:  MOVLW  20
06F2:  BTFSS  4A.4
06F3:  MOVLW  30
06F4:  MOVWF  4B
06F5:  MOVF   49,W
06F6:  MOVWF  77
06F7:  BTFSS  49.7
06F8:  GOTO   701
06F9:  COMF   77,F
06FA:  INCF   77,F
06FB:  MOVF   77,W
06FC:  MOVWF  49
06FD:  MOVLW  2D
06FE:  MOVWF  4B
06FF:  BSF    4A.7
0700:  BSF    4A.0
0701:  MOVF   49,W
0702:  MOVWF  52
0703:  MOVLW  64
0704:  MOVWF  53
0705:  CALL   4AE
0706:  MOVF   77,W
0707:  MOVWF  49
0708:  MOVLW  30
0709:  ADDWF  78,W
070A:  MOVWF  4C
070B:  MOVF   49,W
070C:  MOVWF  52
070D:  MOVLW  0A
070E:  MOVWF  53
070F:  CALL   4AE
0710:  MOVLW  30
0711:  ADDWF  77,W
0712:  MOVWF  4E
0713:  MOVLW  30
0714:  ADDWF  78,W
0715:  MOVWF  4D
0716:  MOVF   4B,W
0717:  MOVWF  77
0718:  MOVLW  30
0719:  SUBWF  4C,W
071A:  BTFSC  03.2
071B:  GOTO   720
071C:  BSF    4A.1
071D:  BTFSC  4A.7
071E:  BSF    4A.2
071F:  GOTO   734
0720:  BTFSC  4A.2
0721:  GOTO   734
0722:  MOVF   4B,W
0723:  MOVWF  4C
0724:  BTFSC  4A.1
0725:  GOTO   72B
0726:  MOVLW  30
0727:  SUBWF  4D,W
0728:  BTFSC  03.2
0729:  GOTO   72E
072A:  BSF    4A.0
072B:  BTFSC  4A.7
072C:  BSF    4A.1
072D:  GOTO   734
072E:  BTFSS  03.2
072F:  BSF    4A.0
0730:  BTFSS  03.2
0731:  GOTO   734
0732:  MOVF   4C,W
0733:  MOVWF  4D
0734:  BTFSC  4A.2
0735:  GOTO   73B
0736:  BTFSC  4A.1
0737:  GOTO   73E
0738:  BTFSC  4A.0
0739:  GOTO   741
073A:  GOTO   744
073B:  MOVF   4B,W
073C:  MOVWF  4F
073D:  CALL   432
073E:  MOVF   4C,W
073F:  MOVWF  4F
0740:  CALL   432
0741:  MOVF   4D,W
0742:  MOVWF  4F
0743:  CALL   432
0744:  MOVF   4E,W
0745:  MOVWF  4F
0746:  CALL   432
0747:  RETURN
*
0959:  BSF    0A.0
095A:  BCF    0A.1
095B:  BCF    0A.2
095C:  ADDWF  02,F
095D:  GOTO   0C2
095E:  GOTO   0E0
095F:  GOTO   0FE
0960:  GOTO   11C
0961:  GOTO   13A
*
0DEE:  BSF    0A.0
0DEF:  BCF    0A.1
0DF0:  BSF    0A.2
0DF1:  ADDWF  02,F
0DF2:  GOTO   487
0DF3:  GOTO   4D1
0DF4:  GOTO   53C
0DF5:  GOTO   599
.................... 
.................... #list
.................... 
.................... #include <def_877a.h>
.................... /* 
....................  * File:   def_877a.h
....................  * Author: Akechi
....................  *
....................  * Created on November 12, 2022, 3:11 AM
....................  */
.................... 
.................... #ifndef DEF_877A_H
.................... #define	DEF_877A_H
.................... 
.................... // register definitions
.................... #define W 0
.................... #define F 1
.................... 
.................... // register files
.................... #byte INDF =0x00
.................... #byte TMR0 =0x01
.................... #byte PCL =0x02
.................... #byte STATUS =0x03
.................... #byte FSR =0x04
.................... #byte PORTA =0x05
.................... #byte PORTB =0x06
.................... #byte PORTC =0x07
.................... #byte PORTD =0x08
.................... #byte PORTE =0x09
.................... 
.................... #byte EEDATA =0x10C
.................... #byte EEADR =0x10D
.................... #byte EEDATH =0x10E
.................... #byte EEADRH =0x10F
.................... #byte ADCON0 =0x1F
.................... #byte ADCON1 =0x9F
.................... #byte ADRESH =0x9F
.................... #byte ADSESL =0x9F
.................... 
.................... #byte PCLATH =0x0a
.................... #byte INTCON =0x0b
.................... #byte PIR1 =0x0c
.................... #byte PIR2 =0x0d
.................... #byte PIE1 =0x8c
.................... #byte PIE2 =0x8d
.................... 
.................... #byte OPTION_REG =0x81
.................... #byte TRISA =0x85
.................... #byte TRISB =0x86
.................... #byte TRISC =0x87
.................... #byte TRISD =0x88
.................... #byte TRISE =0x89
.................... #byte EECON1 =0x18C
.................... #byte EECON2 =0x18D
.................... 
.................... //bit definitions
.................... #bit RA5 =0x05.5
.................... #bit RA4 =0x05.4
.................... #bit RA3 =0x05.3
.................... #bit RA2 =0x05.2
.................... #bit RA1 =0x05.1
.................... #bit RA0 =0x05.0
.................... 
.................... #bit RB7 =0x06.7
.................... #bit RB6 =0x06.6
.................... #bit RB5 =0x06.5
.................... #bit RB4 =0x06.4
.................... #bit RB3 =0x06.3
.................... #bit RB2 =0x06.2
.................... #bit RB1 =0x06.1
.................... #bit RB0 =0x06.0
.................... 
.................... #bit RC7 =0x07.7
.................... #bit RC6 =0x07.6
.................... #bit RC5 =0x07.5
.................... #bit RC4 =0x07.4
.................... #bit RC3 =0x07.3
.................... #bit RC2 =0x07.2
.................... #bit RC1 =0x07.1
.................... #bit RC0 =0x07.0
.................... 
.................... #bit RD7 =0x08.7
.................... #bit RD6 =0x08.6
.................... #bit RD5 =0x08.5
.................... #bit RD4 =0x08.4
.................... #bit RD3 =0x08.3
.................... #bit RD2 =0x08.2
.................... #bit RD1 =0x08.1
.................... #bit RD0 =0x08.0
.................... 
.................... #bit RE2 =0x09.2
.................... #bit RE1 =0x09.1
.................... #bit RE0 =0x09.0
.................... 
.................... #bit TRISA5 =0x85.5
.................... #bit TRISA4 =0x85.4
.................... #bit TRISA3 =0x85.3
.................... #bit TRISA2 =0x85.2
.................... #bit TRISA1 =0x85.1
.................... #bit TRISA0 =0x85.0
.................... 
.................... #bit TRISB7 =0x86.7
.................... #bit TRISB6 =0x86.6
.................... #bit TRISB5 =0x86.5
.................... #bit TRISB4 =0x86.4
.................... #bit TRISB3 =0x86.3
.................... #bit TRISB2 =0x86.2
.................... #bit TRISB1 =0x86.1
.................... #bit TRISB0 =0x86.0
.................... 
.................... #bit TRISC7 =0x87.7
.................... #bit TRISC6 =0x87.6
.................... #bit TRISC5 =0x87.5
.................... #bit TRISC4 =0x87.4
.................... #bit TRISC3 =0x87.3
.................... #bit TRISC2 =0x87.2
.................... #bit TRISC1 =0x87.1
.................... #bit TRISC0 =0x87.0
.................... 
.................... #bit TRISD7 =0x88.7
.................... #bit TRISD6 =0x88.6
.................... #bit TRISD5 =0x88.5
.................... #bit TRISD4 =0x88.4
.................... #bit TRISD3 =0x88.3
.................... #bit TRISD2 =0x88.2
.................... #bit TRISD1 =0x88.1
.................... #bit TRISD0 =0x88.0
.................... 
.................... #bit TRISE2 =0x89.2
.................... #bit TRISE1 =0x89.1
.................... #bit TRISE0 =0x89.0
.................... 
.................... // INTCON Bits for C
.................... #bit gie = 0x0b.7
.................... #bit peie = 0x0b.6
.................... #bit tmr0ie = 0x0b.5
.................... #bit int0ie = 0x0b.4
.................... #bit rbie = 0x0b.3
.................... #bit tmr0if = 0x0b.2
.................... #bit int0if = 0x0b.1
.................... #bit rbif = 0x0b.0
.................... 
.................... // PIR1 for C
.................... #bit pspif = 0x0c.7
.................... #bit adif = 0x0c.6
.................... #bit rcif = 0x0c.5
.................... #bit txif = 0x0c.4
.................... #bit sspif = 0x0c.3
.................... #bit ccp1if = 0x0c.2
.................... #bit tmr2if = 0x0c.1
.................... #bit tmr1if = 0x0c.0
.................... 
.................... //PIR2 for C
.................... #bit cmif = 0x0d.6
.................... #bit eeif = 0x0d.4
.................... #bit bclif = 0x0d.3
.................... #bit ccp2if = 0x0d.0
.................... 
.................... // PIE1 for C
.................... #bit adie = 0x8c.6
.................... #bit rcie = 0x8c.5
.................... #bit txie = 0x8c.4
.................... #bit sspie = 0x8c.3
.................... #bit ccp1ie = 0x8c.2
.................... #bit tmr2ie = 0x8c.1
.................... #bit tmr1ie = 0x8c.0
.................... 
.................... //PIE2 for C
.................... #bit osfie = 0x8d.7
.................... #bit cmie = 0x8d.6
.................... #bit eeie = 0x8d.4
.................... 
.................... // OPTION Bits
.................... #bit not_rbpu = 0x81.7
.................... #bit intedg = 0x81.6
.................... #bit t0cs = 0x81.5
.................... #bit t0se = 0x81.4
.................... #bit psa = 0x81.3
.................... #bit ps2 = 0x81.2
.................... #bit ps1 = 0x81.1
.................... #bit ps0 = 0x81.0
.................... 
.................... // EECON1 Bits
.................... #bit eepgd = 0x18c.7
.................... 
.................... #endif	/* DEF_877A_H */
.................... 
.................... 
.................... 
.................... // configurations
.................... #device *=16 ADC=10
.................... #fuses NOWDT, HS, NOPUT, NOPROTECT, NODEBUG, NOBROWNOUT, NOLVP, NOCPD, NOWRT
.................... #use delay(crystal = 20M)
*
0291:  MOVLW  50
0292:  MOVWF  04
0293:  BCF    03.7
0294:  MOVF   00,W
0295:  BTFSC  03.2
0296:  GOTO   2A4
0297:  MOVLW  06
0298:  MOVWF  78
0299:  CLRF   77
029A:  DECFSZ 77,F
029B:  GOTO   29A
029C:  DECFSZ 78,F
029D:  GOTO   299
029E:  MOVLW  7B
029F:  MOVWF  77
02A0:  DECFSZ 77,F
02A1:  GOTO   2A0
02A2:  DECFSZ 00,F
02A3:  GOTO   297
02A4:  RETURN
.................... #use i2c(master, fast, sda = PIN_C4, scl = PIN_C3)
*
0459:  BCF    14.7
045A:  BCF    0C.3
045B:  MOVF   51,W
045C:  MOVWF  13
045D:  MOVLW  02
045E:  BTFSC  14.7
045F:  GOTO   467
0460:  BSF    03.5
0461:  BTFSC  14.2
0462:  GOTO   461
0463:  MOVLW  00
0464:  BTFSC  11.6
0465:  MOVLW  01
0466:  BCF    03.5
0467:  MOVWF  78
0468:  RETURN
0469:  BCF    14.6
046A:  BSF    03.5
046B:  BSF    11.3
046C:  BTFSC  11.3
046D:  GOTO   46C
046E:  BTFSC  77.0
046F:  BCF    11.5
0470:  BTFSS  77.0
0471:  BSF    11.5
0472:  BSF    11.4
0473:  BTFSC  11.4
0474:  GOTO   473
0475:  BCF    03.5
0476:  MOVF   13,W
0477:  MOVWF  78
0478:  RETURN
.................... 
.................... #define PIR RB1
.................... #define IR1 RB2
.................... #define IR2 RB3
.................... #define LIGHT_CONTROL RC0
.................... #define LED_IN RC1
.................... #define LED_OUT RC2
.................... #define LIGHT RB0
.................... #define MENU RB4
.................... #define UP RB5
.................... #define DOWN RB6
.................... #define ENTER RB7
.................... 
.................... typedef enum {manual, set_time, automatic, night} mode_t;
.................... 
.................... typedef struct {
....................    enum {choose_type, change_value} stage, prevStage;
....................    enum {set_night_timer, set_current_time} type;
....................    struct {
....................       enum {
....................          set_start_hour,
....................          set_start_minute,
....................          set_end_hour,
....................          set_end_minute,
....................          set_state
....................       } stage;
....................    } nightTimer;
....................    struct {
....................       enum {
....................          set_hour,
....................          set_minute,
....................          set_second
....................       } stage;
....................    } currentTime;
.................... } setTime_t;
.................... 
.................... typedef struct {
....................     signed int8 hour;
....................     signed int8 minute;
....................     signed int8 second;
.................... } time_t;
.................... 
.................... typedef struct {
....................    signed int8 startHour;
....................    signed int8 startMinute;
....................    signed int8 endHour;
....................    signed int8 endMinute;
....................    int1 state;
.................... } timer_t;
.................... 
.................... // Prototype
.................... void checkInOut();
.................... void upHandler();
.................... void downHandler();
.................... void enterHandler();
.................... void longEnterHandler();
.................... void displayManualMode();
.................... void displayAutomaticMode();
.................... void displayNightMode();
.................... void displaySetTimeMode();
.................... void displaySetCurrentTime();
.................... void displaySetNightTimer();
.................... void readNightTimerData();
.................... void writeNightTimerData();
.................... 
.................... #endif   /* MAIN_H */
.................... 
.................... 
.................... 
.................... #include "lcd2004.c"
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////                             lcd2004.c                             ////
.................... ////            Driver for common 4x20 LCD modules (Custom)             ////
.................... ////                                                                    ////
.................... ////  lcd_init()   Must be called before any other function.            ////
.................... ////                                                                    ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      ////
.................... ////                     The following have special meaning:            ////
.................... ////                      \f  Clear display                             ////
.................... ////                      \n  Go to start of second line                ////
.................... ////                      \b  Move back one position                    ////      
.................... ////                                                                    ////
.................... ////  lcd_prints(str)  Display str on the next position of the LCD      ////
.................... ////                                                                    ////
.................... ////  lcd_print_delay(str, ms) Display each character of str in turn    ////
.................... ////                             on the next position                   ////
.................... ////                                                                    ////
.................... ////  lcd_print_center(str, y)  Display str in the center               ////
.................... ////                                                                    ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     ////
.................... ////                                                                    ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          ////
.................... ////                                                                    ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #define MAX_X 20
.................... #define MAX_Y 4
.................... 
.................... #define LCD_DB4   PIN_D4
.................... #define LCD_DB5   PIN_D5
.................... #define LCD_DB6   PIN_D6
.................... #define LCD_DB7   PIN_D7
.................... 
.................... #define LCD_RS    PIN_E0
.................... #define LCD_RW    PIN_E1
.................... #define LCD_E     PIN_E2
.................... 
.................... /*
.................... // To prove that the driver can be used with random
.................... // pins, I also tested it with these pins:
.................... #define LCD_DB4   PIN_D4
.................... #define LCD_DB5   PIN_B1
.................... #define LCD_DB6   PIN_C5
.................... #define LCD_DB7   PIN_B5
.................... 
.................... #define LCD_RS    PIN_E2
.................... #define LCD_RW    PIN_B2
.................... #define LCD_E     PIN_D6
.................... */
.................... 
.................... // If you want only a 6-pin interface to your LCD, then
.................... // connect the R/W pin on the LCD to ground, and comment
.................... // out the following line.  Doing so will save one PIC
.................... // pin, but at the cost of losing the ability to read from
.................... // the LCD.  It also makes the write time a little longer
.................... // because a static delay must be used, instead of polling
.................... // the LCD's busy bit.  Normally a 6-pin interface is only
.................... // used if you are running out of PIC pins, and you need
.................... // to use as few as possible for the LCD.
.................... #define USE_RW_PIN   1
.................... 
.................... 
.................... // These are the line addresses for most 4x20 LCDs.
.................... #define LCD_LINE_1_ADDRESS 0x00
.................... #define LCD_LINE_2_ADDRESS 0x40
.................... #define LCD_LINE_3_ADDRESS 0x14
.................... #define LCD_LINE_4_ADDRESS 0x54
.................... 
.................... // These are the line addresses for LCD's which use
.................... // the Hitachi HD66712U controller chip.
.................... /*
.................... #define LCD_LINE_1_ADDRESS 0x00
.................... #define LCD_LINE_2_ADDRESS 0x20
.................... #define LCD_LINE_3_ADDRESS 0x40
.................... #define LCD_LINE_4_ADDRESS 0x60
.................... */
.................... 
.................... 
.................... //========================================
.................... 
.................... #define lcd_type 2   // 0=5x7, 1=5x10, 2=2 lines(or more)
.................... 
.................... 
.................... int8 lcd_line;
.................... 
.................... int8 const LCD_INIT_STRING[4] =
.................... {
....................  0x20 | (lcd_type << 2),  // Set mode: 4-bit, 2+ lines, 5x8 dots
....................  0xc,                     // Display on
....................  1,                       // Clear display
....................  6                        // Increment cursor
....................  };
.................... 
.................... 
.................... //-------------------------------------
.................... void lcd_send_nibble(int8 nibble)
.................... {
.................... // Note:  !! converts an integer expression
.................... // to a boolean (1 or 0).
....................  output_bit(LCD_DB4, !!(nibble & 1));
*
032B:  BTFSC  57.0
032C:  GOTO   32F
032D:  BCF    08.4
032E:  GOTO   330
032F:  BSF    08.4
0330:  BSF    03.5
0331:  BCF    08.4
*
035B:  BTFSC  57.0
035C:  GOTO   35F
035D:  BCF    08.4
035E:  GOTO   360
035F:  BSF    08.4
0360:  BSF    03.5
0361:  BCF    08.4
*
039F:  BTFSC  57.0
03A0:  GOTO   3A3
03A1:  BCF    08.4
03A2:  GOTO   3A4
03A3:  BSF    08.4
03A4:  BSF    03.5
03A5:  BCF    08.4
*
03D1:  BTFSC  57.0
03D2:  GOTO   3D5
03D3:  BCF    08.4
03D4:  GOTO   3D6
03D5:  BSF    08.4
03D6:  BSF    03.5
03D7:  BCF    08.4
....................  output_bit(LCD_DB5, !!(nibble & 2));
*
0332:  BCF    03.5
0333:  BTFSC  57.1
0334:  GOTO   337
0335:  BCF    08.5
0336:  GOTO   338
0337:  BSF    08.5
0338:  BSF    03.5
0339:  BCF    08.5
*
0362:  BCF    03.5
0363:  BTFSC  57.1
0364:  GOTO   367
0365:  BCF    08.5
0366:  GOTO   368
0367:  BSF    08.5
0368:  BSF    03.5
0369:  BCF    08.5
*
03A6:  BCF    03.5
03A7:  BTFSC  57.1
03A8:  GOTO   3AB
03A9:  BCF    08.5
03AA:  GOTO   3AC
03AB:  BSF    08.5
03AC:  BSF    03.5
03AD:  BCF    08.5
*
03D8:  BCF    03.5
03D9:  BTFSC  57.1
03DA:  GOTO   3DD
03DB:  BCF    08.5
03DC:  GOTO   3DE
03DD:  BSF    08.5
03DE:  BSF    03.5
03DF:  BCF    08.5
....................  output_bit(LCD_DB6, !!(nibble & 4));
*
033A:  BCF    03.5
033B:  BTFSC  57.2
033C:  GOTO   33F
033D:  BCF    08.6
033E:  GOTO   340
033F:  BSF    08.6
0340:  BSF    03.5
0341:  BCF    08.6
*
036A:  BCF    03.5
036B:  BTFSC  57.2
036C:  GOTO   36F
036D:  BCF    08.6
036E:  GOTO   370
036F:  BSF    08.6
0370:  BSF    03.5
0371:  BCF    08.6
*
03AE:  BCF    03.5
03AF:  BTFSC  57.2
03B0:  GOTO   3B3
03B1:  BCF    08.6
03B2:  GOTO   3B4
03B3:  BSF    08.6
03B4:  BSF    03.5
03B5:  BCF    08.6
*
03E0:  BCF    03.5
03E1:  BTFSC  57.2
03E2:  GOTO   3E5
03E3:  BCF    08.6
03E4:  GOTO   3E6
03E5:  BSF    08.6
03E6:  BSF    03.5
03E7:  BCF    08.6
....................  output_bit(LCD_DB7, !!(nibble & 8));
*
0342:  BCF    03.5
0343:  BTFSC  57.3
0344:  GOTO   347
0345:  BCF    08.7
0346:  GOTO   348
0347:  BSF    08.7
0348:  BSF    03.5
0349:  BCF    08.7
*
0372:  BCF    03.5
0373:  BTFSC  57.3
0374:  GOTO   377
0375:  BCF    08.7
0376:  GOTO   378
0377:  BSF    08.7
0378:  BSF    03.5
0379:  BCF    08.7
*
03B6:  BCF    03.5
03B7:  BTFSC  57.3
03B8:  GOTO   3BB
03B9:  BCF    08.7
03BA:  GOTO   3BC
03BB:  BSF    08.7
03BC:  BSF    03.5
03BD:  BCF    08.7
*
03E8:  BCF    03.5
03E9:  BTFSC  57.3
03EA:  GOTO   3ED
03EB:  BCF    08.7
03EC:  GOTO   3EE
03ED:  BSF    08.7
03EE:  BSF    03.5
03EF:  BCF    08.7
.................... 
....................  delay_cycles(1);
*
034A:  NOP
*
037A:  NOP
*
03BE:  NOP
*
03F0:  NOP
....................  output_high(LCD_E);
*
034B:  BCF    09.2
034C:  BCF    03.5
034D:  BSF    09.2
*
037B:  BCF    09.2
037C:  BCF    03.5
037D:  BSF    09.2
*
03BF:  BCF    09.2
03C0:  BCF    03.5
03C1:  BSF    09.2
*
03F1:  BCF    09.2
03F2:  BCF    03.5
03F3:  BSF    09.2
....................  delay_us(2);
*
034E:  MOVLW  03
034F:  MOVWF  77
0350:  DECFSZ 77,F
0351:  GOTO   350
*
037E:  MOVLW  03
037F:  MOVWF  77
0380:  DECFSZ 77,F
0381:  GOTO   380
*
03C2:  MOVLW  03
03C3:  MOVWF  77
03C4:  DECFSZ 77,F
03C5:  GOTO   3C4
*
03F4:  MOVLW  03
03F5:  MOVWF  77
03F6:  DECFSZ 77,F
03F7:  GOTO   3F6
....................  output_low(LCD_E);
*
0352:  BSF    03.5
0353:  BCF    09.2
0354:  BCF    03.5
0355:  BCF    09.2
*
0382:  BSF    03.5
0383:  BCF    09.2
0384:  BCF    03.5
0385:  BCF    09.2
*
03C6:  BSF    03.5
03C7:  BCF    09.2
03C8:  BCF    03.5
03C9:  BCF    09.2
*
03F8:  BSF    03.5
03F9:  BCF    09.2
03FA:  BCF    03.5
03FB:  BCF    09.2
.................... }
.................... 
.................... //-----------------------------------
.................... // This sub-routine is only called by lcd_read_byte().
.................... // It's not a stand-alone routine.  For example, the
.................... // R/W signal is set high by lcd_read_byte() before
.................... // this routine is called.
.................... 
.................... #ifdef USE_RW_PIN
.................... int8 lcd_read_nibble(void)
.................... {
.................... int8 retval;
.................... // Create bit variables so that we can easily set
.................... // individual bits in the retval variable.
.................... #bit retval_0 = retval.0
.................... #bit retval_1 = retval.1
.................... #bit retval_2 = retval.2
.................... #bit retval_3 = retval.3
.................... 
.................... retval = 0;
*
02AE:  CLRF   58
*
02D9:  CLRF   58
.................... 
.................... output_high(LCD_E);
*
02AF:  BSF    03.5
02B0:  BCF    09.2
02B1:  BCF    03.5
02B2:  BSF    09.2
*
02DA:  BSF    03.5
02DB:  BCF    09.2
02DC:  BCF    03.5
02DD:  BSF    09.2
.................... delay_us(1);
*
02B3:  GOTO   2B4
02B4:  GOTO   2B5
02B5:  NOP
*
02DE:  GOTO   2DF
02DF:  GOTO   2E0
02E0:  NOP
.................... 
.................... retval_0 = input(LCD_DB4);
*
02B6:  BSF    03.5
02B7:  BSF    08.4
02B8:  BCF    03.5
02B9:  BCF    58.0
02BA:  BTFSC  08.4
02BB:  BSF    58.0
*
02E1:  BSF    03.5
02E2:  BSF    08.4
02E3:  BCF    03.5
02E4:  BCF    58.0
02E5:  BTFSC  08.4
02E6:  BSF    58.0
.................... retval_1 = input(LCD_DB5);
*
02BC:  BSF    03.5
02BD:  BSF    08.5
02BE:  BCF    03.5
02BF:  BCF    58.1
02C0:  BTFSC  08.5
02C1:  BSF    58.1
*
02E7:  BSF    03.5
02E8:  BSF    08.5
02E9:  BCF    03.5
02EA:  BCF    58.1
02EB:  BTFSC  08.5
02EC:  BSF    58.1
.................... retval_2 = input(LCD_DB6);
*
02C2:  BSF    03.5
02C3:  BSF    08.6
02C4:  BCF    03.5
02C5:  BCF    58.2
02C6:  BTFSC  08.6
02C7:  BSF    58.2
*
02ED:  BSF    03.5
02EE:  BSF    08.6
02EF:  BCF    03.5
02F0:  BCF    58.2
02F1:  BTFSC  08.6
02F2:  BSF    58.2
.................... retval_3 = input(LCD_DB7);
*
02C8:  BSF    03.5
02C9:  BSF    08.7
02CA:  BCF    03.5
02CB:  BCF    58.3
02CC:  BTFSC  08.7
02CD:  BSF    58.3
*
02F3:  BSF    03.5
02F4:  BSF    08.7
02F5:  BCF    03.5
02F6:  BCF    58.3
02F7:  BTFSC  08.7
02F8:  BSF    58.3
.................... 
.................... output_low(LCD_E);
*
02CE:  BSF    03.5
02CF:  BCF    09.2
02D0:  BCF    03.5
02D1:  BCF    09.2
*
02F9:  BSF    03.5
02FA:  BCF    09.2
02FB:  BCF    03.5
02FC:  BCF    09.2
.................... delay_us(1);
*
02D2:  GOTO   2D3
02D3:  GOTO   2D4
02D4:  NOP
*
02FD:  GOTO   2FE
02FE:  GOTO   2FF
02FF:  NOP
.................... 
.................... return(retval);
*
02D5:  MOVF   58,W
02D6:  MOVWF  78
*
0300:  MOVF   58,W
0301:  MOVWF  78
.................... }
.................... #endif
.................... 
.................... //---------------------------------------
.................... // Read a byte from the LCD and return it.
.................... 
.................... #ifdef USE_RW_PIN
.................... int8 lcd_read_byte(void)
.................... {
.................... int8 low;
.................... int8 high;
.................... 
.................... output_high(LCD_RW);
*
02A9:  BSF    03.5
02AA:  BCF    09.1
02AB:  BCF    03.5
02AC:  BSF    09.1
.................... delay_cycles(1);
02AD:  NOP
.................... 
.................... high = lcd_read_nibble();
*
02D7:  MOVF   78,W
02D8:  MOVWF  57
.................... 
.................... low = lcd_read_nibble();
*
0302:  MOVF   78,W
0303:  MOVWF  56
.................... 
.................... return( (high<<4) | low);
0304:  SWAPF  57,W
0305:  MOVWF  77
0306:  MOVLW  F0
0307:  ANDWF  77,F
0308:  MOVF   77,W
0309:  IORWF  56,W
030A:  MOVWF  78
.................... }
.................... #endif
.................... 
.................... //----------------------------------------
.................... // Send a byte to the LCD.
.................... void lcd_send_byte(int8 address, int8 n)
.................... {
.................... output_low(LCD_RS);
*
02A5:  BSF    03.5
02A6:  BCF    09.0
02A7:  BCF    03.5
02A8:  BCF    09.0
.................... 
.................... #ifdef USE_RW_PIN
.................... while(bit_test(lcd_read_byte(),7)) ;
*
030B:  MOVF   78,W
030C:  MOVWF  56
030D:  BTFSC  56.7
030E:  GOTO   2A9
.................... #else
.................... delay_us(60);
.................... #endif
.................... 
.................... if(address)
030F:  MOVF   54,F
0310:  BTFSC  03.2
0311:  GOTO   317
....................    output_high(LCD_RS);
0312:  BSF    03.5
0313:  BCF    09.0
0314:  BCF    03.5
0315:  BSF    09.0
0316:  GOTO   31B
.................... else
....................    output_low(LCD_RS);
0317:  BSF    03.5
0318:  BCF    09.0
0319:  BCF    03.5
031A:  BCF    09.0
.................... 
....................  delay_cycles(1);
031B:  NOP
.................... 
.................... #ifdef USE_RW_PIN
.................... output_low(LCD_RW);
031C:  BSF    03.5
031D:  BCF    09.1
031E:  BCF    03.5
031F:  BCF    09.1
.................... delay_cycles(1);
0320:  NOP
.................... #endif
.................... 
.................... output_low(LCD_E);
0321:  BSF    03.5
0322:  BCF    09.2
0323:  BCF    03.5
0324:  BCF    09.2
.................... 
.................... lcd_send_nibble(n >> 4);
0325:  SWAPF  55,W
0326:  MOVWF  56
0327:  MOVLW  0F
0328:  ANDWF  56,F
0329:  MOVF   56,W
032A:  MOVWF  57
.................... lcd_send_nibble(n & 0xf);
*
0356:  MOVF   55,W
0357:  ANDLW  0F
0358:  MOVWF  56
0359:  MOVF   56,W
035A:  MOVWF  57
*
0386:  RETURN
.................... }
.................... //----------------------------
.................... 
.................... void lcd_init(void)
.................... {
.................... int8 i;
.................... 
.................... lcd_line = 1;
0387:  MOVLW  01
0388:  MOVWF  2C
.................... 
.................... output_low(LCD_RS);
0389:  BSF    03.5
038A:  BCF    09.0
038B:  BCF    03.5
038C:  BCF    09.0
.................... 
.................... #ifdef USE_RW_PIN
.................... output_low(LCD_RW);
038D:  BSF    03.5
038E:  BCF    09.1
038F:  BCF    03.5
0390:  BCF    09.1
.................... #endif
.................... 
.................... output_low(LCD_E);
0391:  BSF    03.5
0392:  BCF    09.2
0393:  BCF    03.5
0394:  BCF    09.2
.................... 
.................... // Some LCDs require 15 ms minimum delay after
.................... // power-up.  Others require 30 ms.  I'm going
.................... // to set it to 35 ms, so it should work with
.................... // all of them.
.................... delay_ms(35);
0395:  MOVLW  23
0396:  MOVWF  50
0397:  CALL   291
.................... 
.................... for(i=0 ;i < 3; i++)
0398:  CLRF   49
0399:  MOVF   49,W
039A:  SUBLW  02
039B:  BTFSS  03.0
039C:  GOTO   3CF
....................    {
....................     lcd_send_nibble(0x03);
039D:  MOVLW  03
039E:  MOVWF  57
....................     delay_ms(5);
*
03CA:  MOVLW  05
03CB:  MOVWF  50
03CC:  CALL   291
03CD:  INCF   49,F
03CE:  GOTO   399
....................    }
.................... 
.................... lcd_send_nibble(0x02);
03CF:  MOVLW  02
03D0:  MOVWF  57
.................... 
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++)
*
03FC:  CLRF   49
03FD:  MOVF   49,W
03FE:  SUBLW  03
03FF:  BTFSS  03.0
0400:  GOTO   40A
....................    {
....................     lcd_send_byte(0, LCD_INIT_STRING[i]);
0401:  MOVF   49,W
0402:  CALL   051
0403:  MOVWF  4A
0404:  CLRF   54
0405:  MOVF   4A,W
0406:  MOVWF  55
0407:  CALL   2A5
.................... 
....................     // If the R/W signal is not used, then
....................     // the busy bit can't be polled.  One of
....................     // the init commands takes longer than
....................     // the hard-coded delay of 50 us, so in
....................     // that case, lets just do a 5 ms delay
....................     // after all four of them.
....................     #ifndef USE_RW_PIN
0408:  INCF   49,F
0409:  GOTO   3FD
....................     delay_ms(5);
....................     #endif
....................    }
040A:  BSF    0A.3
040B:  BCF    0A.4
040C:  GOTO   3D1 (RETURN)
.................... 
.................... }
.................... 
.................... //----------------------------
.................... 
.................... void lcd_gotoxy(int8 x, int8 y)
.................... {
.................... int8 address;
.................... 
.................... 
.................... switch(y)
040D:  MOVF   51,W
040E:  XORLW  01
040F:  BTFSC  03.2
0410:  GOTO   41B
0411:  XORLW  03
0412:  BTFSC  03.2
0413:  GOTO   41D
0414:  XORLW  01
0415:  BTFSC  03.2
0416:  GOTO   420
0417:  XORLW  07
0418:  BTFSC  03.2
0419:  GOTO   423
041A:  GOTO   426
....................   {
....................    case 1:
....................      address = LCD_LINE_1_ADDRESS;
041B:  CLRF   52
....................      break;
041C:  GOTO   427
.................... 
....................    case 2:
....................      address = LCD_LINE_2_ADDRESS;
041D:  MOVLW  40
041E:  MOVWF  52
....................      break;
041F:  GOTO   427
.................... 
....................    case 3:
....................      address = LCD_LINE_3_ADDRESS;
0420:  MOVLW  14
0421:  MOVWF  52
....................      break;
0422:  GOTO   427
.................... 
....................    case 4:
....................      address = LCD_LINE_4_ADDRESS;
0423:  MOVLW  54
0424:  MOVWF  52
....................      break;
0425:  GOTO   427
.................... 
....................    default:
....................      address = LCD_LINE_1_ADDRESS;
0426:  CLRF   52
....................      break;
.................... 
....................   }
.................... 
.................... address += x-1;
0427:  MOVLW  01
0428:  SUBWF  50,W
0429:  ADDWF  52,F
.................... lcd_send_byte(0, 0x80 | address);
042A:  MOVF   52,W
042B:  IORLW  80
042C:  MOVWF  53
042D:  CLRF   54
042E:  MOVF   53,W
042F:  MOVWF  55
0430:  CALL   2A5
0431:  RETURN
.................... }
.................... 
.................... //-----------------------------
.................... void lcd_putc(char c)
.................... {
....................  switch(c)
0432:  MOVF   4F,W
0433:  XORLW  0C
0434:  BTFSC  03.2
0435:  GOTO   43D
0436:  XORLW  06
0437:  BTFSC  03.2
0438:  GOTO   447
0439:  XORLW  02
043A:  BTFSC  03.2
043B:  GOTO   44E
043C:  GOTO   453
....................    {
....................     case '\f':
....................       lcd_send_byte(0,1);
043D:  CLRF   54
043E:  MOVLW  01
043F:  MOVWF  55
0440:  CALL   2A5
....................       lcd_line = 1;
0441:  MOVLW  01
0442:  MOVWF  2C
....................       delay_ms(2);
0443:  MOVLW  02
0444:  MOVWF  50
0445:  CALL   291
....................       break;
0446:  GOTO   458
.................... 
....................     case '\n':
....................        lcd_gotoxy(1, ++lcd_line);
0447:  INCF   2C,F
0448:  MOVLW  01
0449:  MOVWF  50
044A:  MOVF   2C,W
044B:  MOVWF  51
044C:  CALL   40D
....................        break;
044D:  GOTO   458
.................... 
....................     case '\b':
....................        lcd_send_byte(0,0x10);
044E:  CLRF   54
044F:  MOVLW  10
0450:  MOVWF  55
0451:  CALL   2A5
....................        break;
0452:  GOTO   458
.................... 
....................     default:
....................        lcd_send_byte(1,c);
0453:  MOVLW  01
0454:  MOVWF  54
0455:  MOVF   4F,W
0456:  MOVWF  55
0457:  CALL   2A5
....................        break;
....................    }
0458:  RETURN
.................... }
.................... 
.................... //------------------------------
.................... void lcd_prints(char* str) {
....................    printf(lcd_putc, str);
.................... }
.................... 
.................... //------------------------------
.................... void lcd_prints_delay(char* str, int16 ms) {
....................    for (char* sc = str; *sc != 0; sc++) {
....................       lcd_putc(*sc);
....................       delay_ms(ms);
....................    }
.................... }
.................... 
.................... //------------------------------
.................... void lcd_print_center(char* str, int8 y) {
....................    char *sc;
....................    for (sc = str; *sc != 0; sc++);
....................    int8 length = sc - str;
....................    lcd_gotoxy((MAX_X - length) / 2, y);
....................    printf(lcd_putc, str);
.................... }
.................... 
.................... //------------------------------
.................... #ifdef USE_RW_PIN
.................... char lcd_getc(int8 x, int8 y)
.................... {
.................... char value;
.................... 
.................... lcd_gotoxy(x,y);
.................... 
.................... // Wait until busy flag is low.
.................... while(bit_test(lcd_read_byte(),7));
.................... 
.................... output_high(LCD_RS);
.................... value = lcd_read_byte();
.................... output_low(LCD_RS);
.................... 
.................... return(value);
.................... }
.................... #endif
.................... 
.................... 
.................... 
.................... #include "ds1307.c"
.................... BYTE bin2bcd(BYTE binary_value);
.................... BYTE bcd2bin(BYTE bcd_value);
.................... 
.................... void ds1307_init(void) 
*
04D5:  CLRF   49
04D6:  CLRF   4A
04D7:  CLRF   4B
04D8:  CLRF   4C
04D9:  CLRF   4D
04DA:  CLRF   4E
04DB:  CLRF   4F
.................... { 
....................    BYTE initsec = 0;
....................    BYTE initmin=0;
....................    BYTE inithr=0;                  
....................    BYTE initdow=0;
....................    BYTE initday=0;                   
....................    BYTE initmth=0;
....................    BYTE inityear=0;
....................    i2c_start(); 
04DC:  BSF    03.5
04DD:  BSF    11.0
04DE:  BTFSC  11.0
04DF:  GOTO   4DE
....................    i2c_write(0xD0);      // WR to RTC 
04E0:  MOVLW  D0
04E1:  BCF    03.5
04E2:  MOVWF  51
04E3:  CALL   459
....................    i2c_write(0x00);      // REG 0 
04E4:  CLRF   51
04E5:  CALL   459
....................    i2c_start(); 
04E6:  BSF    03.5
04E7:  BSF    11.1
04E8:  BTFSC  11.1
04E9:  GOTO   4E8
....................    i2c_write(0xD1);      // RD from RTC 
04EA:  MOVLW  D1
04EB:  BCF    03.5
04EC:  MOVWF  51
04ED:  CALL   459
....................    initsec  = bcd2bin(i2c_read() & 0x7f); 
04EE:  MOVLW  01
04EF:  MOVWF  77
04F0:  CALL   469
04F1:  MOVF   78,W
04F2:  ANDLW  7F
04F3:  MOVWF  50
04F4:  MOVWF  51
04F5:  CALL   479
04F6:  MOVF   78,W
04F7:  MOVWF  49
....................    initmin  = bcd2bin(i2c_read() & 0x7f); 
04F8:  MOVLW  01
04F9:  MOVWF  77
04FA:  CALL   469
04FB:  MOVF   78,W
04FC:  ANDLW  7F
04FD:  MOVWF  50
04FE:  MOVWF  51
04FF:  CALL   479
0500:  MOVF   78,W
0501:  MOVWF  4A
....................    inithr   = bcd2bin(i2c_read() & 0x3f); 
0502:  MOVLW  01
0503:  MOVWF  77
0504:  CALL   469
0505:  MOVF   78,W
0506:  ANDLW  3F
0507:  MOVWF  50
0508:  MOVWF  51
0509:  CALL   479
050A:  MOVF   78,W
050B:  MOVWF  4B
....................    initdow  = bcd2bin(i2c_read() & 0x7f);   // REG 3 
050C:  MOVLW  01
050D:  MOVWF  77
050E:  CALL   469
050F:  MOVF   78,W
0510:  ANDLW  7F
0511:  MOVWF  50
0512:  MOVWF  51
0513:  CALL   479
0514:  MOVF   78,W
0515:  MOVWF  4C
....................    initday  = bcd2bin(i2c_read() & 0x3f);   // REG 4 
0516:  MOVLW  01
0517:  MOVWF  77
0518:  CALL   469
0519:  MOVF   78,W
051A:  ANDLW  3F
051B:  MOVWF  50
051C:  MOVWF  51
051D:  CALL   479
051E:  MOVF   78,W
051F:  MOVWF  4D
....................    initmth  = bcd2bin(i2c_read() & 0x1f);   // REG 5 
0520:  MOVLW  01
0521:  MOVWF  77
0522:  CALL   469
0523:  MOVF   78,W
0524:  ANDLW  1F
0525:  MOVWF  50
0526:  MOVWF  51
0527:  CALL   479
0528:  MOVF   78,W
0529:  MOVWF  4E
....................    inityear = bcd2bin(i2c_read(0));         // REG 6 
052A:  CLRF   77
052B:  CALL   469
052C:  MOVF   78,W
052D:  MOVWF  50
052E:  MOVWF  51
052F:  CALL   479
0530:  MOVF   78,W
0531:  MOVWF  4F
....................    i2c_stop(); 
0532:  BSF    03.5
0533:  BSF    11.2
0534:  BTFSC  11.2
0535:  GOTO   534
....................    delay_us(3);
0536:  MOVLW  04
0537:  MOVWF  77
0538:  DECFSZ 77,F
0539:  GOTO   538
053A:  GOTO   53B
....................    
....................    i2c_start(); 
053B:  BSF    11.0
053C:  BTFSC  11.0
053D:  GOTO   53C
....................    i2c_write(0xD0);      // WR to RTC 
053E:  MOVLW  D0
053F:  BCF    03.5
0540:  MOVWF  51
0541:  CALL   459
....................    i2c_write(0x00);      // REG 0 
0542:  CLRF   51
0543:  CALL   459
....................    i2c_write(bin2bcd(initsec));      // Start oscillator with current "seconds value 
0544:  MOVF   49,W
0545:  MOVWF  50
0546:  CALL   4C3
0547:  MOVF   78,W
0548:  MOVWF  50
0549:  MOVWF  51
054A:  CALL   459
....................    i2c_write(bin2bcd(initmin));      // REG 1 
054B:  MOVF   4A,W
054C:  MOVWF  50
054D:  CALL   4C3
054E:  MOVF   78,W
054F:  MOVWF  50
0550:  MOVWF  51
0551:  CALL   459
....................    i2c_write(bin2bcd(inithr));       // REG 2 
0552:  MOVF   4B,W
0553:  MOVWF  50
0554:  CALL   4C3
0555:  MOVF   78,W
0556:  MOVWF  50
0557:  MOVWF  51
0558:  CALL   459
....................    i2c_write(bin2bcd(initdow));      // REG 3 
0559:  MOVF   4C,W
055A:  MOVWF  50
055B:  CALL   4C3
055C:  MOVF   78,W
055D:  MOVWF  50
055E:  MOVWF  51
055F:  CALL   459
....................    i2c_write(bin2bcd(initday));      // REG 4 
0560:  MOVF   4D,W
0561:  MOVWF  50
0562:  CALL   4C3
0563:  MOVF   78,W
0564:  MOVWF  50
0565:  MOVWF  51
0566:  CALL   459
....................    i2c_write(bin2bcd(initmth));      // REG 5 
0567:  MOVF   4E,W
0568:  MOVWF  50
0569:  CALL   4C3
056A:  MOVF   78,W
056B:  MOVWF  50
056C:  MOVWF  51
056D:  CALL   459
....................    i2c_write(bin2bcd(inityear));     // REG 6 
056E:  MOVF   4F,W
056F:  MOVWF  50
0570:  CALL   4C3
0571:  MOVF   78,W
0572:  MOVWF  50
0573:  MOVWF  51
0574:  CALL   459
....................    i2c_start(); 
0575:  BSF    03.5
0576:  BSF    11.1
0577:  BTFSC  11.1
0578:  GOTO   577
....................    i2c_write(0xD0);      // WR to RTC 
0579:  MOVLW  D0
057A:  BCF    03.5
057B:  MOVWF  51
057C:  CALL   459
....................    i2c_write(0x07);      // Control Register 
057D:  MOVLW  07
057E:  MOVWF  51
057F:  CALL   459
....................    i2c_stop(); 
0580:  BSF    03.5
0581:  BSF    11.2
0582:  BTFSC  11.2
0583:  GOTO   582
0584:  BCF    03.5
0585:  BSF    0A.3
0586:  BCF    0A.4
0587:  GOTO   3D9 (RETURN)
.................... 
.................... } 
.................... 
.................... void ds1307_set_date_time(BYTE day, BYTE mth, BYTE year, BYTE dow, BYTE hr, BYTE min, BYTE sec)
.................... {
....................    sec &= 0x7F;
....................    hr &= 0x3F;
....................    
....................    i2c_start();
....................    i2c_write(0xD0);              // I2C write address
....................    i2c_write(0x00);              // Start at REG 0 - Seconds
....................    i2c_write(bin2bcd(sec));      // REG 0
....................    i2c_write(bin2bcd(min));      // REG 1
....................    i2c_write(bin2bcd(hr));       // REG 2
....................    i2c_write(bin2bcd(dow));      // REG 3
....................    i2c_write(bin2bcd(day));      // REG 4
....................    i2c_write(bin2bcd(mth));      // REG 5
....................    i2c_write(bin2bcd(year));     // REG 6
....................    i2c_stop();
.................... }
.................... 
.................... void ds1307_set_date(BYTE day, BYTE mth, BYTE year, BYTE dow) {
....................    i2c_start();
....................    i2c_write(0xD0);              // I2C write address
....................    i2c_write(0x03);              // Start at REG 3 - Seconds
....................    i2c_write(bin2bcd(dow));      // REG 3
....................    i2c_write(bin2bcd(day));      // REG 4
....................    i2c_write(bin2bcd(mth));      // REG 5
....................    i2c_write(bin2bcd(year));     // REG 6
....................    i2c_stop();
.................... }
.................... 
.................... void ds1307_set_time(BYTE hr, BYTE min, BYTE sec) {
....................    sec &= 0x7F;
*
0800:  BCF    4B.7
....................    hr &= 0x3F;
0801:  MOVLW  3F
0802:  ANDWF  49,F
.................... 
....................    i2c_start();
0803:  BSF    03.5
0804:  BSF    11.0
0805:  BTFSC  11.0
0806:  GOTO   005
....................    i2c_write(0xD0);              // I2C write address
0807:  MOVLW  D0
0808:  BCF    03.5
0809:  MOVWF  51
080A:  BCF    0A.3
080B:  CALL   459
080C:  BSF    0A.3
....................    i2c_write(0x00);              // Start at REG 0 - Seconds
080D:  CLRF   51
080E:  BCF    0A.3
080F:  CALL   459
0810:  BSF    0A.3
....................    i2c_write(bin2bcd(sec));      // REG 0
0811:  MOVF   4B,W
0812:  MOVWF  50
0813:  BCF    0A.3
0814:  CALL   4C3
0815:  BSF    0A.3
0816:  MOVF   78,W
0817:  MOVWF  4C
0818:  MOVWF  51
0819:  BCF    0A.3
081A:  CALL   459
081B:  BSF    0A.3
....................    i2c_write(bin2bcd(min));      // REG 1
081C:  MOVF   4A,W
081D:  MOVWF  50
081E:  BCF    0A.3
081F:  CALL   4C3
0820:  BSF    0A.3
0821:  MOVF   78,W
0822:  MOVWF  4C
0823:  MOVWF  51
0824:  BCF    0A.3
0825:  CALL   459
0826:  BSF    0A.3
....................    i2c_write(bin2bcd(hr));       // REG 2
0827:  MOVF   49,W
0828:  MOVWF  50
0829:  BCF    0A.3
082A:  CALL   4C3
082B:  BSF    0A.3
082C:  MOVF   78,W
082D:  MOVWF  4C
082E:  MOVWF  51
082F:  BCF    0A.3
0830:  CALL   459
0831:  BSF    0A.3
....................    i2c_write(0x90);              // REG 7 - 1Hz squarewave output pin
0832:  MOVLW  90
0833:  MOVWF  51
0834:  BCF    0A.3
0835:  CALL   459
0836:  BSF    0A.3
....................    i2c_stop();
0837:  BSF    03.5
0838:  BSF    11.2
0839:  BTFSC  11.2
083A:  GOTO   039
083B:  BCF    03.5
083C:  BSF    0A.3
083D:  BCF    0A.4
083E:  GOTO   4F3 (RETURN)
.................... }
.................... 
.................... void ds1307_get_date(BYTE &day, BYTE &mth, BYTE &year, BYTE &dow)
.................... {
....................    i2c_start();
....................    i2c_write(0xD0);
....................    i2c_write(0x03);              // Start at REG 3 - Day of week
....................    i2c_start();
....................    i2c_write(0xD1);
....................    dow  = bcd2bin(i2c_read() & 0x7f);   // REG 3
....................    day  = bcd2bin(i2c_read() & 0x3f);   // REG 4
....................    mth  = bcd2bin(i2c_read() & 0x1f);   // REG 5
....................    year = bcd2bin(i2c_read(0));         // REG 6
....................    i2c_stop();
.................... }
.................... 
.................... void ds1307_get_time(BYTE &hr, BYTE &min, BYTE &sec)
.................... {
....................    i2c_start();
*
0BDA:  BSF    03.5
0BDB:  BSF    11.0
0BDC:  BTFSC  11.0
0BDD:  GOTO   3DC
*
0C87:  BSF    03.5
0C88:  BSF    11.0
0C89:  BTFSC  11.0
0C8A:  GOTO   489
*
0CF4:  BSF    03.5
0CF5:  BSF    11.0
0CF6:  BTFSC  11.0
0CF7:  GOTO   4F6
*
0D51:  BSF    03.5
0D52:  BSF    11.0
0D53:  BTFSC  11.0
0D54:  GOTO   553
*
0DA5:  BSF    03.5
0DA6:  BSF    11.0
0DA7:  BTFSC  11.0
0DA8:  GOTO   5A7
....................    i2c_write(0xD0);
*
0BDE:  MOVLW  D0
0BDF:  BCF    03.5
0BE0:  MOVWF  51
0BE1:  BCF    0A.3
0BE2:  CALL   459
0BE3:  BSF    0A.3
*
0C8B:  MOVLW  D0
0C8C:  BCF    03.5
0C8D:  MOVWF  51
0C8E:  BCF    0A.3
0C8F:  CALL   459
0C90:  BSF    0A.3
*
0CF8:  MOVLW  D0
0CF9:  BCF    03.5
0CFA:  MOVWF  51
0CFB:  BCF    0A.3
0CFC:  CALL   459
0CFD:  BSF    0A.3
*
0D55:  MOVLW  D0
0D56:  BCF    03.5
0D57:  MOVWF  51
0D58:  BCF    0A.3
0D59:  CALL   459
0D5A:  BSF    0A.3
*
0DA9:  MOVLW  D0
0DAA:  BCF    03.5
0DAB:  MOVWF  51
0DAC:  BCF    0A.3
0DAD:  CALL   459
0DAE:  BSF    0A.3
....................    i2c_write(0x00);                     // Start at REG 0 - Seconds
*
0BE4:  CLRF   51
0BE5:  BCF    0A.3
0BE6:  CALL   459
0BE7:  BSF    0A.3
*
0C91:  CLRF   51
0C92:  BCF    0A.3
0C93:  CALL   459
0C94:  BSF    0A.3
*
0CFE:  CLRF   51
0CFF:  BCF    0A.3
0D00:  CALL   459
0D01:  BSF    0A.3
*
0D5B:  CLRF   51
0D5C:  BCF    0A.3
0D5D:  CALL   459
0D5E:  BSF    0A.3
*
0DAF:  CLRF   51
0DB0:  BCF    0A.3
0DB1:  CALL   459
0DB2:  BSF    0A.3
....................    i2c_start();
*
0BE8:  BSF    03.5
0BE9:  BSF    11.1
0BEA:  BTFSC  11.1
0BEB:  GOTO   3EA
*
0C95:  BSF    03.5
0C96:  BSF    11.1
0C97:  BTFSC  11.1
0C98:  GOTO   497
*
0D02:  BSF    03.5
0D03:  BSF    11.1
0D04:  BTFSC  11.1
0D05:  GOTO   504
*
0D5F:  BSF    03.5
0D60:  BSF    11.1
0D61:  BTFSC  11.1
0D62:  GOTO   561
*
0DB3:  BSF    03.5
0DB4:  BSF    11.1
0DB5:  BTFSC  11.1
0DB6:  GOTO   5B5
....................    i2c_write(0xD1);
*
0BEC:  MOVLW  D1
0BED:  BCF    03.5
0BEE:  MOVWF  51
0BEF:  BCF    0A.3
0BF0:  CALL   459
0BF1:  BSF    0A.3
*
0C99:  MOVLW  D1
0C9A:  BCF    03.5
0C9B:  MOVWF  51
0C9C:  BCF    0A.3
0C9D:  CALL   459
0C9E:  BSF    0A.3
*
0D06:  MOVLW  D1
0D07:  BCF    03.5
0D08:  MOVWF  51
0D09:  BCF    0A.3
0D0A:  CALL   459
0D0B:  BSF    0A.3
*
0D63:  MOVLW  D1
0D64:  BCF    03.5
0D65:  MOVWF  51
0D66:  BCF    0A.3
0D67:  CALL   459
0D68:  BSF    0A.3
*
0DB7:  MOVLW  D1
0DB8:  BCF    03.5
0DB9:  MOVWF  51
0DBA:  BCF    0A.3
0DBB:  CALL   459
0DBC:  BSF    0A.3
....................    sec = bcd2bin(i2c_read() & 0x7f);
*
0BF2:  MOVLW  01
0BF3:  MOVWF  77
0BF4:  BCF    0A.3
0BF5:  CALL   469
0BF6:  BSF    0A.3
0BF7:  MOVF   78,W
0BF8:  ANDLW  7F
0BF9:  MOVWF  49
0BFA:  MOVWF  51
0BFB:  BCF    0A.3
0BFC:  CALL   479
0BFD:  BSF    0A.3
0BFE:  MOVF   78,W
0BFF:  MOVWF  37
*
0C9F:  MOVLW  01
0CA0:  MOVWF  77
0CA1:  BCF    0A.3
0CA2:  CALL   469
0CA3:  BSF    0A.3
0CA4:  MOVF   78,W
0CA5:  ANDLW  7F
0CA6:  MOVWF  49
0CA7:  MOVWF  51
0CA8:  BCF    0A.3
0CA9:  CALL   479
0CAA:  BSF    0A.3
0CAB:  MOVF   78,W
0CAC:  MOVWF  37
*
0D0C:  MOVLW  01
0D0D:  MOVWF  77
0D0E:  BCF    0A.3
0D0F:  CALL   469
0D10:  BSF    0A.3
0D11:  MOVF   78,W
0D12:  ANDLW  7F
0D13:  MOVWF  49
0D14:  MOVWF  51
0D15:  BCF    0A.3
0D16:  CALL   479
0D17:  BSF    0A.3
0D18:  MOVF   78,W
0D19:  MOVWF  37
*
0D69:  MOVLW  01
0D6A:  MOVWF  77
0D6B:  BCF    0A.3
0D6C:  CALL   469
0D6D:  BSF    0A.3
0D6E:  MOVF   78,W
0D6F:  ANDLW  7F
0D70:  MOVWF  49
0D71:  MOVWF  51
0D72:  BCF    0A.3
0D73:  CALL   479
0D74:  BSF    0A.3
0D75:  MOVF   78,W
0D76:  MOVWF  37
*
0DBD:  MOVLW  01
0DBE:  MOVWF  77
0DBF:  BCF    0A.3
0DC0:  CALL   469
0DC1:  BSF    0A.3
0DC2:  MOVF   78,W
0DC3:  ANDLW  7F
0DC4:  MOVWF  49
0DC5:  MOVWF  51
0DC6:  BCF    0A.3
0DC7:  CALL   479
0DC8:  BSF    0A.3
0DC9:  MOVF   78,W
0DCA:  MOVWF  37
....................    min = bcd2bin(i2c_read() & 0x7f);
*
0C00:  MOVLW  01
0C01:  MOVWF  77
0C02:  BCF    0A.3
0C03:  CALL   469
0C04:  BSF    0A.3
0C05:  MOVF   78,W
0C06:  ANDLW  7F
0C07:  MOVWF  49
0C08:  MOVWF  51
0C09:  BCF    0A.3
0C0A:  CALL   479
0C0B:  BSF    0A.3
0C0C:  MOVF   78,W
0C0D:  MOVWF  36
*
0CAD:  MOVLW  01
0CAE:  MOVWF  77
0CAF:  BCF    0A.3
0CB0:  CALL   469
0CB1:  BSF    0A.3
0CB2:  MOVF   78,W
0CB3:  ANDLW  7F
0CB4:  MOVWF  49
0CB5:  MOVWF  51
0CB6:  BCF    0A.3
0CB7:  CALL   479
0CB8:  BSF    0A.3
0CB9:  MOVF   78,W
0CBA:  MOVWF  36
*
0D1A:  MOVLW  01
0D1B:  MOVWF  77
0D1C:  BCF    0A.3
0D1D:  CALL   469
0D1E:  BSF    0A.3
0D1F:  MOVF   78,W
0D20:  ANDLW  7F
0D21:  MOVWF  49
0D22:  MOVWF  51
0D23:  BCF    0A.3
0D24:  CALL   479
0D25:  BSF    0A.3
0D26:  MOVF   78,W
0D27:  MOVWF  36
*
0D77:  MOVLW  01
0D78:  MOVWF  77
0D79:  BCF    0A.3
0D7A:  CALL   469
0D7B:  BSF    0A.3
0D7C:  MOVF   78,W
0D7D:  ANDLW  7F
0D7E:  MOVWF  49
0D7F:  MOVWF  51
0D80:  BCF    0A.3
0D81:  CALL   479
0D82:  BSF    0A.3
0D83:  MOVF   78,W
0D84:  MOVWF  36
*
0DCB:  MOVLW  01
0DCC:  MOVWF  77
0DCD:  BCF    0A.3
0DCE:  CALL   469
0DCF:  BSF    0A.3
0DD0:  MOVF   78,W
0DD1:  ANDLW  7F
0DD2:  MOVWF  49
0DD3:  MOVWF  51
0DD4:  BCF    0A.3
0DD5:  CALL   479
0DD6:  BSF    0A.3
0DD7:  MOVF   78,W
0DD8:  MOVWF  36
....................    hr  = bcd2bin(i2c_read(0) & 0x3f);
*
0C0E:  CLRF   77
0C0F:  BCF    0A.3
0C10:  CALL   469
0C11:  BSF    0A.3
0C12:  MOVF   78,W
0C13:  ANDLW  3F
0C14:  MOVWF  49
0C15:  MOVWF  51
0C16:  BCF    0A.3
0C17:  CALL   479
0C18:  BSF    0A.3
0C19:  MOVF   78,W
0C1A:  MOVWF  35
*
0CBB:  CLRF   77
0CBC:  BCF    0A.3
0CBD:  CALL   469
0CBE:  BSF    0A.3
0CBF:  MOVF   78,W
0CC0:  ANDLW  3F
0CC1:  MOVWF  49
0CC2:  MOVWF  51
0CC3:  BCF    0A.3
0CC4:  CALL   479
0CC5:  BSF    0A.3
0CC6:  MOVF   78,W
0CC7:  MOVWF  35
*
0D28:  CLRF   77
0D29:  BCF    0A.3
0D2A:  CALL   469
0D2B:  BSF    0A.3
0D2C:  MOVF   78,W
0D2D:  ANDLW  3F
0D2E:  MOVWF  49
0D2F:  MOVWF  51
0D30:  BCF    0A.3
0D31:  CALL   479
0D32:  BSF    0A.3
0D33:  MOVF   78,W
0D34:  MOVWF  35
*
0D85:  CLRF   77
0D86:  BCF    0A.3
0D87:  CALL   469
0D88:  BSF    0A.3
0D89:  MOVF   78,W
0D8A:  ANDLW  3F
0D8B:  MOVWF  49
0D8C:  MOVWF  51
0D8D:  BCF    0A.3
0D8E:  CALL   479
0D8F:  BSF    0A.3
0D90:  MOVF   78,W
0D91:  MOVWF  35
*
0DD9:  CLRF   77
0DDA:  BCF    0A.3
0DDB:  CALL   469
0DDC:  BSF    0A.3
0DDD:  MOVF   78,W
0DDE:  ANDLW  3F
0DDF:  MOVWF  49
0DE0:  MOVWF  51
0DE1:  BCF    0A.3
0DE2:  CALL   479
0DE3:  BSF    0A.3
0DE4:  MOVF   78,W
0DE5:  MOVWF  35
....................    i2c_stop();
*
0C1B:  BSF    03.5
0C1C:  BSF    11.2
0C1D:  BTFSC  11.2
0C1E:  GOTO   41D
*
0CC8:  BSF    03.5
0CC9:  BSF    11.2
0CCA:  BTFSC  11.2
0CCB:  GOTO   4CA
*
0D35:  BSF    03.5
0D36:  BSF    11.2
0D37:  BTFSC  11.2
0D38:  GOTO   537
*
0D92:  BSF    03.5
0D93:  BSF    11.2
0D94:  BTFSC  11.2
0D95:  GOTO   594
*
0DE6:  BSF    03.5
0DE7:  BSF    11.2
0DE8:  BTFSC  11.2
0DE9:  GOTO   5E8
.................... 
.................... }
.................... 
.................... void ds1307_write_data(BYTE address, BYTE data) {
....................   i2c_start();
....................   i2c_write(0xD0);          
....................   i2c_write(address);              
....................   i2c_write(data);
....................   i2c_stop();
.................... }
.................... 
.................... void ds1307_read_data(BYTE address, BYTE &data) {
....................   i2c_start();
....................   i2c_write(0xD0);
....................   i2c_write(address);
....................   i2c_start();
....................   i2c_write(0xD1);
....................   data = i2c_read();
....................   i2c_stop();
.................... }
.................... 
.................... BYTE bin2bcd(BYTE binary_value)
.................... {
....................   return (binary_value / 10) * 16 + (binary_value % 10);
*
04C3:  MOVF   50,W
04C4:  MOVWF  52
04C5:  MOVLW  0A
04C6:  MOVWF  53
04C7:  CALL   4AE
04C8:  SWAPF  78,W
04C9:  MOVWF  51
04CA:  MOVLW  F0
04CB:  ANDWF  51,F
04CC:  MOVF   50,W
04CD:  MOVWF  52
04CE:  MOVLW  0A
04CF:  MOVWF  53
04D0:  CALL   4AE
04D1:  MOVF   77,W
04D2:  ADDWF  51,W
04D3:  MOVWF  78
04D4:  RETURN
.................... }
.................... 
.................... 
.................... // Input range - 00 to 99.
.................... BYTE bcd2bin(BYTE bcd_value)
.................... {
....................   return (bcd_value / 16) * 10 + (bcd_value % 16);
*
0479:  SWAPF  51,W
047A:  MOVWF  77
047B:  MOVLW  0F
047C:  ANDWF  77,F
047D:  MOVF   77,W
047E:  MOVWF  53
047F:  MOVF   53,W
0480:  MOVWF  54
0481:  MOVLW  0A
0482:  MOVWF  55
*
04A7:  MOVF   78,W
04A8:  MOVWF  52
04A9:  MOVF   51,W
04AA:  ANDLW  0F
04AB:  ADDWF  78,W
04AC:  MOVWF  78
04AD:  RETURN
.................... } 
.................... 
.................... 
.................... 
.................... volatile mode_t mode = manual;
.................... mode_t prevMode = manual;
.................... volatile setTime_t setTime;
.................... volatile int1 hasChange = 0;
.................... volatile time_t currentTime;
.................... volatile timer_t nightTimer;
.................... int1 IR1_flag = 0;
.................... int1 IR2_flag = 0;
.................... signed int8 person = 1;
.................... volatile int8 ledin_count = 0;
.................... volatile int8 ledout_count = 0;
.................... volatile int8 menu_count = 0;
.................... volatile int8 enter_count = 0;
.................... volatile int8 up_count = 0;
.................... volatile int8 down_count = 0;
.................... volatile int8 light_count = 0;
.................... volatile int8 h_PIR_count = 0;
.................... volatile int8 l_PIR_count = 0;
.................... volatile int1 blink_state = 1;
.................... volatile int8 blink_count = 0;
.................... 
.................... #INT_TIMER1
.................... void timer1_isr(void) {  
....................    // Reset timer 1
....................    clear_interrupt(INT_TIMER1);
*
0107:  BCF    0C.0
....................    set_timer1(3036);
0108:  CLRF   0E
0109:  MOVLW  0B
010A:  MOVWF  0F
010B:  MOVLW  DC
010C:  MOVWF  0E
010D:  NOP
....................    // just for testing
....................    //output_toggle(PIN_A0);
....................    // Change mode (MENU is pushed)
....................    if (!MENU) {
010E:  BTFSC  06.4
010F:  GOTO   123
....................       menu_count++;
0110:  INCF   40,F
....................       if (menu_count == 16) {
0111:  MOVF   40,W
0112:  SUBLW  10
0113:  BTFSS  03.2
0114:  GOTO   122
....................          mode--;
0115:  DECF   2F,F
....................          if (mode > 3) mode = 3;
0116:  MOVF   2F,W
0117:  SUBLW  03
0118:  BTFSC  03.0
0119:  GOTO   11C
011A:  MOVLW  03
011B:  MOVWF  2F
....................          if (mode == set_time) {      
011C:  DECFSZ 2F,W
011D:  GOTO   122
....................             setTime.type = set_night_timer;
011E:  BCF    31.2
....................             setTime.stage = choose_type;
011F:  BCF    31.0
....................             setTime.nightTimer.stage = set_start_hour;
0120:  CLRF   32
....................             setTime.currentTime.stage = set_hour;
0121:  CLRF   33
....................          }
....................       }
....................    }
0122:  GOTO   137
....................    else {
....................       if (menu_count > 1 && menu_count < 16) {
0123:  MOVF   40,W
0124:  SUBLW  01
0125:  BTFSC  03.0
0126:  GOTO   136
0127:  MOVF   40,W
0128:  SUBLW  0F
0129:  BTFSS  03.0
012A:  GOTO   136
....................          mode++;
012B:  INCF   2F,F
....................          if (mode > 3) mode = 0;
012C:  MOVF   2F,W
012D:  SUBLW  03
012E:  BTFSS  03.0
012F:  CLRF   2F
....................          if (mode == set_time) {
0130:  DECFSZ 2F,W
0131:  GOTO   136
....................             setTime.type = set_night_timer;
0132:  BCF    31.2
....................             setTime.stage = choose_type;
0133:  BCF    31.0
....................             setTime.nightTimer.stage = set_start_hour;
0134:  CLRF   32
....................             setTime.currentTime.stage = set_hour;
0135:  CLRF   33
....................          }
....................       }
....................       menu_count = 0;
0136:  CLRF   40
....................    }
....................    
....................    // Manual mode (LIGHT is pushed)
....................    if (mode == manual) {
0137:  MOVF   2F,F
0138:  BTFSS  03.2
0139:  GOTO   145
....................        if (!LIGHT)  {
013A:  BTFSC  06.0
013B:  GOTO   13E
....................            light_count++;
013C:  INCF   44,F
....................        }
013D:  GOTO   145
....................        else {
....................            if (light_count > 1) {
013E:  MOVF   44,W
013F:  SUBLW  01
0140:  BTFSC  03.0
0141:  GOTO   144
....................                LIGHT_CONTROL = !LIGHT_CONTROL;
0142:  MOVLW  01
0143:  XORWF  07,F
....................            }
....................            light_count = 0;
0144:  CLRF   44
....................        }
....................    }
....................    
....................    // Set time mode
....................    if (mode == set_time) {
0145:  DECFSZ 2F,W
0146:  GOTO   1B0
....................        // UP is pushed
....................        if (!UP) {
0147:  BTFSC  06.5
0148:  GOTO   155
....................            // stop blinking
....................            blink_state = 1;
0149:  BSF    34.3
....................            blink_count = 0;
014A:  CLRF   47
....................            //
....................            up_count++;
014B:  INCF   42,F
....................            if (up_count >= 16 && up_count % 4 == 0) {
014C:  MOVF   42,W
014D:  SUBLW  0F
014E:  BTFSC  03.0
014F:  GOTO   154
0150:  MOVF   42,W
0151:  ANDLW  03
0152:  BTFSC  03.2
....................                upHandler();        
0153:  CALL   059
....................            }
....................        }
0154:  GOTO   15E
....................        else {
....................            if (up_count > 1 && up_count < 16) {
0155:  MOVF   42,W
0156:  SUBLW  01
0157:  BTFSC  03.0
0158:  GOTO   15D
0159:  MOVF   42,W
015A:  SUBLW  0F
015B:  BTFSC  03.0
....................                upHandler();
015C:  CALL   059
....................            }
....................            up_count = 0;
015D:  CLRF   42
....................        }
....................        // DOWN is pushed
....................        if (!DOWN) {
015E:  BTFSC  06.6
015F:  GOTO   16C
....................            // stop blinking
....................            blink_state = 1;
0160:  BSF    34.3
....................            blink_count = 0;
0161:  CLRF   47
....................            //
....................            down_count++;
0162:  INCF   43,F
....................            if (down_count >= 16 && down_count % 4 == 0) {
0163:  MOVF   43,W
0164:  SUBLW  0F
0165:  BTFSC  03.0
0166:  GOTO   16B
0167:  MOVF   43,W
0168:  ANDLW  03
0169:  BTFSC  03.2
....................                downHandler();        
016A:  CALL   0B5
....................            }
....................        }
016B:  GOTO   175
....................        else {
....................            if (down_count > 1 && down_count < 16) {
016C:  MOVF   43,W
016D:  SUBLW  01
016E:  BTFSC  03.0
016F:  GOTO   174
0170:  MOVF   43,W
0171:  SUBLW  0F
0172:  BTFSC  03.0
....................                downHandler();
0173:  CALL   0B5
....................            }
....................            down_count = 0;
0174:  CLRF   43
....................        }
....................        // ENTER is pushed
....................        if (!ENTER)  {
0175:  BTFSC  06.7
0176:  GOTO   190
....................            enter_count++;
0177:  INCF   41,F
....................            if (enter_count == 16) {
0178:  MOVF   41,W
0179:  SUBLW  10
017A:  BTFSS  03.2
017B:  GOTO   18F
....................                longEnterHandler();
....................            }
....................        }
*
018F:  GOTO   1B0
....................        else {
....................            if (enter_count > 1 && enter_count < 16) {
0190:  MOVF   41,W
0191:  SUBLW  01
0192:  BTFSC  03.0
0193:  GOTO   1AF
0194:  MOVF   41,W
0195:  SUBLW  0F
0196:  BTFSS  03.0
0197:  GOTO   1AF
....................                enterHandler();
....................            }
....................            enter_count = 0;
*
01AF:  CLRF   41
....................        }
....................    }
....................    
....................    // LED in-out
....................    if (!LED_IN) {
01B0:  BTFSC  07.1
01B1:  GOTO   1B9
....................        ledin_count++;
01B2:  INCF   3E,F
....................        if (ledin_count > 20) {
01B3:  MOVF   3E,W
01B4:  SUBLW  14
01B5:  BTFSC  03.0
01B6:  GOTO   1B9
....................            LED_IN = 1;
01B7:  BSF    07.1
....................            ledin_count = 0;
01B8:  CLRF   3E
....................        }
....................    } 
....................    if (!LED_OUT) {
01B9:  BTFSC  07.2
01BA:  GOTO   1C2
....................        ledout_count++;
01BB:  INCF   3F,F
....................        if (ledout_count > 20) {
01BC:  MOVF   3F,W
01BD:  SUBLW  14
01BE:  BTFSC  03.0
01BF:  GOTO   1C2
....................            LED_OUT = 1;
01C0:  BSF    07.2
....................            ledout_count = 0;
01C1:  CLRF   3F
....................        }
....................    }
....................    // Night mode
....................    if (mode == night) {
01C2:  MOVF   2F,W
01C3:  SUBLW  03
01C4:  BTFSS  03.2
01C5:  GOTO   1D9
....................       if (!PIR) {
01C6:  BTFSC  06.1
01C7:  GOTO   1D1
....................          l_PIR_count++;
01C8:  INCF   46,F
....................          h_PIR_count = 0;
01C9:  CLRF   45
....................          if (l_PIR_count > 70) {
01CA:  MOVF   46,W
01CB:  SUBLW  46
01CC:  BTFSC  03.0
01CD:  GOTO   1D0
....................             LIGHT_CONTROL = 1;
01CE:  BSF    07.0
....................             l_PIR_count--;
01CF:  DECF   46,F
....................          }
....................       }
01D0:  GOTO   1D9
....................       else {
....................          h_PIR_count++;
01D1:  INCF   45,F
....................          l_PIR_count = 0;
01D2:  CLRF   46
....................          if (h_PIR_count > 120) {
01D3:  MOVF   45,W
01D4:  SUBLW  78
01D5:  BTFSC  03.0
01D6:  GOTO   1D9
....................             LIGHT_CONTROL = 0;
01D7:  BCF    07.0
....................             h_PIR_count--;
01D8:  DECF   45,F
....................          }
....................       }
....................    }
01D9:  BCF    0C.0
01DA:  BCF    0A.3
01DB:  BCF    0A.4
01DC:  GOTO   02D
.................... }
.................... 
.................... void main() {
*
0B96:  MOVF   03,W
0B97:  ANDLW  1F
0B98:  MOVWF  03
0B99:  MOVLW  FF
0B9A:  MOVWF  2B
0B9B:  BSF    2B.3
0B9C:  MOVF   2B,W
0B9D:  BSF    03.5
0B9E:  MOVWF  07
0B9F:  BCF    03.5
0BA0:  BSF    2B.4
0BA1:  MOVF   2B,W
0BA2:  BSF    03.5
0BA3:  MOVWF  07
0BA4:  MOVLW  0C
0BA5:  MOVWF  13
0BA6:  MOVLW  28
0BA7:  BCF    03.5
0BA8:  MOVWF  14
0BA9:  BSF    03.5
0BAA:  BCF    14.7
0BAB:  BCF    14.6
0BAC:  BCF    03.5
0BAD:  CLRF   2E
0BAE:  CLRF   2D
0BAF:  CLRF   2F
0BB0:  CLRF   30
0BB1:  BCF    34.0
0BB2:  BCF    34.1
0BB3:  BCF    34.2
0BB4:  MOVLW  01
0BB5:  MOVWF  3D
0BB6:  CLRF   3E
0BB7:  CLRF   3F
0BB8:  CLRF   40
0BB9:  CLRF   41
0BBA:  CLRF   42
0BBB:  CLRF   43
0BBC:  CLRF   44
0BBD:  CLRF   45
0BBE:  CLRF   46
0BBF:  BSF    34.3
0BC0:  CLRF   47
0BC1:  BSF    03.5
0BC2:  BSF    1F.0
0BC3:  BSF    1F.1
0BC4:  BSF    1F.2
0BC5:  BCF    1F.3
0BC6:  MOVLW  07
0BC7:  MOVWF  1C
0BC8:  BCF    03.7
....................    // Initalization
....................    setTime.stage = choose_type;
0BC9:  BCF    03.5
0BCA:  BCF    31.0
....................    setTime.prevStage = choose_type;
0BCB:  BCF    31.1
....................    setTime.type = set_night_timer;
0BCC:  BCF    31.2
....................    setTime.nightTimer.stage = set_start_hour;
0BCD:  CLRF   32
....................    setTime.currentTime.stage = set_hour;
0BCE:  CLRF   33
....................    // LCD
....................    lcd_init();
0BCF:  BCF    0A.3
0BD0:  GOTO   387
0BD1:  BSF    0A.3
....................    lcd_putc('\f');   // Clear LCD display
0BD2:  MOVLW  0C
0BD3:  MOVWF  4F
0BD4:  BCF    0A.3
0BD5:  CALL   432
0BD6:  BSF    0A.3
....................    // DS1307
....................    ds1307_init();
0BD7:  BCF    0A.3
0BD8:  GOTO   4D5
0BD9:  BSF    0A.3
....................    ds1307_get_time(currentTime.hour, currentTime.minute, currentTime.second);
.................... //!   nightTimer.startHour = 23;
.................... //!   nightTimer.startMinute = 00;
.................... //!   nightTimer.endHour = 7;
.................... //!   nightTimer.endMinute = 00;
.................... //!   nightTimer.state = 1;
.................... //!   writeNightTimerData();
....................    readNightTimerData();
*
0C1F:  BCF    0A.3
0C20:  BCF    03.5
0C21:  GOTO   588
0C22:  BSF    0A.3
....................    // GPIO
....................    TRISB = 0xFF;
0C23:  MOVLW  FF
0C24:  BSF    03.5
0C25:  MOVWF  06
....................    TRISC &= 0xF8;
0C26:  MOVLW  F8
0C27:  ANDWF  07,F
....................    LIGHT_CONTROL = 0;
0C28:  BCF    03.5
0C29:  BCF    07.0
....................    LED_IN = 1;
0C2A:  BSF    07.1
....................    LED_OUT = 1;
0C2B:  BSF    07.2
....................    // Timer 1 interrupt
....................    setup_timer_1 ( T1_INTERNAL | T1_DIV_BY_4 ); // Internal clock and prescaler 4                           
0C2C:  MOVLW  A5
0C2D:  MOVWF  10
....................    set_timer1(3036);                 // Preload value
0C2E:  CLRF   0E
0C2F:  MOVLW  0B
0C30:  MOVWF  0F
0C31:  MOVLW  DC
0C32:  MOVWF  0E
0C33:  NOP
....................    clear_interrupt(INT_TIMER1);                 // Clear Timer1 interrupt flag bit
0C34:  BCF    0C.0
....................    enable_interrupts(INT_TIMER1);               // Enable Timer1 interrupt
0C35:  BSF    03.5
0C36:  BSF    0C.0
....................    enable_interrupts(GLOBAL);                   // Enable global interrupts
0C37:  MOVLW  C0
0C38:  BCF    03.5
0C39:  IORWF  0B,F
....................    // Waiting for setup
....................    lcd_gotoxy(6, 2);
0C3A:  MOVLW  06
0C3B:  MOVWF  50
0C3C:  MOVLW  02
0C3D:  MOVWF  51
0C3E:  BCF    0A.3
0C3F:  CALL   40D
0C40:  BSF    0A.3
....................    printf(lcd_putc, "Loading...");
0C41:  MOVLW  DD
0C42:  BSF    03.6
0C43:  MOVWF  0D
0C44:  MOVLW  01
0C45:  MOVWF  0F
0C46:  BCF    0A.3
0C47:  BCF    03.6
0C48:  CALL   5BF
0C49:  BSF    0A.3
....................    for (int8 i = 0; i < 100; i++) {
0C4A:  CLRF   48
0C4B:  MOVF   48,W
0C4C:  SUBLW  63
0C4D:  BTFSS  03.0
0C4E:  GOTO   469
....................       lcd_gotoxy(9, 3);
0C4F:  MOVLW  09
0C50:  MOVWF  50
0C51:  MOVLW  03
0C52:  MOVWF  51
0C53:  BCF    0A.3
0C54:  CALL   40D
0C55:  BSF    0A.3
....................       printf(lcd_putc, "%2d%%", i);
0C56:  MOVF   48,W
0C57:  MOVWF  49
0C58:  MOVLW  11
0C59:  MOVWF  4A
0C5A:  BCF    0A.3
0C5B:  CALL   615
0C5C:  BSF    0A.3
0C5D:  MOVLW  25
0C5E:  MOVWF  4F
0C5F:  BCF    0A.3
0C60:  CALL   432
0C61:  BSF    0A.3
....................       delay_ms(20);
0C62:  MOVLW  14
0C63:  MOVWF  50
0C64:  BCF    0A.3
0C65:  CALL   291
0C66:  BSF    0A.3
0C67:  INCF   48,F
0C68:  GOTO   44B
....................    }
....................    delay_ms(200);
0C69:  MOVLW  C8
0C6A:  MOVWF  50
0C6B:  BCF    0A.3
0C6C:  CALL   291
0C6D:  BSF    0A.3
....................    lcd_putc('\f');
0C6E:  MOVLW  0C
0C6F:  MOVWF  4F
0C70:  BCF    0A.3
0C71:  CALL   432
0C72:  BSF    0A.3
....................    while(TRUE) {
....................       checkInOut();
0C73:  BCF    0A.3
0C74:  GOTO   66C
0C75:  BSF    0A.3
....................       // Clear LCD display when change mode
....................       if (prevMode != mode) {
0C76:  MOVF   2F,W
0C77:  SUBWF  30,W
0C78:  BTFSC  03.2
0C79:  GOTO   481
....................          lcd_putc('\f');
0C7A:  MOVLW  0C
0C7B:  MOVWF  4F
0C7C:  BCF    0A.3
0C7D:  CALL   432
0C7E:  BSF    0A.3
....................          prevMode = mode;
0C7F:  MOVF   2F,W
0C80:  MOVWF  30
....................       }
....................       switch (mode) {
0C81:  MOVF   2F,W
0C82:  ADDLW  FC
0C83:  BTFSC  03.0
0C84:  GOTO   5EC
0C85:  ADDLW  04
0C86:  GOTO   5EE
....................          case manual:
....................             ds1307_get_time(currentTime.hour, currentTime.minute, currentTime.second);
....................             displayManualMode();
*
0CCC:  BCF    0A.3
0CCD:  BCF    03.5
0CCE:  GOTO   748
0CCF:  BSF    0A.3
....................             break;
0CD0:  GOTO   5EC
....................          case set_time:
....................             if (setTime.stage != setTime.prevStage) {
0CD1:  CLRF   77
0CD2:  BTFSC  31.1
0CD3:  BSF    77.0
0CD4:  MOVF   31,W
0CD5:  XORWF  77,W
0CD6:  ANDLW  01
0CD7:  BTFSC  03.2
0CD8:  GOTO   4E2
....................                // Clear LCD display when change set time stage
....................                lcd_putc('\f');
0CD9:  MOVLW  0C
0CDA:  MOVWF  4F
0CDB:  BCF    0A.3
0CDC:  CALL   432
0CDD:  BSF    0A.3
....................                setTime.prevStage = setTime.stage;
0CDE:  BTFSS  31.0
0CDF:  BCF    31.1
0CE0:  BTFSC  31.0
0CE1:  BSF    31.1
....................             }
....................             if (setTime.stage == change_value && hasChange) {
0CE2:  BTFSS  31.0
0CE3:  GOTO   4F4
0CE4:  BTFSS  34.0
0CE5:  GOTO   4F4
....................                if (setTime.type == set_night_timer) {
0CE6:  BTFSC  31.2
0CE7:  GOTO   4EC
....................                   writeNightTimerData();
0CE8:  BCF    0A.3
0CE9:  GOTO   7AF
0CEA:  BSF    0A.3
....................                }
0CEB:  GOTO   4F3
....................                else {
....................                   ds1307_set_time(currentTime.hour, currentTime.minute, currentTime.second);
0CEC:  MOVF   35,W
0CED:  MOVWF  49
0CEE:  MOVF   36,W
0CEF:  MOVWF  4A
0CF0:  MOVF   37,W
0CF1:  MOVWF  4B
0CF2:  GOTO   000
....................                }
....................                hasChange = 0;
0CF3:  BCF    34.0
....................             }
....................             ds1307_get_time(currentTime.hour, currentTime.minute, currentTime.second);
....................             displaySetTimeMode();
*
0D39:  BCF    03.5
0D3A:  GOTO   162
....................             break;
0D3B:  GOTO   5EC
....................          case automatic:
....................             if (person > 0) {
0D3C:  BTFSC  3D.7
0D3D:  GOTO   544
0D3E:  MOVF   3D,W
0D3F:  SUBLW  00
0D40:  BTFSC  03.0
0D41:  GOTO   544
....................                LIGHT_CONTROL = 1;
0D42:  BSF    07.0
....................             }
0D43:  GOTO   545
....................             else {
....................                LIGHT_CONTROL = 0;
0D44:  BCF    07.0
....................             }
....................             if (nightTimer.state) {
0D45:  BTFSS  3C.0
0D46:  GOTO   551
....................                if (nightTimer.startHour == currentTime.hour && nightTimer.startMinute == currentTime.minute) {
0D47:  MOVF   35,W
0D48:  SUBWF  38,W
0D49:  BTFSS  03.2
0D4A:  GOTO   551
0D4B:  MOVF   36,W
0D4C:  SUBWF  39,W
0D4D:  BTFSS  03.2
0D4E:  GOTO   551
....................                   mode = night;
0D4F:  MOVLW  03
0D50:  MOVWF  2F
....................                }
....................             }
....................             ds1307_get_time(currentTime.hour, currentTime.minute, currentTime.second);
....................             displayAutomaticMode();
*
0D96:  BCF    03.5
0D97:  GOTO   284
....................             break;
0D98:  GOTO   5EC
....................          case night:
....................             if (nightTimer.state) {
0D99:  BTFSS  3C.0
0D9A:  GOTO   5A5
....................                if (nightTimer.endHour == currentTime.hour && nightTimer.endMinute == currentTime.minute) {
0D9B:  MOVF   35,W
0D9C:  SUBWF  3A,W
0D9D:  BTFSS  03.2
0D9E:  GOTO   5A5
0D9F:  MOVF   36,W
0DA0:  SUBWF  3B,W
0DA1:  BTFSS  03.2
0DA2:  GOTO   5A5
....................                   mode = automatic;
0DA3:  MOVLW  02
0DA4:  MOVWF  2F
....................                }
....................             }
....................             ds1307_get_time(currentTime.hour, currentTime.minute, currentTime.second);
....................             displayNightMode();
*
0DEA:  BCF    03.5
0DEB:  GOTO   30D
....................             break;
....................       }
0DEC:  GOTO   473
....................    }
.................... }
.................... 
0DED:  SLEEP
.................... void checkInOut() {
....................    if (!IR1_flag && !IR2_flag) {
*
066C:  BTFSC  34.1
066D:  GOTO   677
066E:  BTFSC  34.2
066F:  GOTO   677
....................       if (!IR1) {
0670:  BTFSC  06.2
0671:  GOTO   674
....................          IR1_flag = 1;
0672:  BSF    34.1
....................       }
0673:  GOTO   676
....................       else if (!IR2) {
0674:  BTFSS  06.3
....................          IR2_flag = 1;
0675:  BSF    34.2
....................       }
....................    }
0676:  GOTO   68D
....................    else {
....................       if (IR1_flag) {
0677:  BTFSS  34.1
0678:  GOTO   681
....................          if (!IR2 && !IR2_flag) {
0679:  BTFSC  06.3
067A:  GOTO   680
067B:  BTFSC  34.2
067C:  GOTO   680
....................             IR2_flag = 1;
067D:  BSF    34.2
....................             person++;
067E:  INCF   3D,F
....................             LED_IN = 0;
067F:  BCF    07.1
....................          }
....................       }
0680:  GOTO   68D
....................       else if (IR2_flag) {
0681:  BTFSS  34.2
0682:  GOTO   68D
....................          if (!IR1 && !IR1_flag) {
0683:  BTFSC  06.2
0684:  GOTO   68D
0685:  BTFSC  34.1
0686:  GOTO   68D
....................             IR1_flag = 1;
0687:  BSF    34.1
....................             person--;
0688:  DECF   3D,F
....................             if (person < 0) person = 0;
0689:  BTFSS  3D.7
068A:  GOTO   68C
068B:  CLRF   3D
....................             LED_OUT = 0;
068C:  BCF    07.2
....................          }
....................       }
....................    }
....................    if (IR1 && IR2 && IR1_flag && IR2_flag) {
068D:  BTFSS  06.2
068E:  GOTO   697
068F:  BTFSS  06.3
0690:  GOTO   697
0691:  BTFSS  34.1
0692:  GOTO   697
0693:  BTFSS  34.2
0694:  GOTO   697
....................       IR1_flag = 0;
0695:  BCF    34.1
....................       IR2_flag = 0;
0696:  BCF    34.2
....................    }
0697:  BSF    0A.3
0698:  BCF    0A.4
0699:  GOTO   475 (RETURN)
.................... }
.................... 
.................... void displayManualMode() {
....................    lcd_gotoxy(5, 1);
*
0748:  MOVLW  05
0749:  MOVWF  50
074A:  MOVLW  01
074B:  MOVWF  51
074C:  CALL   40D
....................    printf(lcd_putc, "MANUAL MODE");
074D:  MOVLW  E3
074E:  BSF    03.6
074F:  MOVWF  0D
0750:  MOVLW  01
0751:  MOVWF  0F
0752:  BCF    03.6
0753:  CALL   5BF
....................    lcd_gotoxy(1, 2);
0754:  MOVLW  01
0755:  MOVWF  50
0756:  MOVLW  02
0757:  MOVWF  51
0758:  CALL   40D
....................    if (LIGHT_CONTROL) {
0759:  BTFSS  07.0
075A:  GOTO   763
....................       printf(lcd_putc, "LIGHT:ON ",);
075B:  MOVLW  E9
075C:  BSF    03.6
075D:  MOVWF  0D
075E:  MOVLW  01
075F:  MOVWF  0F
0760:  BCF    03.6
0761:  CALL   5BF
....................    }
0762:  GOTO   76A
....................    else {
....................       printf(lcd_putc, "LIGHT:OFF",);
0763:  MOVLW  EE
0764:  BSF    03.6
0765:  MOVWF  0D
0766:  MOVLW  01
0767:  MOVWF  0F
0768:  BCF    03.6
0769:  CALL   5BF
....................    }
....................    lcd_gotoxy(12, 2);
076A:  MOVLW  0C
076B:  MOVWF  50
076C:  MOVLW  02
076D:  MOVWF  51
076E:  CALL   40D
....................    if (nightTimer.state) {
076F:  BTFSS  3C.0
0770:  GOTO   779
....................       printf(lcd_putc, "TIMER:ON ");
0771:  MOVLW  F3
0772:  BSF    03.6
0773:  MOVWF  0D
0774:  MOVLW  01
0775:  MOVWF  0F
0776:  BCF    03.6
0777:  CALL   5BF
....................    }
0778:  GOTO   780
....................    else {
....................       printf(lcd_putc, "TIMER:OFF");
0779:  MOVLW  F8
077A:  BSF    03.6
077B:  MOVWF  0D
077C:  MOVLW  01
077D:  MOVWF  0F
077E:  BCF    03.6
077F:  CALL   5BF
....................    }
....................    lcd_gotoxy(7, 3);
0780:  MOVLW  07
0781:  MOVWF  50
0782:  MOVLW  03
0783:  MOVWF  51
0784:  CALL   40D
....................    printf(lcd_putc, "PERSON:%d ", person);
0785:  MOVLW  FD
0786:  BSF    03.6
0787:  MOVWF  0D
0788:  MOVLW  01
0789:  MOVWF  0F
078A:  BCF    03.0
078B:  MOVLW  07
078C:  BCF    03.6
078D:  MOVWF  49
078E:  CALL   69A
078F:  MOVF   3D,W
0790:  MOVWF  49
0791:  MOVLW  18
0792:  MOVWF  4A
0793:  CALL   615
0794:  MOVLW  20
0795:  MOVWF  4F
0796:  CALL   432
....................    lcd_gotoxy(15, 4);
0797:  MOVLW  0F
0798:  MOVWF  50
0799:  MOVLW  04
079A:  MOVWF  51
079B:  CALL   40D
....................    printf(lcd_putc, "%02d:%02d", currentTime.hour, currentTime.minute);
079C:  MOVF   35,W
079D:  MOVWF  49
079E:  MOVLW  01
079F:  MOVWF  4A
07A0:  CALL   6F1
07A1:  MOVLW  3A
07A2:  MOVWF  4F
07A3:  CALL   432
07A4:  MOVF   36,W
07A5:  MOVWF  49
07A6:  MOVLW  01
07A7:  MOVWF  4A
07A8:  CALL   6F1
....................    delay_ms(10);
07A9:  MOVLW  0A
07AA:  MOVWF  50
07AB:  CALL   291
07AC:  BSF    0A.3
07AD:  BCF    0A.4
07AE:  GOTO   5EC (RETURN)
.................... }
.................... 
.................... void displayAutomaticMode() {
....................    lcd_gotoxy(4, 1);
*
0A84:  MOVLW  04
0A85:  MOVWF  50
0A86:  MOVLW  01
0A87:  MOVWF  51
0A88:  BCF    0A.3
0A89:  CALL   40D
0A8A:  BSF    0A.3
....................    printf(lcd_putc, "AUTOMATIC MODE");
0A8B:  MOVLW  03
0A8C:  BSF    03.6
0A8D:  MOVWF  0D
0A8E:  MOVLW  02
0A8F:  MOVWF  0F
0A90:  BCF    0A.3
0A91:  BCF    03.6
0A92:  CALL   5BF
0A93:  BSF    0A.3
....................    lcd_gotoxy(1, 2);
0A94:  MOVLW  01
0A95:  MOVWF  50
0A96:  MOVLW  02
0A97:  MOVWF  51
0A98:  BCF    0A.3
0A99:  CALL   40D
0A9A:  BSF    0A.3
....................    if (LIGHT_CONTROL) {
0A9B:  BTFSS  07.0
0A9C:  GOTO   2A7
....................       printf(lcd_putc, "LIGHT:ON ",);
0A9D:  MOVLW  0B
0A9E:  BSF    03.6
0A9F:  MOVWF  0D
0AA0:  MOVLW  02
0AA1:  MOVWF  0F
0AA2:  BCF    0A.3
0AA3:  BCF    03.6
0AA4:  CALL   5BF
0AA5:  BSF    0A.3
....................    }
0AA6:  GOTO   2B0
....................    else {
....................       printf(lcd_putc, "LIGHT:OFF",);
0AA7:  MOVLW  10
0AA8:  BSF    03.6
0AA9:  MOVWF  0D
0AAA:  MOVLW  02
0AAB:  MOVWF  0F
0AAC:  BCF    0A.3
0AAD:  BCF    03.6
0AAE:  CALL   5BF
0AAF:  BSF    0A.3
....................    }
....................    lcd_gotoxy(12, 2);
0AB0:  MOVLW  0C
0AB1:  MOVWF  50
0AB2:  MOVLW  02
0AB3:  MOVWF  51
0AB4:  BCF    0A.3
0AB5:  CALL   40D
0AB6:  BSF    0A.3
....................    if (nightTimer.state) {
0AB7:  BTFSS  3C.0
0AB8:  GOTO   2C3
....................       printf(lcd_putc, "TIMER:ON ");
0AB9:  MOVLW  15
0ABA:  BSF    03.6
0ABB:  MOVWF  0D
0ABC:  MOVLW  02
0ABD:  MOVWF  0F
0ABE:  BCF    0A.3
0ABF:  BCF    03.6
0AC0:  CALL   5BF
0AC1:  BSF    0A.3
....................    }
0AC2:  GOTO   2CC
....................    else {
....................       printf(lcd_putc, "TIMER:OFF");
0AC3:  MOVLW  1A
0AC4:  BSF    03.6
0AC5:  MOVWF  0D
0AC6:  MOVLW  02
0AC7:  MOVWF  0F
0AC8:  BCF    0A.3
0AC9:  BCF    03.6
0ACA:  CALL   5BF
0ACB:  BSF    0A.3
....................    }
....................    lcd_gotoxy(7, 3);
0ACC:  MOVLW  07
0ACD:  MOVWF  50
0ACE:  MOVLW  03
0ACF:  MOVWF  51
0AD0:  BCF    0A.3
0AD1:  CALL   40D
0AD2:  BSF    0A.3
....................    printf(lcd_putc, "PERSON:%d ", person);     
0AD3:  MOVLW  1F
0AD4:  BSF    03.6
0AD5:  MOVWF  0D
0AD6:  MOVLW  02
0AD7:  MOVWF  0F
0AD8:  BCF    03.0
0AD9:  MOVLW  07
0ADA:  BCF    03.6
0ADB:  MOVWF  49
0ADC:  BCF    0A.3
0ADD:  CALL   69A
0ADE:  BSF    0A.3
0ADF:  MOVF   3D,W
0AE0:  MOVWF  49
0AE1:  MOVLW  18
0AE2:  MOVWF  4A
0AE3:  BCF    0A.3
0AE4:  CALL   615
0AE5:  BSF    0A.3
0AE6:  MOVLW  20
0AE7:  MOVWF  4F
0AE8:  BCF    0A.3
0AE9:  CALL   432
0AEA:  BSF    0A.3
....................    lcd_gotoxy(15, 4);
0AEB:  MOVLW  0F
0AEC:  MOVWF  50
0AED:  MOVLW  04
0AEE:  MOVWF  51
0AEF:  BCF    0A.3
0AF0:  CALL   40D
0AF1:  BSF    0A.3
....................    printf(lcd_putc, "%02d:%02d", currentTime.hour, currentTime.minute);
0AF2:  MOVF   35,W
0AF3:  MOVWF  49
0AF4:  MOVLW  01
0AF5:  MOVWF  4A
0AF6:  BCF    0A.3
0AF7:  CALL   6F1
0AF8:  BSF    0A.3
0AF9:  MOVLW  3A
0AFA:  MOVWF  4F
0AFB:  BCF    0A.3
0AFC:  CALL   432
0AFD:  BSF    0A.3
0AFE:  MOVF   36,W
0AFF:  MOVWF  49
0B00:  MOVLW  01
0B01:  MOVWF  4A
0B02:  BCF    0A.3
0B03:  CALL   6F1
0B04:  BSF    0A.3
....................    delay_ms(10);
0B05:  MOVLW  0A
0B06:  MOVWF  50
0B07:  BCF    0A.3
0B08:  CALL   291
0B09:  BSF    0A.3
0B0A:  BSF    0A.3
0B0B:  BCF    0A.4
0B0C:  GOTO   5EC (RETURN)
.................... }
.................... 
.................... void displayNightMode() {
....................    lcd_gotoxy(6, 1);
0B0D:  MOVLW  06
0B0E:  MOVWF  50
0B0F:  MOVLW  01
0B10:  MOVWF  51
0B11:  BCF    0A.3
0B12:  CALL   40D
0B13:  BSF    0A.3
....................    printf(lcd_putc, "NIGHT MODE");
0B14:  MOVLW  25
0B15:  BSF    03.6
0B16:  MOVWF  0D
0B17:  MOVLW  02
0B18:  MOVWF  0F
0B19:  BCF    0A.3
0B1A:  BCF    03.6
0B1B:  CALL   5BF
0B1C:  BSF    0A.3
....................    lcd_gotoxy(1, 2);
0B1D:  MOVLW  01
0B1E:  MOVWF  50
0B1F:  MOVLW  02
0B20:  MOVWF  51
0B21:  BCF    0A.3
0B22:  CALL   40D
0B23:  BSF    0A.3
....................    if (LIGHT_CONTROL) {
0B24:  BTFSS  07.0
0B25:  GOTO   330
....................       printf(lcd_putc, "LIGHT:ON ",);
0B26:  MOVLW  2B
0B27:  BSF    03.6
0B28:  MOVWF  0D
0B29:  MOVLW  02
0B2A:  MOVWF  0F
0B2B:  BCF    0A.3
0B2C:  BCF    03.6
0B2D:  CALL   5BF
0B2E:  BSF    0A.3
....................    }
0B2F:  GOTO   339
....................    else {
....................       printf(lcd_putc, "LIGHT:OFF",);
0B30:  MOVLW  30
0B31:  BSF    03.6
0B32:  MOVWF  0D
0B33:  MOVLW  02
0B34:  MOVWF  0F
0B35:  BCF    0A.3
0B36:  BCF    03.6
0B37:  CALL   5BF
0B38:  BSF    0A.3
....................    }
....................    lcd_gotoxy(12, 2);
0B39:  MOVLW  0C
0B3A:  MOVWF  50
0B3B:  MOVLW  02
0B3C:  MOVWF  51
0B3D:  BCF    0A.3
0B3E:  CALL   40D
0B3F:  BSF    0A.3
....................    if (nightTimer.state) {
0B40:  BTFSS  3C.0
0B41:  GOTO   34C
....................       printf(lcd_putc, "TIMER:ON ");
0B42:  MOVLW  35
0B43:  BSF    03.6
0B44:  MOVWF  0D
0B45:  MOVLW  02
0B46:  MOVWF  0F
0B47:  BCF    0A.3
0B48:  BCF    03.6
0B49:  CALL   5BF
0B4A:  BSF    0A.3
....................    }
0B4B:  GOTO   355
....................    else {
....................       printf(lcd_putc, "TIMER:OFF");
0B4C:  MOVLW  3A
0B4D:  BSF    03.6
0B4E:  MOVWF  0D
0B4F:  MOVLW  02
0B50:  MOVWF  0F
0B51:  BCF    0A.3
0B52:  BCF    03.6
0B53:  CALL   5BF
0B54:  BSF    0A.3
....................    }
....................    lcd_gotoxy(7, 3);
0B55:  MOVLW  07
0B56:  MOVWF  50
0B57:  MOVLW  03
0B58:  MOVWF  51
0B59:  BCF    0A.3
0B5A:  CALL   40D
0B5B:  BSF    0A.3
....................    printf(lcd_putc, "PERSON:%d ", person);
0B5C:  MOVLW  3F
0B5D:  BSF    03.6
0B5E:  MOVWF  0D
0B5F:  MOVLW  02
0B60:  MOVWF  0F
0B61:  BCF    03.0
0B62:  MOVLW  07
0B63:  BCF    03.6
0B64:  MOVWF  49
0B65:  BCF    0A.3
0B66:  CALL   69A
0B67:  BSF    0A.3
0B68:  MOVF   3D,W
0B69:  MOVWF  49
0B6A:  MOVLW  18
0B6B:  MOVWF  4A
0B6C:  BCF    0A.3
0B6D:  CALL   615
0B6E:  BSF    0A.3
0B6F:  MOVLW  20
0B70:  MOVWF  4F
0B71:  BCF    0A.3
0B72:  CALL   432
0B73:  BSF    0A.3
....................    lcd_gotoxy(15, 4);
0B74:  MOVLW  0F
0B75:  MOVWF  50
0B76:  MOVLW  04
0B77:  MOVWF  51
0B78:  BCF    0A.3
0B79:  CALL   40D
0B7A:  BSF    0A.3
....................    printf(lcd_putc, "%02d:%02d", currentTime.hour, currentTime.minute);
0B7B:  MOVF   35,W
0B7C:  MOVWF  49
0B7D:  MOVLW  01
0B7E:  MOVWF  4A
0B7F:  BCF    0A.3
0B80:  CALL   6F1
0B81:  BSF    0A.3
0B82:  MOVLW  3A
0B83:  MOVWF  4F
0B84:  BCF    0A.3
0B85:  CALL   432
0B86:  BSF    0A.3
0B87:  MOVF   36,W
0B88:  MOVWF  49
0B89:  MOVLW  01
0B8A:  MOVWF  4A
0B8B:  BCF    0A.3
0B8C:  CALL   6F1
0B8D:  BSF    0A.3
....................    delay_ms(10);
0B8E:  MOVLW  0A
0B8F:  MOVWF  50
0B90:  BCF    0A.3
0B91:  CALL   291
0B92:  BSF    0A.3
0B93:  BSF    0A.3
0B94:  BCF    0A.4
0B95:  GOTO   5EC (RETURN)
.................... }
.................... 
.................... void displaySetTimeMode() {
....................    // Blink handler
....................    if (blink_state) {
*
0962:  BTFSS  34.3
0963:  GOTO   16C
....................       blink_count++;
0964:  INCF   47,F
....................       if (blink_count == 50) {         
0965:  MOVF   47,W
0966:  SUBLW  32
0967:  BTFSS  03.2
0968:  GOTO   16B
....................          blink_state = 0;
0969:  BCF    34.3
....................          blink_count = 0;
096A:  CLRF   47
....................       }
....................    }
096B:  GOTO   173
....................    else {
....................       blink_count++;
096C:  INCF   47,F
....................       if (blink_count == 30) {         
096D:  MOVF   47,W
096E:  SUBLW  1E
096F:  BTFSS  03.2
0970:  GOTO   173
....................          blink_state = 1;
0971:  BSF    34.3
....................          blink_count = 0;
0972:  CLRF   47
....................       }
....................    }
....................    
....................    if (!setTime.stage) {
0973:  BTFSC  31.0
0974:  GOTO   1CC
....................       if (blink_state) {
0975:  BTFSS  34.3
0976:  GOTO   1A8
....................          lcd_gotoxy(4, 1);
0977:  MOVLW  04
0978:  MOVWF  50
0979:  MOVLW  01
097A:  MOVWF  51
097B:  BCF    0A.3
097C:  CALL   40D
097D:  BSF    0A.3
....................          printf(lcd_putc, "SET TIME MODE");
097E:  MOVLW  45
097F:  BSF    03.6
0980:  MOVWF  0D
0981:  MOVLW  02
0982:  MOVWF  0F
0983:  BCF    0A.3
0984:  BCF    03.6
0985:  CALL   5BF
0986:  BSF    0A.3
....................          lcd_gotoxy(5, 3);
0987:  MOVLW  05
0988:  MOVWF  50
0989:  MOVLW  03
098A:  MOVWF  51
098B:  BCF    0A.3
098C:  CALL   40D
098D:  BSF    0A.3
....................          printf(lcd_putc, "NIGHT TIMER");
098E:  MOVLW  4C
098F:  BSF    03.6
0990:  MOVWF  0D
0991:  MOVLW  02
0992:  MOVWF  0F
0993:  BCF    0A.3
0994:  BCF    03.6
0995:  CALL   5BF
0996:  BSF    0A.3
....................          lcd_gotoxy(5, 4);
0997:  MOVLW  05
0998:  MOVWF  50
0999:  MOVLW  04
099A:  MOVWF  51
099B:  BCF    0A.3
099C:  CALL   40D
099D:  BSF    0A.3
....................          printf(lcd_putc, "CURRENT TIME");
099E:  MOVLW  52
099F:  BSF    03.6
09A0:  MOVWF  0D
09A1:  MOVLW  02
09A2:  MOVWF  0F
09A3:  BCF    0A.3
09A4:  BCF    03.6
09A5:  CALL   5BF
09A6:  BSF    0A.3
....................       }
09A7:  GOTO   1CB
....................       else {
....................          if (!setTime.type) {
09A8:  BTFSC  31.2
09A9:  GOTO   1BB
....................             lcd_gotoxy(5, 3);
09AA:  MOVLW  05
09AB:  MOVWF  50
09AC:  MOVLW  03
09AD:  MOVWF  51
09AE:  BCF    0A.3
09AF:  CALL   40D
09B0:  BSF    0A.3
....................             printf(lcd_putc, "           ");
09B1:  MOVLW  59
09B2:  BSF    03.6
09B3:  MOVWF  0D
09B4:  MOVLW  02
09B5:  MOVWF  0F
09B6:  BCF    0A.3
09B7:  BCF    03.6
09B8:  CALL   5BF
09B9:  BSF    0A.3
....................          }
09BA:  GOTO   1CB
....................          else {
....................             lcd_gotoxy(5, 4);
09BB:  MOVLW  05
09BC:  MOVWF  50
09BD:  MOVLW  04
09BE:  MOVWF  51
09BF:  BCF    0A.3
09C0:  CALL   40D
09C1:  BSF    0A.3
....................             printf(lcd_putc, "            ");
09C2:  MOVLW  5F
09C3:  BSF    03.6
09C4:  MOVWF  0D
09C5:  MOVLW  02
09C6:  MOVWF  0F
09C7:  BCF    0A.3
09C8:  BCF    03.6
09C9:  CALL   5BF
09CA:  BSF    0A.3
....................          }
....................       }
....................    }
09CB:  GOTO   27C
....................    else {
....................       if (!setTime.type) {
09CC:  BTFSC  31.2
09CD:  GOTO   1D0
....................          displaySetNightTimer();
09CE:  GOTO   03F
....................       }
09CF:  GOTO   27C
....................       else {
....................          displaySetCurrentTime();
....................       }
....................    }
....................    delay_ms(10);
*
0A7C:  MOVLW  0A
0A7D:  MOVWF  50
0A7E:  BCF    0A.3
0A7F:  CALL   291
0A80:  BSF    0A.3
0A81:  BSF    0A.3
0A82:  BCF    0A.4
0A83:  GOTO   5EC (RETURN)
.................... }
.................... 
.................... void displaySetCurrentTime() {
....................    if (blink_state) {
*
09D0:  BTFSS  34.3
09D1:  GOTO   23D
....................       lcd_gotoxy(3, 1);
09D2:  MOVLW  03
09D3:  MOVWF  50
09D4:  MOVLW  01
09D5:  MOVWF  51
09D6:  BCF    0A.3
09D7:  CALL   40D
09D8:  BSF    0A.3
....................       printf(lcd_putc, "SET CURRENT TIME");
09D9:  MOVLW  66
09DA:  BSF    03.6
09DB:  MOVWF  0D
09DC:  MOVLW  02
09DD:  MOVWF  0F
09DE:  BCF    0A.3
09DF:  BCF    03.6
09E0:  CALL   5BF
09E1:  BSF    0A.3
....................       lcd_gotoxy(1, 3);
09E2:  MOVLW  01
09E3:  MOVWF  50
09E4:  MOVLW  03
09E5:  MOVWF  51
09E6:  BCF    0A.3
09E7:  CALL   40D
09E8:  BSF    0A.3
....................       printf(lcd_putc, "HOUR");
09E9:  MOVLW  6F
09EA:  BSF    03.6
09EB:  MOVWF  0D
09EC:  MOVLW  02
09ED:  MOVWF  0F
09EE:  BCF    0A.3
09EF:  BCF    03.6
09F0:  CALL   5BF
09F1:  BSF    0A.3
....................       lcd_gotoxy(7, 3);
09F2:  MOVLW  07
09F3:  MOVWF  50
09F4:  MOVLW  03
09F5:  MOVWF  51
09F6:  BCF    0A.3
09F7:  CALL   40D
09F8:  BSF    0A.3
....................       printf(lcd_putc, "MINUTE");
09F9:  MOVLW  72
09FA:  BSF    03.6
09FB:  MOVWF  0D
09FC:  MOVLW  02
09FD:  MOVWF  0F
09FE:  BCF    0A.3
09FF:  BCF    03.6
0A00:  CALL   5BF
0A01:  BSF    0A.3
....................       lcd_gotoxy(15, 3);
0A02:  MOVLW  0F
0A03:  MOVWF  50
0A04:  MOVLW  03
0A05:  MOVWF  51
0A06:  BCF    0A.3
0A07:  CALL   40D
0A08:  BSF    0A.3
....................       printf(lcd_putc, "SECOND");
0A09:  MOVLW  76
0A0A:  BSF    03.6
0A0B:  MOVWF  0D
0A0C:  MOVLW  02
0A0D:  MOVWF  0F
0A0E:  BCF    0A.3
0A0F:  BCF    03.6
0A10:  CALL   5BF
0A11:  BSF    0A.3
....................       lcd_gotoxy(2, 4);
0A12:  MOVLW  02
0A13:  MOVWF  50
0A14:  MOVLW  04
0A15:  MOVWF  51
0A16:  BCF    0A.3
0A17:  CALL   40D
0A18:  BSF    0A.3
....................       printf(lcd_putc, "%02d", currentTime.hour);
0A19:  MOVF   35,W
0A1A:  MOVWF  49
0A1B:  MOVLW  01
0A1C:  MOVWF  4A
0A1D:  BCF    0A.3
0A1E:  CALL   6F1
0A1F:  BSF    0A.3
....................       lcd_gotoxy(9, 4);
0A20:  MOVLW  09
0A21:  MOVWF  50
0A22:  MOVLW  04
0A23:  MOVWF  51
0A24:  BCF    0A.3
0A25:  CALL   40D
0A26:  BSF    0A.3
....................       printf(lcd_putc, "%02d", currentTime.minute);
0A27:  MOVF   36,W
0A28:  MOVWF  49
0A29:  MOVLW  01
0A2A:  MOVWF  4A
0A2B:  BCF    0A.3
0A2C:  CALL   6F1
0A2D:  BSF    0A.3
....................       lcd_gotoxy(17, 4);
0A2E:  MOVLW  11
0A2F:  MOVWF  50
0A30:  MOVLW  04
0A31:  MOVWF  51
0A32:  BCF    0A.3
0A33:  CALL   40D
0A34:  BSF    0A.3
....................       printf(lcd_putc, "%02d", currentTime.second);
0A35:  MOVF   37,W
0A36:  MOVWF  49
0A37:  MOVLW  01
0A38:  MOVWF  4A
0A39:  BCF    0A.3
0A3A:  CALL   6F1
0A3B:  BSF    0A.3
....................    }
0A3C:  GOTO   27C
....................    else {
....................       switch (setTime.currentTime.stage) {
0A3D:  MOVF   33,W
0A3E:  BTFSC  03.2
0A3F:  GOTO   247
0A40:  XORLW  01
0A41:  BTFSC  03.2
0A42:  GOTO   259
0A43:  XORLW  03
0A44:  BTFSC  03.2
0A45:  GOTO   26B
0A46:  GOTO   27C
....................          case set_hour:
....................             lcd_gotoxy(2, 4);
0A47:  MOVLW  02
0A48:  MOVWF  50
0A49:  MOVLW  04
0A4A:  MOVWF  51
0A4B:  BCF    0A.3
0A4C:  CALL   40D
0A4D:  BSF    0A.3
....................             printf(lcd_putc, "  ");
0A4E:  MOVLW  20
0A4F:  MOVWF  4F
0A50:  BCF    0A.3
0A51:  CALL   432
0A52:  BSF    0A.3
0A53:  MOVLW  20
0A54:  MOVWF  4F
0A55:  BCF    0A.3
0A56:  CALL   432
0A57:  BSF    0A.3
....................             break;
0A58:  GOTO   27C
....................          case set_minute:
....................             lcd_gotoxy(9, 4);
0A59:  MOVLW  09
0A5A:  MOVWF  50
0A5B:  MOVLW  04
0A5C:  MOVWF  51
0A5D:  BCF    0A.3
0A5E:  CALL   40D
0A5F:  BSF    0A.3
....................             printf(lcd_putc, "  ");
0A60:  MOVLW  20
0A61:  MOVWF  4F
0A62:  BCF    0A.3
0A63:  CALL   432
0A64:  BSF    0A.3
0A65:  MOVLW  20
0A66:  MOVWF  4F
0A67:  BCF    0A.3
0A68:  CALL   432
0A69:  BSF    0A.3
....................             break;
0A6A:  GOTO   27C
....................          case set_second:
....................             lcd_gotoxy(17, 4);
0A6B:  MOVLW  11
0A6C:  MOVWF  50
0A6D:  MOVLW  04
0A6E:  MOVWF  51
0A6F:  BCF    0A.3
0A70:  CALL   40D
0A71:  BSF    0A.3
....................             printf(lcd_putc, "  ");
0A72:  MOVLW  20
0A73:  MOVWF  4F
0A74:  BCF    0A.3
0A75:  CALL   432
0A76:  BSF    0A.3
0A77:  MOVLW  20
0A78:  MOVWF  4F
0A79:  BCF    0A.3
0A7A:  CALL   432
0A7B:  BSF    0A.3
....................             break;
....................       }
....................    }
.................... }
.................... 
.................... void displaySetNightTimer() {
....................    if (blink_state) {
*
083F:  BTFSS  34.3
0840:  GOTO   0BC
....................       lcd_gotoxy(3, 1);
0841:  MOVLW  03
0842:  MOVWF  50
0843:  MOVLW  01
0844:  MOVWF  51
0845:  BCF    0A.3
0846:  CALL   40D
0847:  BSF    0A.3
....................       printf(lcd_putc, "SET NIGHT TIMER");
0848:  MOVLW  7A
0849:  BSF    03.6
084A:  MOVWF  0D
084B:  MOVLW  02
084C:  MOVWF  0F
084D:  BCF    0A.3
084E:  BCF    03.6
084F:  CALL   5BF
0850:  BSF    0A.3
....................       lcd_gotoxy(1, 2);
0851:  MOVLW  01
0852:  MOVWF  50
0853:  MOVLW  02
0854:  MOVWF  51
0855:  BCF    0A.3
0856:  CALL   40D
0857:  BSF    0A.3
....................       printf(lcd_putc, "START");
0858:  MOVLW  82
0859:  BSF    03.6
085A:  MOVWF  0D
085B:  MOVLW  02
085C:  MOVWF  0F
085D:  BCF    0A.3
085E:  BCF    03.6
085F:  CALL   5BF
0860:  BSF    0A.3
....................       lcd_gotoxy(15, 2);
0861:  MOVLW  0F
0862:  MOVWF  50
0863:  MOVLW  02
0864:  MOVWF  51
0865:  BCF    0A.3
0866:  CALL   40D
0867:  BSF    0A.3
....................       printf(lcd_putc, "END");
0868:  MOVLW  45
0869:  MOVWF  4F
086A:  BCF    0A.3
086B:  CALL   432
086C:  BSF    0A.3
086D:  MOVLW  4E
086E:  MOVWF  4F
086F:  BCF    0A.3
0870:  CALL   432
0871:  BSF    0A.3
0872:  MOVLW  44
0873:  MOVWF  4F
0874:  BCF    0A.3
0875:  CALL   432
0876:  BSF    0A.3
....................       lcd_gotoxy(1, 3);
0877:  MOVLW  01
0878:  MOVWF  50
0879:  MOVLW  03
087A:  MOVWF  51
087B:  BCF    0A.3
087C:  CALL   40D
087D:  BSF    0A.3
....................       printf(lcd_putc, "%02d:%02d", nightTimer.startHour, nightTimer.startMinute);
087E:  MOVF   38,W
087F:  MOVWF  49
0880:  MOVLW  01
0881:  MOVWF  4A
0882:  BCF    0A.3
0883:  CALL   6F1
0884:  BSF    0A.3
0885:  MOVLW  3A
0886:  MOVWF  4F
0887:  BCF    0A.3
0888:  CALL   432
0889:  BSF    0A.3
088A:  MOVF   39,W
088B:  MOVWF  49
088C:  MOVLW  01
088D:  MOVWF  4A
088E:  BCF    0A.3
088F:  CALL   6F1
0890:  BSF    0A.3
....................       lcd_gotoxy(14, 3);
0891:  MOVLW  0E
0892:  MOVWF  50
0893:  MOVLW  03
0894:  MOVWF  51
0895:  BCF    0A.3
0896:  CALL   40D
0897:  BSF    0A.3
....................       printf(lcd_putc, "%02d:%02d", nightTimer.endHour, nightTimer.endMinute);
0898:  MOVF   3A,W
0899:  MOVWF  49
089A:  MOVLW  01
089B:  MOVWF  4A
089C:  BCF    0A.3
089D:  CALL   6F1
089E:  BSF    0A.3
089F:  MOVLW  3A
08A0:  MOVWF  4F
08A1:  BCF    0A.3
08A2:  CALL   432
08A3:  BSF    0A.3
08A4:  MOVF   3B,W
08A5:  MOVWF  49
08A6:  MOVLW  01
08A7:  MOVWF  4A
08A8:  BCF    0A.3
08A9:  CALL   6F1
08AA:  BSF    0A.3
....................       lcd_gotoxy(8, 4);
08AB:  MOVLW  08
08AC:  MOVWF  50
08AD:  MOVLW  04
08AE:  MOVWF  51
08AF:  BCF    0A.3
08B0:  CALL   40D
08B1:  BSF    0A.3
....................       printf(lcd_putc, "ON/OFF");
08B2:  MOVLW  85
08B3:  BSF    03.6
08B4:  MOVWF  0D
08B5:  MOVLW  02
08B6:  MOVWF  0F
08B7:  BCF    0A.3
08B8:  BCF    03.6
08B9:  CALL   5BF
08BA:  BSF    0A.3
....................    }
08BB:  GOTO   156
....................    else {
....................       switch (setTime.nightTimer.stage) {
08BC:  MOVF   32,W
08BD:  ADDLW  FB
08BE:  BTFSC  03.0
08BF:  GOTO   156
08C0:  ADDLW  05
08C1:  GOTO   159
....................          case set_start_hour:
....................             lcd_gotoxy(1, 3);
08C2:  MOVLW  01
08C3:  MOVWF  50
08C4:  MOVLW  03
08C5:  MOVWF  51
08C6:  BCF    0A.3
08C7:  CALL   40D
08C8:  BSF    0A.3
....................             printf(lcd_putc, "  :%02d", nightTimer.startMinute);
08C9:  MOVLW  20
08CA:  MOVWF  4F
08CB:  BCF    0A.3
08CC:  CALL   432
08CD:  BSF    0A.3
08CE:  MOVLW  20
08CF:  MOVWF  4F
08D0:  BCF    0A.3
08D1:  CALL   432
08D2:  BSF    0A.3
08D3:  MOVLW  3A
08D4:  MOVWF  4F
08D5:  BCF    0A.3
08D6:  CALL   432
08D7:  BSF    0A.3
08D8:  MOVF   39,W
08D9:  MOVWF  49
08DA:  MOVLW  01
08DB:  MOVWF  4A
08DC:  BCF    0A.3
08DD:  CALL   6F1
08DE:  BSF    0A.3
....................             break;
08DF:  GOTO   156
....................          case set_start_minute:
....................             lcd_gotoxy(1, 3);
08E0:  MOVLW  01
08E1:  MOVWF  50
08E2:  MOVLW  03
08E3:  MOVWF  51
08E4:  BCF    0A.3
08E5:  CALL   40D
08E6:  BSF    0A.3
....................             printf(lcd_putc, "%02d:  ", nightTimer.startHour);
08E7:  MOVF   38,W
08E8:  MOVWF  49
08E9:  MOVLW  01
08EA:  MOVWF  4A
08EB:  BCF    0A.3
08EC:  CALL   6F1
08ED:  BSF    0A.3
08EE:  MOVLW  3A
08EF:  MOVWF  4F
08F0:  BCF    0A.3
08F1:  CALL   432
08F2:  BSF    0A.3
08F3:  MOVLW  20
08F4:  MOVWF  4F
08F5:  BCF    0A.3
08F6:  CALL   432
08F7:  BSF    0A.3
08F8:  MOVLW  20
08F9:  MOVWF  4F
08FA:  BCF    0A.3
08FB:  CALL   432
08FC:  BSF    0A.3
....................             break;    
08FD:  GOTO   156
....................          case set_end_hour:
....................             lcd_gotoxy(14, 3);
08FE:  MOVLW  0E
08FF:  MOVWF  50
0900:  MOVLW  03
0901:  MOVWF  51
0902:  BCF    0A.3
0903:  CALL   40D
0904:  BSF    0A.3
....................             printf(lcd_putc, "  :%02d", nightTimer.endMinute);
0905:  MOVLW  20
0906:  MOVWF  4F
0907:  BCF    0A.3
0908:  CALL   432
0909:  BSF    0A.3
090A:  MOVLW  20
090B:  MOVWF  4F
090C:  BCF    0A.3
090D:  CALL   432
090E:  BSF    0A.3
090F:  MOVLW  3A
0910:  MOVWF  4F
0911:  BCF    0A.3
0912:  CALL   432
0913:  BSF    0A.3
0914:  MOVF   3B,W
0915:  MOVWF  49
0916:  MOVLW  01
0917:  MOVWF  4A
0918:  BCF    0A.3
0919:  CALL   6F1
091A:  BSF    0A.3
....................             break;
091B:  GOTO   156
....................          case set_end_minute:
....................             lcd_gotoxy(14, 3);
091C:  MOVLW  0E
091D:  MOVWF  50
091E:  MOVLW  03
091F:  MOVWF  51
0920:  BCF    0A.3
0921:  CALL   40D
0922:  BSF    0A.3
....................             printf(lcd_putc, "%02d:  ", nightTimer.endHour);
0923:  MOVF   3A,W
0924:  MOVWF  49
0925:  MOVLW  01
0926:  MOVWF  4A
0927:  BCF    0A.3
0928:  CALL   6F1
0929:  BSF    0A.3
092A:  MOVLW  3A
092B:  MOVWF  4F
092C:  BCF    0A.3
092D:  CALL   432
092E:  BSF    0A.3
092F:  MOVLW  20
0930:  MOVWF  4F
0931:  BCF    0A.3
0932:  CALL   432
0933:  BSF    0A.3
0934:  MOVLW  20
0935:  MOVWF  4F
0936:  BCF    0A.3
0937:  CALL   432
0938:  BSF    0A.3
....................             break;  
0939:  GOTO   156
....................          case set_state:
....................             lcd_gotoxy(8, 4);
093A:  MOVLW  08
093B:  MOVWF  50
093C:  MOVLW  04
093D:  MOVWF  51
093E:  BCF    0A.3
093F:  CALL   40D
0940:  BSF    0A.3
....................             if (nightTimer.state) {
0941:  BTFSS  3C.0
0942:  GOTO   14D
....................                printf(lcd_putc, "  /OFF");
0943:  MOVLW  89
0944:  BSF    03.6
0945:  MOVWF  0D
0946:  MOVLW  02
0947:  MOVWF  0F
0948:  BCF    0A.3
0949:  BCF    03.6
094A:  CALL   5BF
094B:  BSF    0A.3
....................             }
094C:  GOTO   156
....................             else {
....................                printf(lcd_putc, "ON/   ");
094D:  MOVLW  8D
094E:  BSF    03.6
094F:  MOVWF  0D
0950:  MOVLW  02
0951:  MOVWF  0F
0952:  BCF    0A.3
0953:  BCF    03.6
0954:  CALL   5BF
0955:  BSF    0A.3
....................             }
....................             break;
....................       }  
....................    }
0956:  BSF    0A.3
0957:  BCF    0A.4
0958:  GOTO   1CF (RETURN)
.................... }
.................... 
.................... void upHandler() {
....................     hasChange = 1;
*
0059:  BSF    34.0
....................     if (setTime.stage == choose_type) {
005A:  BTFSC  31.0
005B:  GOTO   05F
....................         setTime.type = !setTime.type;
005C:  MOVLW  04
005D:  XORWF  31,F
....................     }
005E:  GOTO   0AB
....................     else {
....................         if (setTime.type == set_night_timer) {
005F:  BTFSC  31.2
0060:  GOTO   08A
....................             switch (setTime.nightTimer.stage) {
0061:  MOVF   32,W
0062:  ADDLW  FB
0063:  BTFSC  03.0
0064:  GOTO   089
0065:  ADDLW  05
0066:  GOTO   0AC
....................                case set_start_hour:
....................                   nightTimer.startHour++;
0067:  INCF   38,F
....................                   if (nightTimer.startHour > 23) nightTimer.startHour = 0;
0068:  BTFSC  38.7
0069:  GOTO   06E
006A:  MOVF   38,W
006B:  SUBLW  17
006C:  BTFSS  03.0
006D:  CLRF   38
....................                   break;
006E:  GOTO   089
....................                case set_start_minute:
....................                   nightTimer.startMinute++;
006F:  INCF   39,F
....................                   if (nightTimer.startMinute > 59) nightTimer.startMinute = 0;
0070:  BTFSC  39.7
0071:  GOTO   076
0072:  MOVF   39,W
0073:  SUBLW  3B
0074:  BTFSS  03.0
0075:  CLRF   39
....................                   break;    
0076:  GOTO   089
....................                case set_end_hour:
....................                   nightTimer.endHour++;
0077:  INCF   3A,F
....................                   if (nightTimer.endHour > 23) nightTimer.endHour = 0;
0078:  BTFSC  3A.7
0079:  GOTO   07E
007A:  MOVF   3A,W
007B:  SUBLW  17
007C:  BTFSS  03.0
007D:  CLRF   3A
....................                   break;
007E:  GOTO   089
....................                case set_end_minute:
....................                   nightTimer.endMinute++;
007F:  INCF   3B,F
....................                   if (nightTimer.endMinute > 59) nightTimer.endMinute = 0;
0080:  BTFSC  3B.7
0081:  GOTO   086
0082:  MOVF   3B,W
0083:  SUBLW  3B
0084:  BTFSS  03.0
0085:  CLRF   3B
....................                   break;  
0086:  GOTO   089
....................                case set_state:
....................                   nightTimer.state = !nightTimer.state;
0087:  MOVLW  01
0088:  XORWF  3C,F
....................                   break;
....................              }
....................         }
0089:  GOTO   0AB
....................         else {
....................             switch (setTime.currentTime.stage) {
008A:  MOVF   33,W
008B:  BTFSC  03.2
008C:  GOTO   094
008D:  XORLW  01
008E:  BTFSC  03.2
008F:  GOTO   09C
0090:  XORLW  03
0091:  BTFSC  03.2
0092:  GOTO   0A4
0093:  GOTO   0AB
....................                case set_hour:
....................                   currentTime.hour++;
0094:  INCF   35,F
....................                   if (currentTime.hour > 23) currentTime.hour = 0;
0095:  BTFSC  35.7
0096:  GOTO   09B
0097:  MOVF   35,W
0098:  SUBLW  17
0099:  BTFSS  03.0
009A:  CLRF   35
....................                   break;
009B:  GOTO   0AB
....................                case set_minute:
....................                   currentTime.minute++;
009C:  INCF   36,F
....................                   if (currentTime.minute > 59) currentTime.minute = 0;
009D:  BTFSC  36.7
009E:  GOTO   0A3
009F:  MOVF   36,W
00A0:  SUBLW  3B
00A1:  BTFSS  03.0
00A2:  CLRF   36
....................                   break;
00A3:  GOTO   0AB
....................                case set_second:
....................                   currentTime.second++;
00A4:  INCF   37,F
....................                   if (currentTime.second > 59) currentTime.second = 0;
00A5:  BTFSC  37.7
00A6:  GOTO   0AB
00A7:  MOVF   37,W
00A8:  SUBLW  3B
00A9:  BTFSS  03.0
00AA:  CLRF   37
....................                   break;
....................              }
....................         }
....................     }
00AB:  RETURN
.................... }
.................... 
.................... void downHandler() {
....................     hasChange = 1;
*
00B5:  BSF    34.0
....................     if (setTime.stage == choose_type) {
00B6:  BTFSC  31.0
00B7:  GOTO   0BB
....................         setTime.type = !setTime.type;
00B8:  MOVLW  04
00B9:  XORWF  31,F
....................     }
00BA:  GOTO   0F9
....................     else {
....................         if (setTime.type == set_night_timer) {
00BB:  BTFSC  31.2
00BC:  GOTO   0DE
....................             switch (setTime.nightTimer.stage) {
00BD:  MOVF   32,W
00BE:  ADDLW  FB
00BF:  BTFSC  03.0
00C0:  GOTO   0DD
00C1:  ADDLW  05
00C2:  GOTO   0FA
....................                case set_start_hour:
....................                   nightTimer.startHour--;
00C3:  DECF   38,F
....................                   if (nightTimer.startHour < 0) nightTimer.startHour = 23;
00C4:  BTFSS  38.7
00C5:  GOTO   0C8
00C6:  MOVLW  17
00C7:  MOVWF  38
....................                   break;
00C8:  GOTO   0DD
....................                case set_start_minute:
....................                   nightTimer.startMinute--;
00C9:  DECF   39,F
....................                   if (nightTimer.startMinute < 0) nightTimer.startMinute = 59;
00CA:  BTFSS  39.7
00CB:  GOTO   0CE
00CC:  MOVLW  3B
00CD:  MOVWF  39
....................                   break;    
00CE:  GOTO   0DD
....................                case set_end_hour:
....................                   nightTimer.endHour--;
00CF:  DECF   3A,F
....................                   if (nightTimer.endHour < 0) nightTimer.endHour = 23;
00D0:  BTFSS  3A.7
00D1:  GOTO   0D4
00D2:  MOVLW  17
00D3:  MOVWF  3A
....................                   break;
00D4:  GOTO   0DD
....................                case set_end_minute:
....................                   nightTimer.endMinute--;
00D5:  DECF   3B,F
....................                   if (nightTimer.endMinute < 0) nightTimer.endMinute = 59;
00D6:  BTFSS  3B.7
00D7:  GOTO   0DA
00D8:  MOVLW  3B
00D9:  MOVWF  3B
....................                   break;  
00DA:  GOTO   0DD
....................                case set_state:
....................                   nightTimer.state = !nightTimer.state;
00DB:  MOVLW  01
00DC:  XORWF  3C,F
....................                   break;
....................               }
....................         }
00DD:  GOTO   0F9
....................         else {
....................             switch (setTime.currentTime.stage) {
00DE:  MOVF   33,W
00DF:  BTFSC  03.2
00E0:  GOTO   0E8
00E1:  XORLW  01
00E2:  BTFSC  03.2
00E3:  GOTO   0EE
00E4:  XORLW  03
00E5:  BTFSC  03.2
00E6:  GOTO   0F4
00E7:  GOTO   0F9
....................                case set_hour:
....................                   currentTime.hour--;
00E8:  DECF   35,F
....................                   if (currentTime.hour < 0) currentTime.hour = 23;
00E9:  BTFSS  35.7
00EA:  GOTO   0ED
00EB:  MOVLW  17
00EC:  MOVWF  35
....................                   break;
00ED:  GOTO   0F9
....................                case set_minute:
....................                   currentTime.minute--;
00EE:  DECF   36,F
....................                   if (currentTime.minute < 0) currentTime.minute = 59;   
00EF:  BTFSS  36.7
00F0:  GOTO   0F3
00F1:  MOVLW  3B
00F2:  MOVWF  36
....................                   break;
00F3:  GOTO   0F9
....................                case set_second:
....................                   currentTime.second--;
00F4:  DECF   37,F
....................                   if (currentTime.second < 0) currentTime.second = 59;
00F5:  BTFSS  37.7
00F6:  GOTO   0F9
00F7:  MOVLW  3B
00F8:  MOVWF  37
....................                   break;
....................             }
....................         }
....................     }
00F9:  RETURN
.................... }
.................... 
.................... void enterHandler() {
....................     if (setTime.stage == choose_type) {
*
0198:  BTFSC  31.0
0199:  GOTO   19C
....................         setTime.stage = change_value;
019A:  BSF    31.0
....................     }
019B:  GOTO   1AF
....................     else {
....................         if (setTime.type == set_night_timer) {
019C:  BTFSC  31.2
019D:  GOTO   1A7
....................             setTime.nightTimer.stage++;
019E:  INCF   32,F
....................             if (setTime.nightTimer.stage > 4) {
019F:  MOVF   32,W
01A0:  SUBLW  04
01A1:  BTFSC  03.0
01A2:  GOTO   1A6
....................                 setTime.stage = 0;
01A3:  BCF    31.0
....................                 setTime.nightTimer.stage = 0;
01A4:  CLRF   32
....................                 setTime.type = set_current_time;
01A5:  BSF    31.2
....................             }
....................         }
01A6:  GOTO   1AF
....................         else {
....................             setTime.currentTime.stage++;
01A7:  INCF   33,F
....................             if (setTime.currentTime.stage > 2) {
01A8:  MOVF   33,W
01A9:  SUBLW  02
01AA:  BTFSC  03.0
01AB:  GOTO   1AF
....................                 setTime.stage = 0;
01AC:  BCF    31.0
....................                 setTime.currentTime.stage = 0;
01AD:  CLRF   33
....................                 setTime.type = set_night_timer;
01AE:  BCF    31.2
....................             }
....................         }
....................     }
.................... }
.................... 
.................... void longEnterHandler() {
....................    if (setTime.stage == change_value) {
*
017C:  BTFSS  31.0
017D:  GOTO   18F
....................         if (setTime.type == set_night_timer) {
017E:  BTFSC  31.2
017F:  GOTO   188
....................             setTime.nightTimer.stage--;
0180:  DECF   32,F
....................             if (setTime.nightTimer.stage > 4) {
0181:  MOVF   32,W
0182:  SUBLW  04
0183:  BTFSC  03.0
0184:  GOTO   187
....................                 setTime.nightTimer.stage = 0;
0185:  CLRF   32
....................                 setTime.stage = choose_type;             
0186:  BCF    31.0
....................             }
....................         }
0187:  GOTO   18F
....................         else {
....................             setTime.currentTime.stage--;
0188:  DECF   33,F
....................             if (setTime.currentTime.stage > 2) {
0189:  MOVF   33,W
018A:  SUBLW  02
018B:  BTFSC  03.0
018C:  GOTO   18F
....................                 setTime.currentTime.stage = 0;
018D:  CLRF   33
....................                 setTime.stage = choose_type;
018E:  BCF    31.0
....................             }
....................         }
....................     }
.................... }
.................... 
.................... void writeNightTimerData() {
....................    i2c_start();
*
07AF:  BSF    03.5
07B0:  BSF    11.0
07B1:  BTFSC  11.0
07B2:  GOTO   7B1
....................    i2c_write(0xD0);          
07B3:  MOVLW  D0
07B4:  BCF    03.5
07B5:  MOVWF  51
07B6:  CALL   459
....................    i2c_write(0x08);              
07B7:  MOVLW  08
07B8:  MOVWF  51
07B9:  CALL   459
....................    i2c_write(nightTimer.startHour);      
07BA:  MOVF   38,W
07BB:  MOVWF  51
07BC:  CALL   459
....................    i2c_write(nightTimer.startMinute);      
07BD:  MOVF   39,W
07BE:  MOVWF  51
07BF:  CALL   459
....................    i2c_write(nightTimer.endHour);       
07C0:  MOVF   3A,W
07C1:  MOVWF  51
07C2:  CALL   459
....................    i2c_write(nightTimer.endMinute);      
07C3:  MOVF   3B,W
07C4:  MOVWF  51
07C5:  CALL   459
....................    i2c_write(nightTimer.state);     
07C6:  MOVLW  00
07C7:  BTFSC  3C.0
07C8:  MOVLW  01
07C9:  MOVWF  49
07CA:  MOVWF  51
07CB:  CALL   459
....................    i2c_stop();
07CC:  BSF    03.5
07CD:  BSF    11.2
07CE:  BTFSC  11.2
07CF:  GOTO   7CE
07D0:  BCF    03.5
07D1:  BSF    0A.3
07D2:  BCF    0A.4
07D3:  GOTO   4EA (RETURN)
.................... }
.................... 
.................... void readNightTimerData() {
....................    i2c_start();
*
0588:  BSF    03.5
0589:  BSF    11.0
058A:  BTFSC  11.0
058B:  GOTO   58A
....................    i2c_write(0xD0);
058C:  MOVLW  D0
058D:  BCF    03.5
058E:  MOVWF  51
058F:  CALL   459
....................    i2c_write(0x08); 
0590:  MOVLW  08
0591:  MOVWF  51
0592:  CALL   459
....................    i2c_start();
0593:  BSF    03.5
0594:  BSF    11.1
0595:  BTFSC  11.1
0596:  GOTO   595
....................    i2c_write(0xD1);
0597:  MOVLW  D1
0598:  BCF    03.5
0599:  MOVWF  51
059A:  CALL   459
....................    nightTimer.startHour  = i2c_read();   
059B:  MOVLW  01
059C:  MOVWF  77
059D:  CALL   469
059E:  MOVF   78,W
059F:  MOVWF  38
....................    nightTimer.startMinute  = i2c_read();  
05A0:  MOVLW  01
05A1:  MOVWF  77
05A2:  CALL   469
05A3:  MOVF   78,W
05A4:  MOVWF  39
....................    nightTimer.endHour  = i2c_read(); 
05A5:  MOVLW  01
05A6:  MOVWF  77
05A7:  CALL   469
05A8:  MOVF   78,W
05A9:  MOVWF  3A
....................    nightTimer.endMinute = i2c_read();
05AA:  MOVLW  01
05AB:  MOVWF  77
05AC:  CALL   469
05AD:  MOVF   78,W
05AE:  MOVWF  3B
....................    nightTimer.state = i2c_read();
05AF:  MOVLW  01
05B0:  MOVWF  77
05B1:  CALL   469
05B2:  MOVF   78,W
05B3:  BTFSS  78.0
05B4:  BCF    3C.0
05B5:  BTFSC  78.0
05B6:  BSF    3C.0
....................    i2c_stop();
05B7:  BSF    03.5
05B8:  BSF    11.2
05B9:  BTFSC  11.2
05BA:  GOTO   5B9
05BB:  BCF    03.5
05BC:  BSF    0A.3
05BD:  BCF    0A.4
05BE:  GOTO   422 (RETURN)
.................... }
.................... 

Configuration Fuses:
   Word  1: 3F3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
